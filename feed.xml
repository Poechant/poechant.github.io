<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://www.mikecaptain.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.mikecaptain.com/" rel="alternate" type="text/html" /><updated>2023-01-25T10:41:44+00:00</updated><id>https://www.mikecaptain.com/feed.xml</id><title type="html">麦克船长的技术、产品与商业博客</title><subtitle>麦克船长对于技术、产品、商业等领域的分享|AI,A.I.,NLP,神经网络,人工智能,自然语言处理,BERT,GPT,ChatGPT,OpenAI,阿里巴巴,P9,运营,淘宝,天猫,总监,高管</subtitle><author><name>Poechant</name><email>zhongchao.ustc@gmail.com</email></author><entry><title type="html">AIGC 革命前夜：横扫自然语言处理的 Transformer 模型</title><link href="https://www.mikecaptain.com/2023/01/22/captain-aigc-1-transformer/" rel="alternate" type="text/html" title="AIGC 革命前夜：横扫自然语言处理的 Transformer 模型" /><published>2023-01-22T09:13:09+00:00</published><updated>2023-01-22T09:13:09+00:00</updated><id>https://www.mikecaptain.com/2023/01/22/captain-aigc-1-transformer</id><content type="html" xml:base="https://www.mikecaptain.com/2023/01/22/captain-aigc-1-transformer/">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;本文试图从技术角度搞清楚一个问题：&lt;strong&gt;过去一年 AIGC 爆火、过去五年 NLP（自然语言处理）领域突飞猛进的缘起是什么？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个问题被解答后，将还有两个问题，但暂时本文没有作答：1）如果认为通过图灵测试代表着 AGI（Artificial General Intelligence，通用人工智能）的话，当下 NLP，乃至 AGI 发展到什么程度了？2）未来一些年内，AGI 的发展路线可能会是怎样的？&lt;/p&gt;

&lt;p&gt;利用春节时间，写了这么一篇数万字的长文笔记，希望共同爱好的朋友能读完多多指正。我是船涨，网名一直用「麦克船长」，中科大计算机本科毕业后先是做的 RTC 技术、分布式系统等等，干过 Full Stack，后来创业在产品、运营、营销、供应链上折腾了些年后来到阿里，在淘系做过产品、运营。&lt;/p&gt;

&lt;h4 id=&quot;1我来阿里之后第一个新增爱好是变形金刚模型第二个新增爱好是变形金刚模型&quot;&gt;1、我来阿里之后第一个新增爱好是「变形金刚模型」，第二个新增爱好是「变形金刚模型」&lt;/h4&gt;

&lt;p&gt;写了个这么冷的梗，其实想说的是，前者指的是著名 IP「变形金刚」相关的手办玩具模型，后者指的是这个引领革命的人工智能语言模型 Transformer。这两个爱好，都与目前从事的电商工作本职没有表面上的直接联系，权当爱好了。&lt;/p&gt;

&lt;p&gt;2022 年「生成式 AI」应用取得了突飞猛进的发展，作为一个「古典互联网」从业者，深切地感到这一次 AI 技术可能会带来的颠覆式变革，这让我兴奋又焦虑。2022 年上半年，我从天天特卖业务负责人到大聚划算运营中心负责人，在去年相当长一段时间里在关注直播带货在营销平台的模式命题，一直在思考一个问题：直播电商的高效（更适合的商品演绎方式 + 私域权益 + 冲动购买等」vs. 直播电商的低效（直播分发无人货匹配 + 直播间内千人一面 + 货品状态未知 + 主播不可控等），能否推动一个保留直播的高效，同时解决直播的低效的模式呢？&lt;/p&gt;

&lt;p&gt;这里面有大量的内容值得探讨，不过这不是船涨该系列文章的初衷，但这是我为什么开始非常关注 AI 的引子。直播电商的数字人技术基础，有动作捕捉、面部表情模拟、视觉渲染、直播话术生成、语音合成等等。依据第一性原理抽丝剥茧后，我发现尽管动作捕捉、视觉渲染等等很多技术仍有很大挑战，但是从商业视角看真正最影响用户心智的，是直播话术生成和演绎，除了头部主播，绝大多数直播带货在这方面都做的很糟糕，那么这里面就有巨大的「机器学习」生成内容超越非头部的大多数从业者的市场空间，而这完全依赖自然语言处理（NLP）。&lt;/p&gt;

&lt;p&gt;这个问题就属于「生成式 AI」的范畴了，国外科技圈叫它「Gen-AI」，即 Generative AI，中国科技圈都叫它「AIGC」，即 AI Generated Content，与 UGC、PGC 相对应。Gen-AI 的叫法更关注主体，具体地说是「生成式 AI 模型」，它是个「内容引擎」。而中国的叫法更关注「内容应用」。&lt;/p&gt;

&lt;p&gt;讲到 AIGC 这里，大家熟悉的 ChatGPT 就在 2022 年年底登场了。也是因为 ChatGPT 的破圈，带来了 AIGC 在国内科技圈的关注度暴涨。我从去年年中开始关注「文生图，text2image」领域的明星 Stable Diffusion 开源，进而关注到了 text2image 应用的爆发，包括 Disco Diffusion、MidJourney、DALL·E 2 等等，这些都源于 CV（计算机视觉）领域因为 Diffusion 模型发展带来的技术突破。&lt;/p&gt;

&lt;p&gt;AI 生成图片确实非常惊人。我酷爱变形金刚模玩，进而对机甲类都非常喜欢，所以随手生成了几张图，这里贴一下大家看看，分钟级的创作速度。（注意：当下 AI 生成图片主要是基于 Diffusion 的应用发展，AI 生成文本的核心驱动才是 Transformer 模型，此处只是展示）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2022-12-16-midjourney-first-test-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2022-12-16-midjourney-first-test-2.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;但是从第一性原理角度讲，生成图片的应用广度，远远小于生成文本。文本内容的本质是语言文字的理解与生成，人类历史有 600 万年，但是人类文明历史大概就 6000 年，文明的大发展出现在近 2000 多年的原因，主要来自 3500 多年前人类发明了文字。所以 AI 生成文本，意味着 AI 可以用人类熟悉的方式（语言文字）与人类高效协作，这必将引爆生产力革命。而这必将深入影响电商、内容、游戏、云计算、企业服务等众多领域。&lt;/p&gt;

&lt;h4 id=&quot;2掌握技术基础是当下读懂-ai-脉搏的基本功而这个脉搏将带动各行各业&quot;&gt;2、掌握技术基础，是当下读懂 AI 脉搏的基本功，而这个脉搏将带动各行各业&lt;/h4&gt;

&lt;p&gt;一旦深入关注 AI、关注 NLP 领域，你就会发现当下仍然处于一个技术发展突破的阶段，不关注技术的情况下来聊 AI、聊 NLP、聊 AIGC，那就只能是一个「爱好者」，而无法深入与这个行业内的弄潮儿对话，更不要提参与其中了。所以这个春节，船涨回归了当年做技术时的初心，翻了一些材料，学习了 NLP 语言模型的关键技术，在此作为技术学习笔记，与大家分享。尽管担心班门弄斧，但是本着费曼老师提倡的输出学习法，我把自己学习梳理的内容抛出来，除了会更帮助到我自己，也能结交一些对此同样在关注的同学们，欢迎感兴趣的同学加我的微信（微信号 sinosuperman）在业余时间和我交流。&lt;/p&gt;

&lt;p&gt;本文将包括这几部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;第一章，主要介绍 Transformer 出现之前的几个主流语言模型，包括 N 元文法（n-gram）、多层感知器（MLP）、卷积神经网络（CNN）、循环神经网络（RNN）。其中 CNN 主要应用领域在计算机视觉，因此没有更详细展开。其他模型也未面面俱到，主要考虑还是一个领域学习者的角度来了解和应用，而非研究。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第二章，是本文的核心，先介绍了注意力机制（Attention Mechanism），然后基于第一章对此前几大语言模型了解后，我们能更好地理解 Transformer 为什么会带来革命性的影响。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第三章，是一个 Transformer 的实现版本，基于 Tensorflow。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;阅读本文，先对你过往的基础知识做了一些假设，如果你暂未了解，可能在阅读时遇到以下内容做一些简单地查询即可：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Word Presentation：自然语言处理中的词表示法，主要涉及 embedding。&lt;/li&gt;
  &lt;li&gt;张量：需要一点基础，比如了解张量的形状、升降维度等。但不会涉及到复杂问题，对一阶张量（向量）、二阶张量（矩阵）的简单运算有数学基础即可。对三阶张量，大概能想象出其空间含义即可。语言模型里理解词之间的距离，是有其空间几何意义的。&lt;/li&gt;
  &lt;li&gt;技术框架：PyTorch 或 TensorFlow 框架。由于时间和篇幅关系，春节期间梳理这些时，对于框架基础，我主要是 Google 现用现查，询问 ChatGPT 以及在微信读书里直接搜索全文。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为技术笔记难免有纰漏或理解错误，欢迎指正。文中自绘图片用的是 Graphviz，公式生成用的是 KaTeX，贴到 ATA 后难免有一些没有兼容的部分（发现的已做了 fix），望见谅。&lt;/p&gt;

&lt;h2 id=&quot;第一章--2017-年之前的几个关键-nlp-语言模型&quot;&gt;第一章 · 2017 年之前的几个关键 NLP 语言模型&lt;/h2&gt;

&lt;p&gt;NLP 的技术基础方面，我认为主要是这两部分：词表示法（Word Presentation）、语言模型（Language Model）。对于词表示法，这里不做详细介绍，基本的思路就是把词表示为向量（一维张量），最基本的 One-Hot、Word2Vec、GloVe、fastText 等。这部分的技术演进也在不断前进，比如本文将要重点介绍的 Transformer 模型里，用到的词表示法是「引入上下文感知的词向量」。&lt;/p&gt;

&lt;p&gt;语言模型从早期的 N 元文法（N-Gram，本文要介绍的），到神经网络被提出后最早期的感知器（Perceptron），再到后来席卷计算机视觉（CV）领域的卷积神经网络（CNN），然后出现考虑序列特征的循环神经网络（RNN，包括 Encoder-Decoder 模型），直到 2017 年横空出世的 Transformer，大概分这五个主要阶段。因为本文的重点是 Transformer，所以前面四个模型我会快速概览一下，然后介绍下最朴素的注意力（Attention）机制，基于此再详细介绍下 Transformer，并对一个完整的、精炼实现的代码实例进行精讲。&lt;/p&gt;

&lt;h3 id=&quot;第-1-节--n-元文法语言模型&quot;&gt;第 1 节 · N 元文法语言模型&lt;/h3&gt;

&lt;h4 id=&quot;11马尔科夫假设markov-assumption与-n-元文法语言模型n-gram-language-model&quot;&gt;1.1、马尔科夫假设（Markov Assumption）与 N 元文法语言模型（N-gram Language Model）&lt;/h4&gt;

&lt;p&gt;下一个词出现的概率只依赖于它前面 n-1 个词，这种假设被称为「马尔科夫假设（Markov Assumption」。N 元文法，也称为 N-1 阶马尔科夫链。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一元文法（1-gram），unigram，零阶马尔科夫链，不依赖前面任何词；&lt;/li&gt;
  &lt;li&gt;二元文法（2-gram），bigram，一阶马尔科夫链，只依赖于前 1 个词；&lt;/li&gt;
  &lt;li&gt;三元文法（3-gram），trigram，二阶马尔科夫链，只依赖于前 2 个词；&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过前 t-1 个词预测时刻 t 出现某词的概率，用最大似然估计：&lt;/p&gt;

\[P(w_t | w_1,w_2...w_{t-1}) = \frac{C(w_1,w_2,...w_t)}{C(w_1,w_2,...w_{t-1})}\]

&lt;p&gt;进一步地，一组词（也就是一个句子）出现的概率就是：&lt;/p&gt;

\[P(w_1,w_2,...w_t) = P(w_t | w_1,w_2,...w_{t-1}) \cdot P(w_{t-1} | w_1,w_2,...w_{t-2}) \cdot ... \cdot P(w_1)
			      = \displaystyle\prod_{i=1}^{t-1}P(w_i | w_{1:i-1})\]

&lt;p&gt;为了解决句头、尾逇概率计算问题，我们再引入两个标记 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;BOS&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;EOS&amp;gt;&lt;/code&gt; 分别表示 beginning of sentence 和 end of sentence，所以  \(w_0 =\) &amp;lt;BOS&amp;gt;、 \(w_{length + 1} =\) &amp;lt;EOS&amp;gt;，其中 length 是词的数量。&lt;/p&gt;

&lt;p&gt;具体地，比如对于 bigram，该模型表示如下：&lt;/p&gt;

\[\begin{aligned}
P(w_1,w_2,...w_t) &amp;amp;= \displaystyle\prod_{i=1}^{t-1}P(w_i | w_{i-1}) \\
P(w_t | w_{t-1}) &amp;amp;= \frac{C(w_{t-1}, w_t)}{C(w_{t-1})}
\end{aligned}\]

&lt;ul&gt;
  &lt;li&gt;如果有词出现次数为了 0，这一串乘出来就是 0 了，咋办？&lt;/li&gt;
  &lt;li&gt;因为基于马尔科夫假设，所以 N 固定窗口取值，对长距离词依赖的情况会表现很差。&lt;/li&gt;
  &lt;li&gt;如果把 N 值取很大来解决长距离词依赖，则会导致严重的数据稀疏（零频太多了），参数规模也会急速爆炸（高维张量计算）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的第一个问题，我们引入平滑 / 回退 / 差值等方法来解决，而后面两个问题则是在神经网络模型出现后才更好解决的。&lt;/p&gt;

&lt;h4 id=&quot;12平滑smoothing-折扣discounting&quot;&gt;1.2、平滑（Smoothing）/ 折扣（Discounting）&lt;/h4&gt;

&lt;p&gt;虽然限定了窗口 n 大小降低了词概率为 0 的可能性，但当 n-gram 的 n 比较大的时候会有的未登录词问题（Out Of Vocabulary，OOV）。另一方面，训练数据很可能也不是 100% 完备覆盖实际中可能遇到的词的。所以为了避免 0 概率出现，就有了让零平滑过渡为非零的补丁式技术出现。&lt;/p&gt;

&lt;p&gt;最简单的平滑技术，就是折扣法（Discounting）。这是一个非常容易想到的办法，就是把整体 100% 的概率腾出一小部分来，给这些零频词（也常把低频词一起考虑）。常见的平滑方法有：加 1 平滑、加 K 平滑、Good-Turing 平滑、Katz 平滑等。&lt;/p&gt;

&lt;h5 id=&quot;121加-1-平滑--拉普拉斯平滑add-one-discounting--laplace-smoothing&quot;&gt;1.2.1、加 1 平滑 / 拉普拉斯平滑（Add-One Discounting / Laplace Smoothing）&lt;/h5&gt;

&lt;p&gt;加 1 平滑，就是直接将所有词汇的出现次数都 +1，不止针对零频词、低频词。如果继续拿 bigram 举例来说，模型就会变成：&lt;/p&gt;

\[P(w_i | w_{i-1}) = \frac{C_(w_{i-1},w_i) + 1}{\displaystyle\sum_{j=1}^n(C_(w_{i-1},w_j) + 1)} = \frac{C(w_{i-1}, w_i) + 1}{C(w_{i-1}) + |\mathbb{V}|}\]

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;其中  \(N\)  表示所有词的词频之和， $$&lt;/td&gt;
      &lt;td&gt;\mathbb{V}&lt;/td&gt;
      &lt;td&gt;$$  表示词汇表的大小。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果当词汇表中的词，很多出现次数都很小，这样对每个词的词频都 +1，结果的偏差影响其实挺大的。换句话说，+1 对于低频词很多的场景，加的太多了，应该加一个更小的数（ 1 &amp;lt; δ &amp;lt; 1）。所以有了下面的「δ 平滑」技术。&lt;/p&gt;

&lt;h5 id=&quot;122加-k-平滑--δ-平滑add-k-discounting--delta-smoothing&quot;&gt;1.2.2、加 K 平滑 / δ 平滑（Add-K Discounting / Delta Smoothing）&lt;/h5&gt;

&lt;p&gt;把 +1 换成 δ，我们看下上面 bigram 模型应该变成上面样子：&lt;/p&gt;

\[P(w_i | w{i-1}) = \frac{C_(w_{i-1},w_i) + \delta}{\displaystyle\sum_{j=1}^n(C_(w_{i-1},w_j) + \delta)} = \frac{C(w_{i-1}, w_i) + \delta}{C(w_{i-1}) + \delta|\mathbb{V}|}\]

&lt;p&gt;δ 是一个超参数，确定它的值需要用到困惑度（Perplexity，一般用缩写 PPL）。另外，有些文章里也会把这个方法叫做「加 K 平滑，Add-K Smoothing」。&lt;/p&gt;

&lt;h5 id=&quot;123困惑度perplexity&quot;&gt;1.2.3、困惑度（Perplexity）&lt;/h5&gt;

&lt;p&gt;对于指定的测试集，困惑度定义为测试集中每一个词概率的几何平均数的倒数，公式如下：&lt;/p&gt;

\[\operatorname{PPL}(\mathbb{D}_{test}) = \frac{1}{\sqrt[n]{P(w_1,w_2...w_n)}}\]

&lt;p&gt;把  \(P(w_1,w_2,...w_t) = \displaystyle\prod_{i=1}^{t-1}P(w_i\text{\textbar}w_{i-1})\)  带入上述公式，就得到了 PPL 的计算公式：&lt;/p&gt;

\[\operatorname{PPL}(\mathbb{D}_{test}) = (\displaystyle\prod_{i=1}^nP(w_i|w_{1:i-1}))^{-\frac{1}{n}}\]

&lt;h4 id=&quot;13回退back-off&quot;&gt;1.3、回退（Back-off）&lt;/h4&gt;

&lt;p&gt;在多元文法模型中，比如以 3-gram 为例，如果出现某些三元语法概率为零，则不使用零来表示概率，而回退到 2-gram，如下。&lt;/p&gt;

\[P(w_i|w_{i-2}w_{i-1}) =
\begin{cases}
P(w_i|w_{i-2}w_{i-1}) &amp;amp; C(w_{i-2}w_{i-1}w_i) &amp;gt; 0 \\
P(w_i|w_{i-1}) &amp;amp; C(w_{i-2}w_{i-1}w_i) = 0 \enspace and \enspace C(w_{i-1}w_i) &amp;gt; 0
\end{cases}\]

&lt;h4 id=&quot;14差值interpolation&quot;&gt;1.4、差值（Interpolation）&lt;/h4&gt;

&lt;p&gt;N 元文法模型如果用回退法，则只考虑了 n-gram 概率为 0 时回退为 n-1 gram，那么自然要问：n-gram 不为零时，是不是也可以按一定权重来考虑 n-1 gram？于是有了插值法。以 3-gram 为例，把 2-gram、1-gram 都考虑进来：&lt;/p&gt;

\[P(w_i|w_{i-2}w_{i-1}) = \lambda_1 P(w_i|w_{i-2}w_{i-1}) + \lambda_2 P(w_i|w_{i-1}) + \lambda_3 P(w_i)\]

&lt;h3 id=&quot;第-2-节--感知器perceptron&quot;&gt;第 2 节 · 感知器（Perceptron）&lt;/h3&gt;

&lt;p&gt;N 元文法模型的显著问题，在「马尔科夫假设与 N 元文法语言模型」小节已经提到了。这些问题基本在神经网络模型中被解决，而要了解神经网络模型，就要从感知器（Perceptron）开始。1957 年感知机模型被提出，1959 年多层感知机（MLP）模型被提出。MLP 有时候也被称为 ANN，即 Artificial Neural Network，接下来我们来深入浅出地了解一下，并有一些动手的练习。&lt;/p&gt;

&lt;h4 id=&quot;21感知器perceptron解决二元分类任务的前馈神经网络&quot;&gt;2.1、感知器（Perceptron）：解决二元分类任务的前馈神经网络&lt;/h4&gt;

&lt;p&gt;\(x\) 是一个输入向量，\(\omega\) 是一个权重向量（对输入向量里的而每个值分配一个权重值所组成的向量）。举一个具体任务例子，比如如果这两个向量的内积超过某个值，则判断为 1，否则为 0，这其实就是一个分类任务。那么这个最终输出值可以如下表示：&lt;/p&gt;

\[y = \begin{cases} 1 &amp;amp; (\omega \cdot x \geq 0) \\ 0 &amp;amp; (\omega \cdot x \lt 0) \end{cases}\]

&lt;p&gt;这就是一个典型的感知器（Perceptron），一般用来解决分类问题。还可以再增加一个偏差项（bias），如下：&lt;/p&gt;

\[y = \begin{cases} 1 &amp;amp; (\omega \cdot x + b \geq 0) \\ 0 &amp;amp; (\omega \cdot x + b \lt 0) \end{cases}\]

&lt;p&gt;感知器其实就是一个前馈神经网络，由输入层、输出层组成，没有隐藏层。而且输出是一个二元函数，用于解决二元分类问题。&lt;/p&gt;

&lt;h4 id=&quot;22线性回归linear-regression从离散值的感知器解决类问题到连续值的线性回归解决回归问题&quot;&gt;2.2、线性回归（Linear Regression）：从离散值的感知器（解决类问题），到连续值的线性回归（解决回归问题）&lt;/h4&gt;

&lt;p&gt;一般来说，我们认为感知器的输出结果，是离散值。一般来说，我们认为离散值作为输出解决的问题，是分类问题；相应地，连续值解决的问题是回归（Regression）。比如对于上面的感知器，如果我们直接将 \(\omega \cdot x + b\) 作为输出值，则就变成了一个线性回归问题的模型了。&lt;/p&gt;

&lt;p&gt;下面我们用 PyTorch 来实现一个线性回归的代码示例，首先我们要了解在 PyTorch 库里有一个非常常用的函数：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个函数在创建时会自动初始化权值和偏置，并且可以通过调用它的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forward&lt;/code&gt; 函数来计算输入数据的线性变换。具体来说，当输入为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forward&lt;/code&gt; 函数会计算 \(y = \omega \cdot x + b\)，其中  \(W\)  和  \(b\)  分别是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.Linear&lt;/code&gt; 图层的权值和偏置。&lt;/p&gt;

&lt;p&gt;我们来一个完整的代码示例：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch.nn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义模型
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinearRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 初始化模型
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义损失函数和优化器
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criterion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSELoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SGD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 创建输入特征 X 和标签 y
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 训练模型
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 前向传播
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 反向传播
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 创建测试数据 X_test 和标签 y_test
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 测试模型
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Test loss: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码，一开始先创建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LinearRegression&lt;/code&gt; 线性回归模型的类，其中有一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forward&lt;/code&gt; 前向传播函数，调用时其实就是计算一下输出值 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;主程序，一开始创建一个线性回归模型实例，然后定义一个用于评价模型效果的损失函数评价器，和用随机梯度下降（Stochastic Gradient Descent）作为优化器。&lt;/p&gt;

&lt;p&gt;然后创建一个输入特征张量，和标签张量。用这组特征和标签进行训练，训练的过程就是根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; 计算与测试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;predictions&lt;/code&gt; 向量，再把它和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; 一起给评价器算出损失 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loss&lt;/code&gt;，然后进行反向传播。注意反向传播的三行代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如此训练 100 次（每一次都会黑盒化地更新模型的参数，一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epoch&lt;/code&gt; 就是一次训练过程，有时也称为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iteration&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt;，不断根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loss&lt;/code&gt; 训练优化模型参数。&lt;/p&gt;

&lt;p&gt;然后我们创建了一组测试特征值张量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X_test&lt;/code&gt;，和测试标签张量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y_test&lt;/code&gt;，然后用它们测试模型性能，把测试特征得到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;predictions&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y_test&lt;/code&gt; 共同传给评价器，得到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loss&lt;/code&gt;。在这个例子中我们会得到如下结果：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0034&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;23逻辑回归logistic-regression没有值域约束的线性回归到限定在一个范围内的逻辑回归常用于分类问题&quot;&gt;2.3、逻辑回归（Logistic Regression）：没有值域约束的线性回归，到限定在一个范围内的逻辑回归（常用于分类问题）&lt;/h4&gt;

&lt;p&gt;可以看到线性回归问题，输出值是没有范围限定的。如果限定（limit）在特定的  \((0, L)\)  范围内，则就叫做逻辑回归了。那么如何将一个线性回归变成逻辑回归呢？一般通过如下公式变换：&lt;/p&gt;

\[y = \frac{L}{1 + e^{-k(z-z_0)}}\]

&lt;p&gt;这样原来的  \(z \in (-\infty, +\infty)\)  就被变换成了  \(y \in (0, L)\)  了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;激活函数&lt;/strong&gt;：这种把输出值限定在一个目标范围内的函数，被叫做 &lt;strong&gt;激活函数（Activation Function）&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;函数的陡峭程度&lt;/strong&gt; 由  \(k\)  控制，越大越陡。&lt;/li&gt;
  &lt;li&gt;当  \(z = z_0\)  时， \(y = \frac{L}{2}\) 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面给出一个基于 Python 的 scikit-learn 库的示例代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.linear_model&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.datasets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_iris&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.model_selection&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_test_split&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 这是 scikit-learn 库里的一个简单的数据集
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 把 iris 数据集拆分成训练集和测试集两部分
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_test_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 用 scikit-learn 库创建一个逻辑回归模型的实例
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 用上边 split 出来的训练集数据，训练 lr 模型实例
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 用训练过的模型，拿测试集的输入数据做测试
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 用测试集的数据验证精确性
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accuracy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;24sigmoid-回归sigmoid-regression归一化的逻辑回归一般用于二元分类任务&quot;&gt;2.4、Sigmoid 回归（Sigmoid Regression）：归一化的逻辑回归，一般用于二元分类任务&lt;/h4&gt;

&lt;p&gt;当  \(L = 1, k = 1, z_0 = 0\) ，此时的激活函数就是 &lt;strong&gt;Sigmoid&lt;/strong&gt; 函数，也常表示为  \(\sigma\)  函数，如下：&lt;/p&gt;

\[y = \frac{1}{1 + e^{-z}}\]

&lt;p&gt;Sigmoid 回归的值域，恰好在 (0, 1) 之间，所以常备作为用来归一化的激活函数。而一个线性回归模型，再用 sigmoid 函数归一化，这种也常被称为「Sigmoid 回归」。Sigmoid 这个单词的意思也就是 S 形，我们可以看下它的函数图像如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-19-language-model-2.png&quot; alt=&quot;image&quot; width=&quot;490&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为归一化，所以也可以把输出值理解为一个概率。比如我们面对一个二元分类问题，那么输出结果就对应属于这个类别的概率。&lt;/p&gt;

&lt;p&gt;这样一个 sigmoid 模型可以表示为：&lt;/p&gt;

\[y = Sigmoid(W \cdot x + b)\]

&lt;p&gt;另外 sigmoid 函数的导数（即梯度）是很好算的： \(y&apos; = y \cdot (1-y)\) 。这非常方便用于「梯度下降算法」根据 loss 对模型参数进行优化。Sigmoid 回归，一般用于二元分类任务。那么对于超过二元的情况怎么办呢？这就引出了下面的 Softmax 回归。&lt;/p&gt;

&lt;h4 id=&quot;25softmax-回归softmax-regression从解决二元任务的-sigmoid到解决多元分类任务的-softmax&quot;&gt;2.5、Softmax 回归（Softmax Regression）：从解决二元任务的 sigmoid，到解决多元分类任务的 Softmax&lt;/h4&gt;

&lt;p&gt;相对逻辑回归，Softmax 也称为多项逻辑回归。上面说 Sigmoid 一般用于解决二元分类问题，那么多元问题就要用 Softmax 回归了。我们来拿一个具体问题来解释，比如问题是对于任意输入的一个电商商品的图片，来判断这个图片所代表的的商品，属于哪个商品类目。假设我们一共有 100 个类目。那么一个图片比如说其所有像素值作为输入特征值，输出就是一个 100 维的向量 ** \(z\) **，输出向量中的每个值  \(z_i\)  表示属于相对应类目的概率  \(y_i\)  ：&lt;/p&gt;

\[y_i = Softmax(z)_i = \frac{e^{z_i}}{e^{z_1} + e^{z_2} + ... + e^{z_100}}\]

&lt;p&gt;那么最后得到的  \(y\)  向量中的每一项就对应这个输入  \(z\)  属于这 100 个类目的各自概率了。所以如果回归到一般问题，这个 Softmax 回归的模型就如下：&lt;/p&gt;

\[y = Softmax(W \cdot x + b)\]

&lt;p&gt;对于上面电商商品图片的例子，假设每个图片的尺寸是 512x512，这个模型展开式如下：&lt;/p&gt;

\[\begin{bmatrix} y_1 \\ y_2 \\ ... \\ y_{100} \end{bmatrix} = Softmax(\begin{bmatrix} w_{1,1}, &amp;amp; w_{1,2}, &amp;amp; ... &amp;amp; w_{1, 512} \\ w_{2,1}, &amp;amp; w_{2,2}, &amp;amp; ... &amp;amp; w_{2, 512} \\ ... &amp;amp; ... &amp;amp; ... &amp;amp; ... \\ w_{100,1}, &amp;amp; w_{100,2}, &amp;amp; ... &amp;amp; w_{100, 512} \end{bmatrix} \cdot \begin{bmatrix} x_1 \\ x_2 \\ ... \\ x_{512} \end{bmatrix} + \begin{bmatrix} b_1 \\ b_2 \\ ... \\ b_{512} \end{bmatrix})\]

&lt;p&gt;这个对输入向量  \(x\)  执行  \(w \cdot x + b\)  运算，一般也常称为「线性映射/线性变化」。&lt;/p&gt;

&lt;h4 id=&quot;26多层感知器multi-layer-perceptron&quot;&gt;2.6、多层感知器（Multi-Layer Perceptron）&lt;/h4&gt;

&lt;p&gt;上面我们遇到的所有任务，都是用线性模型（Linear Models）解决的。有时候问题复杂起来，我们就要引入非线性模型了。&lt;/p&gt;

&lt;p&gt;这里我们要介绍一个新的激活函数 —— ReLU（Rectified Linear Unit）—— 一个非线性激活函数，其定义如下：&lt;/p&gt;

\[ReLU(z) = max(0, z)\]

&lt;p&gt;比如对于 MNIST 数据集的手写数字分类问题，就是一个典型的非线性的分类任务，下面给出一个示例代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch.nn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torchvision&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torchvision.transforms&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transforms&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义多层感知器模型
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MLP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MLP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReLU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 超参数
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;num_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;num_epochs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 加载 MNIST 数据集
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;../../data&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transforms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToTensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test_dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;../../data&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transforms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToTensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 数据加载器
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test_loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                          &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                          &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MLP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义损失函数和优化器
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criterion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CrossEntropyLoss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 训练模型
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_epochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 前向传播
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 反向传播
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero_grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 输出训练损失
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Epoch &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, Training Loss: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码里，我们能看到 MLP 的模型定义是：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReLU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与前面的模型示例代码类似，也都用到了反向传播、损失函数评价器、优化器。如果用公式表示的话，就是如下的模型定义：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;z = W_1 \cdot x + b_1 \\
&amp;amp;h = ReLU(z) \\
&amp;amp;y = W_2 \cdot h + b_2
\end{aligned}\]

&lt;p&gt;我们知道 MLP 通常是一个输入和输出长度相同的模型，但少数情况下也可以构建输入和输出长度不同的 MLP 模型，比如输入一组序列后，输出是一个离散的分类结果。&lt;/p&gt;

&lt;h4 id=&quot;27简述如何训练一个模型正向传播与反向传播&quot;&gt;2.7、简述如何训练一个模型：正向传播与反向传播&lt;/h4&gt;

&lt;p&gt;这是个很重要的议题。但是春节时间有限，这部分只能简写了，我们更多聚焦在语言模型本身。这里简述一下，后续可能会再补全。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;训练神经网络，主要包括前向传播、反向传播这两步。&lt;/li&gt;
  &lt;li&gt;正向传播，就是将数据输入给模型，基于已确定的一组参数（比如 MLP 中的权重 W、偏置 b 等），得到输出结果。根据输出结果计算损失函数，衡量当前参数下的模型性能。&lt;/li&gt;
  &lt;li&gt;反向传播最常用到的是梯度下降法（这里不讨论其他方法），依托损失函数，将其中的参数当做变量来求偏导（计算梯度），沿着梯度下降的方向求解损失函数的极小值，此时的参数可替代此前的参数。这就是对模型优化训练的一个典型过程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引申问题 —— 梯度消失、梯度爆炸问题：因为对损失函数的求偏导，是从输出层向输入层反向基于「数学上的链式法则」计算的，数学上这是个连乘计算，层数越多越容易出现这个问题。这个求导过程可能会出现梯度为零的情况，即梯度消失。也有可能出现梯度值特别大的情况。&lt;/p&gt;

&lt;p&gt;解决梯度消失、梯度爆炸问题，又是一个重要议题，这里篇幅所限也难以展开做技术笔记。粗暴的方式比如梯度剪切，Hinton 提出的逐层预训练后再整体精调理论上也 work，本文后续提到的 LSTM、ResNet 等也可以解决问题，我们也还能了解到业界各种解决手段，有机会再与朋友们交流学习。&lt;/p&gt;

&lt;h4 id=&quot;28mlp-的一个显著问题帮我们引出-cnn-模型&quot;&gt;2.8、MLP 的一个显著问题，帮我们引出 CNN 模型&lt;/h4&gt;

&lt;p&gt;我们可以看到，在 MLP 中，不论有多少层，某一层的输出向量  \(h_n\)  中的每个值，都会在下一层计算输出向量  \(h_{n+1}\)  的每个值时用到。具体来说，如果对于某一层的输出值如下：&lt;/p&gt;

\[h_{n+1} = Softmax(W_{n+1} \cdot h_n + b_{n+1})\]

&lt;p&gt;上一段话里所谓的「用到」，其实就是要针对  \(h_n\)  生成相应的特征值  \(W_{n+1}\)  权重矩阵中的每个行列里的数值和  \(b_{n+1}\) 偏差向量 里的每个值。如果用图画出来，就是：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-1b1299448dc08c90d29bebf8b1f045c1&quot; width=&quot;428pt&quot; height=&quot;116pt&quot; viewBox=&quot;0.00 0.00 427.64 116.00&quot;&gt;
&lt;title&gt;graphviz-1b1299448dc08c90d29bebf8b1f045c1&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=TB
	a[label=&amp;quot;...&amp;quot;]
	b[label=&amp;quot;...&amp;quot;]
	h_2_1[label=&amp;quot;h_n+1_1&amp;quot;]
	h_2_2[label=&amp;quot;h_n+1_2&amp;quot;]
	h_2_m[label=&amp;quot;h_n+1_m&amp;quot;]

	{rank=same h_n_1 h_n_2 b h_n_m}
	{rank=same h_2_1 h_2_2 a h_2_m}

	h_n_1 -&amp;gt; h_2_1
	h_n_1 -&amp;gt; h_2_2
	h_n_1 -&amp;gt; a
	h_n_1 -&amp;gt; h_2_m

	h_n_1 -&amp;gt; h_2_1
	h_n_2 -&amp;gt; h_2_2
	h_n_2 -&amp;gt; a
	h_n_2 -&amp;gt; h_2_m

	b -&amp;gt; h_2_1
	b -&amp;gt; h_2_2
	b -&amp;gt; a
	b -&amp;gt; h_2_m

	h_n_m -&amp;gt; h_2_1
	h_n_m -&amp;gt; h_2_2
	h_n_m -&amp;gt; a
	h_n_m -&amp;gt; h_2_m
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 112)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-112 423.64,-112 423.64,4 -4,4&quot; /&gt;
&lt;!-- a --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;a&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;146.7&quot; cy=&quot;-18&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;146.7&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- b --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;b&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;151.7&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;151.7&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- b&amp;#45;&amp;gt;a --&gt;
&lt;g id=&quot;edge11&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;b&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M150.46,-71.7C149.91,-63.98 149.25,-54.71 148.63,-46.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;152.12,-45.83 147.92,-36.1 145.14,-46.33 152.12,-45.83&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_2_1 --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h_2_1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;50.7&quot; cy=&quot;-18&quot; rx=&quot;50.89&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;50.7&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h_n+1_1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- b&amp;#45;&amp;gt;h_2_1 --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;b&amp;#45;&amp;gt;h_2_1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M133.64,-76.49C119.14,-66.44 98.46,-52.11 81.38,-40.27&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;83.04,-37.16 72.83,-34.34 79.05,-42.91 83.04,-37.16&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_2_2 --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h_2_2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;242.7&quot; cy=&quot;-18&quot; rx=&quot;50.89&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;242.7&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h_n+1_2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- b&amp;#45;&amp;gt;h_2_2 --&gt;
&lt;g id=&quot;edge10&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;b&amp;#45;&amp;gt;h_2_2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M168.81,-75.83C181.67,-65.94 199.56,-52.18 214.52,-40.67&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;216.69,-43.42 222.48,-34.55 212.42,-37.87 216.69,-43.42&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_2_m --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h_2_m&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;365.7&quot; cy=&quot;-18&quot; rx=&quot;53.89&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;365.7&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h_n+1_m&lt;/text&gt;
&lt;/g&gt;
&lt;!-- b&amp;#45;&amp;gt;h_2_m --&gt;
&lt;g id=&quot;edge12&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;b&amp;#45;&amp;gt;h_2_m&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M172.78,-78.39C177.62,-76.14 182.79,-73.88 187.7,-72 211.14,-63.03 271.93,-45.36 315.95,-32.9&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;316.96,-36.25 325.63,-30.16 315.05,-29.51 316.96,-36.25&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_1 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h_n_1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;69.7&quot; cy=&quot;-90&quot; rx=&quot;37.09&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;69.7&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h_n_1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h_n_1&amp;#45;&amp;gt;a --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_1&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M86.4,-73.81C97.36,-63.85 111.83,-50.7 123.85,-39.77&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;126.28,-42.29 131.33,-32.97 121.57,-37.11 126.28,-42.29&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_1&amp;#45;&amp;gt;h_2_1 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_1&amp;#45;&amp;gt;h_2_1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M59.35,-72.41C56.39,-64.62 53.56,-55.14 51.51,-46.33&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;54.92,-45.55 49.5,-36.45 48.06,-46.94 54.92,-45.55&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_1&amp;#45;&amp;gt;h_2_1 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_1&amp;#45;&amp;gt;h_2_1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M70.91,-71.7C69.57,-63.7 67.15,-54.02 64.35,-45.15&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;67.63,-43.93 61.05,-35.62 61.01,-46.22 67.63,-43.93&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_1&amp;#45;&amp;gt;h_2_2 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_1&amp;#45;&amp;gt;h_2_2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M97.49,-77.75C125.45,-66.44 168.9,-48.86 200.99,-35.87&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;202.6,-39 210.56,-32 199.97,-32.51 202.6,-39&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_1&amp;#45;&amp;gt;h_2_m --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_1&amp;#45;&amp;gt;h_2_m&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M97.68,-77.83C103.57,-75.71 109.79,-73.65 115.7,-72 197.22,-49.25 220.23,-55.04 302.7,-36 307.03,-35 311.53,-33.9 316.02,-32.77&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;317.01,-36.13 325.81,-30.24 315.26,-29.35 317.01,-36.13&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_2 --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h_n_2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;331.7&quot; cy=&quot;-90&quot; rx=&quot;37.09&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;331.7&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h_n_2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h_n_2&amp;#45;&amp;gt;a --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_2&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M303.01,-78.31C297.28,-76.2 291.3,-74.02 285.7,-72 240.06,-55.59 227.57,-54.38 182.7,-36 180.87,-35.25 179.01,-34.46 177.14,-33.65&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;178.4,-30.38 167.85,-29.44 175.52,-36.75 178.4,-30.38&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_2&amp;#45;&amp;gt;h_2_2 --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_2&amp;#45;&amp;gt;h_2_2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M312.82,-74.15C300.65,-64.58 284.6,-51.96 270.93,-41.21&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;272.8,-38.23 262.78,-34.8 268.48,-43.73 272.8,-38.23&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_2&amp;#45;&amp;gt;h_2_m --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_2&amp;#45;&amp;gt;h_2_m&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M339.75,-72.41C343.72,-64.25 348.59,-54.22 353.04,-45.07&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;356.24,-46.48 357.46,-35.96 349.94,-43.42 356.24,-46.48&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_m --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h_n_m&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;236.7&quot; cy=&quot;-90&quot; rx=&quot;40.09&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;236.7&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h_n_m&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h_n_m&amp;#45;&amp;gt;a --&gt;
&lt;g id=&quot;edge15&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_m&amp;#45;&amp;gt;a&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M217.17,-73.81C203.86,-63.46 186.11,-49.66 171.76,-38.49&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;173.8,-35.65 163.76,-32.27 169.5,-41.17 173.8,-35.65&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_m&amp;#45;&amp;gt;h_2_1 --&gt;
&lt;g id=&quot;edge13&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_m&amp;#45;&amp;gt;h_2_1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M206.81,-77.75C176.21,-66.24 128.35,-48.22 93.68,-35.18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;94.87,-31.89 84.28,-31.64 92.41,-38.44 94.87,-31.89&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_m&amp;#45;&amp;gt;h_2_2 --&gt;
&lt;g id=&quot;edge14&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_m&amp;#45;&amp;gt;h_2_2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M238.18,-71.7C238.84,-63.98 239.63,-54.71 240.37,-46.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;243.86,-46.37 241.23,-36.1 236.89,-45.77 243.86,-46.37&quot; /&gt;
&lt;/g&gt;
&lt;!-- h_n_m&amp;#45;&amp;gt;h_2_m --&gt;
&lt;g id=&quot;edge16&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h_n_m&amp;#45;&amp;gt;h_2_m&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M261.26,-75.67C280.58,-65.19 307.78,-50.43 329.57,-38.6&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;331.42,-41.58 338.54,-33.73 328.08,-35.43 331.42,-41.58&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，输入的所有元素都被连接，即被分配权重 w 和偏差项 b，所以这被称为一个「全连接层（&lt;strong&gt;Fully Connected Layer&lt;/strong&gt;）」或者「&lt;strong&gt;稠密层（Dense Layer）&lt;/strong&gt;」。但是对于一些任务这样做是很蠢的，会付出大量无效的计算。&lt;/p&gt;

&lt;p&gt;因此我们需要 focus 在更少量计算成本的模型，于是有了卷积神经网络（CNN）。&lt;/p&gt;

&lt;h3 id=&quot;第-3-节--卷积神经网络cnn&quot;&gt;第 3 节 · 卷积神经网络（CNN）&lt;/h3&gt;

&lt;p&gt;MLP 里每一层的每个元素，都要乘以一个独立参数的权重 W，再加上一个偏执 b，这样的神经网络层常被我们叫做「全连接层（Fully Connected Layer）或稠密层（Dence Layer）。但是这样有个显著问题：如果输入内容的局部重要信息只是发生轻微移动并没有丢失，在全连接层处理后，整个输出结果都会发生很大变化 —— 这不合理。&lt;/p&gt;

&lt;p&gt;于是我们会想到，如果我们用一个小一些的全连接层，只对重要的局部输入进行处理呢？其实这个思路和 n-gram 是类似的，都是用一个窗口来扫描局部。卷积神经网络（Convolutional Neural Network，CNN）就是基于此诞生的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;卷积核：卷积核是一个小的稠密层，用于提取局部特征，又称其为卷积核（kernel）/ 滤波器（filter）/ 感受野（receptive field / field of view）。&lt;/li&gt;
  &lt;li&gt;池化层（Pooling，或称汇聚层）：经过卷积核处理的结果，进一步聚合的过程。对于输入大小不一样的样本，池化后将有相同个数的特征输出。&lt;/li&gt;
  &lt;li&gt;提取多个局部特征：一个卷积核只能提取单一类型的局部特征，需要提取多种局部特征则需要多个卷积核。有些文章里你看提到「多个模式」、「多个通道」，其实指的就是多个 kernel 识别多个特征。&lt;/li&gt;
  &lt;li&gt;全连接分类层：多个卷积核得到的多个特征，需经过一个全连接的分类层用于最终决策。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样做有几个特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地性（Locality）：输出结果只由一个特定窗口大小区域内的数据决定。&lt;/li&gt;
  &lt;li&gt;平移不变性（Translation Invariant）：对同一个特征，扫描不同区域时只用一个 kernel 来计算。&lt;/li&gt;
  &lt;li&gt;卷积层的参数规模，与输入输出数据大小无关。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CNN 主要的适用领域是计算机视觉。而在 NLP 中，文本数据的维度很高，并且语言的结构比图像更复杂。因此，CNN 一般不适用于处理 NLP 问题。&lt;/p&gt;

&lt;h3 id=&quot;第-4-节--循环神经网络rnn&quot;&gt;第 4 节 · 循环神经网络（RNN）&lt;/h3&gt;

&lt;p&gt;RNN（循环神经网络），这是一种强大的神经网络模型，能够预测序列数据，例如文本、语音和时间序列。我们将通过生动的代码示例和实际案例来演示如何使用 RNN，并在日常生活中真实地体验它的功能。您将学习到如何使用 RNN 解决各种机器学习问题，并动手尝试运用 RNN 解决实际问题。这篇文章将为您提供一个完整的 RNN 入门指南，并使您对 RNN 有更深入的了解。&lt;/p&gt;

&lt;p&gt;RNN（Recurrent Neural Network）的 R 是 Recurrent 的意思，所以这是一个贷循环的神经网络。首先要明白一点，你并不需要搞懂 CNN 后才能学习 RNN 模型。你只要了解了 MLP 就可以学习 RNN 了。&lt;/p&gt;

&lt;h4 id=&quot;41经典结构的-rnn&quot;&gt;4.1、经典结构的 RNN&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-19-language-model-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图这是一个经典结构的 RNN 示意图，Unfold 箭头右侧是展开示意。输入序列（这里用 x 表示）传递给隐藏层（hidden layer，这里用 h 表示），处理完生成输出序列（这里用 o 表示）。序列的下一个词输入时的、上一步隐藏层会一起影响这一步的输出。U、V、W 都表示权重。在这个经典结构理，你可以看到非常重要的一点，就是输入序列长度与输出序列长度是相同的。&lt;/p&gt;

&lt;p&gt;这种经典结构的应用场景，比如对一段普通话输入它的四川话版本，比如对视频的每一帧进行处理并输出，等等。&lt;/p&gt;

&lt;p&gt;我们知道 RNN 是一个一个序列处理的，每个序列中的数据项都是有序的，所以对于计算一个序列内的所有数据项是无法并行的。但是计算不同序列时，不同序列各自的计算则是可以并行的。如果我们把上一个时刻 t 隐藏层输出的结果（ \(h_{t-1}\) ）传给一个激活函数（比如说用正切函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tanh&lt;/code&gt; 函数），然后和当下时刻 t 的这个输入（ \(x_{t}\) ）一起，处理后产生一个时刻 t 的输出（ \(h_t\) ）。然后把隐藏层的输出通过多项逻辑回归（Softmax）生成最终的输出值（ \(\bm{y}\) ），我们可以如下表示这个模型：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{h}_t = tanh(\bm{W}^{xh} \cdot \bm{x}_t + \bm{b}^{xh} + \bm{W}^{hh} \cdot \bm{h}_{t-1} + \bm{b}^{hh}) \\
&amp;amp;\bm{y}_t = Softmax(\bm{W}^{hy} \cdot \bm{h_t} + \bm{b}^{hy})
\end{aligned}\]

&lt;p&gt;对应的示意图如下：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-34cd77ba92d6e898bab41a54b23f2324&quot; width=&quot;278pt&quot; height=&quot;188pt&quot; viewBox=&quot;0.00 0.00 278.00 188.00&quot;&gt;
&lt;title&gt;graphviz-34cd77ba92d6e898bab41a54b23f2324&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	{rank=same h1 h2 hddd hn}
	{rank=same x1 x2 xddd xn}
	{rank=same y1 y2 yddd yn}
	xddd[label=&amp;quot;...&amp;quot;]
	yddd[label=&amp;quot;...&amp;quot;]
	hddd[label=&amp;quot;...&amp;quot;]

	y1[shape=plaintext]
	y2[shape=plaintext]
	yddd[shape=plaintext]
	yn[shape=plaintext]
	x1[shape=plaintext]
	x2[shape=plaintext]
	xddd[shape=plaintext]
	xn[shape=plaintext]

	h1 -&amp;gt; h2
	h2 -&amp;gt; hddd
	hddd -&amp;gt; hn

	x1 -&amp;gt; h1
	x2 -&amp;gt; h2
	xddd -&amp;gt; hddd
	xn -&amp;gt; hn

	h1 -&amp;gt; y1
	h2 -&amp;gt; y2
	hddd -&amp;gt; yddd
	hn -&amp;gt; yn
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-184 274,-184 274,4 -4,4&quot; /&gt;
&lt;!-- h1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;27&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;99&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M54,-90C56.61,-90 59.23,-90 61.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;61.93,-93.5 71.93,-90 61.93,-86.5 61.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y1 --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;y1 --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;y1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-108.3C27,-116.02 27,-125.29 27,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-133.9 27,-143.9 30.5,-133.9 23.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- hddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;171&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M126,-90C128.61,-90 131.23,-90 133.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;133.93,-93.5 143.93,-90 133.93,-86.5 133.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y2 --&gt;
&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;y2 --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;y2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-108.3C99,-116.02 99,-125.29 99,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-133.9 99,-143.9 102.5,-133.9 95.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- hn --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hn&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;243&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;hn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M198,-90C200.61,-90 203.23,-90 205.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;205.93,-93.5 215.93,-90 205.93,-86.5 205.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yddd --&gt;
&lt;g id=&quot;node11&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;yddd --&gt;
&lt;g id=&quot;edge10&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;yddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-108.3C171,-116.02 171,-125.29 171,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-133.9 171,-143.9 174.5,-133.9 167.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- yn --&gt;
&lt;g id=&quot;node12&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;yn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hn&amp;#45;&amp;gt;yn --&gt;
&lt;g id=&quot;edge11&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hn&amp;#45;&amp;gt;yn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-108.3C243,-116.02 243,-125.29 243,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-133.9 243,-143.9 246.5,-133.9 239.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x1 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x1&amp;#45;&amp;gt;h1 --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x1&amp;#45;&amp;gt;h1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-36.3C27,-44.02 27,-53.29 27,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-61.9 27,-71.9 30.5,-61.9 23.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x2 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x2&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x2&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-36.3C99,-44.02 99,-53.29 99,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-61.9 99,-71.9 102.5,-61.9 95.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xddd --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xddd&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xddd&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-36.3C171,-44.02 171,-53.29 171,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-61.9 171,-71.9 174.5,-61.9 167.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xn --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;xn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xn&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xn&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-36.3C243,-44.02 243,-53.29 243,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-61.9 243,-71.9 246.5,-61.9 239.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;这种输入和输出数据项数一致的 RNN，一般叫做 N vs. N 的 RNN。如果我们用 PyTorch 来实现一个非常简单的经典 RNN 则如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch.nn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 创建一个 RNN 实例
# 第一个参数
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RNN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 实例化一个单向单层RNN
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 输入是一个形状为 (5, 3, 10) 的张量
# 5 个输入数据项（也可以说是样本）
# 3 个数据项是一个序列，有 3 个 steps
# 每个 step 有 10 个特征
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 隐藏层是一个 (1, 5, 20) 的张量
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 调用 rnn 函数后，返回输出、最终的隐藏状态
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来解读一下这段代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这段代码实例化了一个带有 1 个隐藏层的 RNN 网络。&lt;/li&gt;
  &lt;li&gt;它的输入是一个形状为 (5, 3, 10) 的张量，表示有 5 个样本，每个样本有 3 个时间步，每个时间步的特征维度是 10。&lt;/li&gt;
  &lt;li&gt;初始隐藏状态是一个形状为 (1, 5, 20) 的张量。&lt;/li&gt;
  &lt;li&gt;调用 rnn 函数后，会返回输出和最终的隐藏状态。&lt;/li&gt;
  &lt;li&gt;输出的形状是 (5, 3, 20)，表示有 5 个样本，每个样本有 3 个时间步，每个时间步的输出维度是 20。&lt;/li&gt;
  &lt;li&gt;最终的隐藏状态的形状是 (1, 5, 20)，表示最后的隐藏状态是 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是上面的代码示例，并没有自己编写一个具体的 RNN，而是用了默认的 PyTorch 的 RNN，那么下面我们就自己编写一个：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MikeCaptainRNN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 对于 RNN，输入维度就是序列数
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 隐藏层有多少个节点/神经元，经常将 hidden_size 设置为与序列长度相同
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 输入层到隐藏层的 W^{xh} 权重、bias^{xh} 偏置项
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight_xh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bias_xh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 隐藏层到隐藏层的 W^{hh} 权重、bias^{hh} 偏置项
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight_hh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bias_hh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 前向传播
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# 取出这个张量的形状
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 初始化一个全零张量
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 处理每个时刻的输入特征
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        	&lt;span class=&quot;c1&quot;&gt;# 获得当前时刻的输入特征，[N, input_size, 1]。unsqueeze(n)，在第 n 维上增加一维
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsqueeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;w_xh_batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight_xh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsqueeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [N, hidden_size, input_size]
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;w_hh_batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight_hh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsqueeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [N, hidden_size, hidden_size]
&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# bmm 是矩阵乘法函数
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;w_times_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_xh_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squeeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [N, hidden_size]。squeeze(n)，在第n维上减小一维
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;w_times_h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_hh_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsqueeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squeeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [N, hidden_size]
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_times_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bias_ih&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w_times_h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bias_hh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsqueeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weight_xh&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bias_xh&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weighthh&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;42n-vs1-的-rnn&quot;&gt;4.2、N vs.1 的 RNN&lt;/h4&gt;

&lt;p&gt;上面那个图里，如果只保留最后一个输出，那就是一个 N vs. 1 的 RNN 了。这种的应用场景，比如说判断一个文本序列是英语还是德语，比如根据一个输入序列来判断是一个正向情绪内容还是负向或者中性，或者比如根据一段语音输入序列来判断是哪一首曲子（听歌识曲）。&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{h}_t = tanh(\bm{W^{xh}} \cdot \bm{x}_t + \bm{b^{xh}} + \bm{W^{hh}} \cdot \bm{h}_{t-1} + \bm{b^{hh}}) \\
&amp;amp;\bm{y} = Softmax(\bm{W^{hy}} \cdot \bm{h}_n + \bm{b^{hy}})
\end{aligned}\]

&lt;p&gt;即这个模型里，每个序列只有隐藏层对最后一个数据项进行处理时才产生输出  \(h_n\)  如果用示意图表示，则是如下结构：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-99506286249ff03a109fde8e4294e12c&quot; width=&quot;278pt&quot; height=&quot;188pt&quot; viewBox=&quot;0.00 0.00 278.00 188.00&quot;&gt;
&lt;title&gt;graphviz-99506286249ff03a109fde8e4294e12c&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	{rank=same h1 h2 hddd hn}
	hddd[label=&amp;quot;...&amp;quot;]
	xddd[label=&amp;quot;...&amp;quot;]

	y[shape=plaintext]
	x1[shape=plaintext]
	x2[shape=plaintext]
	xddd[shape=plaintext]
	xn[shape=plaintext]

	h1 -&amp;gt; h2
	h2 -&amp;gt; hddd
	hddd -&amp;gt; hn

	x1 -&amp;gt; h1
	x2 -&amp;gt; h2
	xn -&amp;gt; hn
	xddd -&amp;gt; hddd

	hn -&amp;gt; y
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-184 274,-184 274,4 -4,4&quot; /&gt;
&lt;!-- h1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;27&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;99&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M54,-90C56.61,-90 59.23,-90 61.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;61.93,-93.5 71.93,-90 61.93,-86.5 61.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- hddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;171&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M126,-90C128.61,-90 131.23,-90 133.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;133.93,-93.5 143.93,-90 133.93,-86.5 133.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- hn --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hn&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;243&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;hn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M198,-90C200.61,-90 203.23,-90 205.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;205.93,-93.5 215.93,-90 205.93,-86.5 205.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hn&amp;#45;&amp;gt;y --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hn&amp;#45;&amp;gt;y&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-108.3C243,-116.02 243,-125.29 243,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-133.9 243,-143.9 246.5,-133.9 239.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xddd --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xddd&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xddd&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-36.3C171,-44.02 171,-53.29 171,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-61.9 171,-71.9 174.5,-61.9 167.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x1 --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x1&amp;#45;&amp;gt;h1 --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x1&amp;#45;&amp;gt;h1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-36.3C27,-44.02 27,-53.29 27,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-61.9 27,-71.9 30.5,-61.9 23.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x2 --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x2&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x2&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-36.3C99,-44.02 99,-53.29 99,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-61.9 99,-71.9 102.5,-61.9 95.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xn --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;xn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xn&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xn&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-36.3C243,-44.02 243,-53.29 243,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-61.9 243,-71.9 246.5,-61.9 239.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;431-vs-n-的-rnn&quot;&gt;4.3、1 vs. N 的 RNN&lt;/h4&gt;

&lt;p&gt;反过来，上面那个图里，如果只保留一个 x，那么就是一个 1 vs. N 的 RNN 了。这种场景的应用，比如 AI 创作音乐，还有通过一个 image 提炼或识别某些文本内容输出。&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{h}_t = \begin{cases} tanh(\bm{W^{xh}} \cdot \bm{x} + \bm{b^{xh}} + 0 + \bm{b^{hh}}) &amp;amp; (t=1) \\
tanh(0 + \bm{b^{xh}} + \bm{W^{hh}} \cdot \bm{h}_{t-1} + \bm{b^{hh}}) &amp;amp; (t&amp;gt;1) \end{cases} \\
&amp;amp;\bm{y}_t = Softmax(\bm{W^{hy}} \cdot \bm{h}_t + \bm{b^{hy}})
\end{aligned}\]

&lt;p&gt;示意图如下：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-aecb5ea5cd91fc1106b18c3c4059fa0a&quot; width=&quot;278pt&quot; height=&quot;188pt&quot; viewBox=&quot;0.00 0.00 278.00 188.00&quot;&gt;
&lt;title&gt;graphviz-aecb5ea5cd91fc1106b18c3c4059fa0a&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	{rank=same h1 h2 hddd hn}
	{rank=same y1 y2 yddd yn}
	hddd[label=&amp;quot;...&amp;quot;]
	yddd[label=&amp;quot;...&amp;quot;]

	y1[shape=plaintext]
	y2[shape=plaintext]
	yddd[shape=plaintext]
	yn[shape=plaintext]
	x[shape=plaintext]

	h1 -&amp;gt; h2
	h2 -&amp;gt; hddd
	hddd -&amp;gt; hn

	x -&amp;gt; h1

	h1 -&amp;gt; y1
	h2 -&amp;gt; y2
	hddd -&amp;gt; yddd
	hn -&amp;gt; yn
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-184 274,-184 274,4 -4,4&quot; /&gt;
&lt;!-- h1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;27&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;99&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M54,-90C56.61,-90 59.23,-90 61.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;61.93,-93.5 71.93,-90 61.93,-86.5 61.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y1 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;y1 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;y1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-108.3C27,-116.02 27,-125.29 27,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-133.9 27,-143.9 30.5,-133.9 23.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- hddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;171&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M126,-90C128.61,-90 131.23,-90 133.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;133.93,-93.5 143.93,-90 133.93,-86.5 133.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y2 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;y2 --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;y2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-108.3C99,-116.02 99,-125.29 99,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-133.9 99,-143.9 102.5,-133.9 95.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- hn --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hn&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;243&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;hn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M198,-90C200.61,-90 203.23,-90 205.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;205.93,-93.5 215.93,-90 205.93,-86.5 205.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yddd --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;yddd --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;yddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-108.3C171,-116.02 171,-125.29 171,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-133.9 171,-143.9 174.5,-133.9 167.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- yn --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;yn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hn&amp;#45;&amp;gt;yn --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hn&amp;#45;&amp;gt;yn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-108.3C243,-116.02 243,-125.29 243,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-133.9 243,-143.9 246.5,-133.9 239.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x&amp;#45;&amp;gt;h1 --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x&amp;#45;&amp;gt;h1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-36.3C27,-44.02 27,-53.29 27,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-61.9 27,-71.9 30.5,-61.9 23.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;到这里我们可以看到，在 RNN 的隐藏层是能够存储一些有关于输入数据的一些相关内容的，所以也常把 RNN 的隐藏层叫做记忆单元。&lt;/p&gt;

&lt;h4 id=&quot;44lstmlong-short-term-memory长短时记忆网络&quot;&gt;4.4、LSTM（Long Short-Term Memory）长短时记忆网络&lt;/h4&gt;

&lt;h5 id=&quot;441如何理解这个-short-term-呢&quot;&gt;4.4.1、如何理解这个 Short-Term 呢？&lt;/h5&gt;

&lt;p&gt;1997 年论文《Long Short-Term Memory》中提出 LSTM 模型。我们先从模型的定义，精确地来理解一下：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{h}_t = \bm{h}_{t-1} + tanh(\bm{W}^{xh} \cdot \bm{x}_t + \bm{b}^{xh} + \bm{W}^{hh} \cdot \bm{h}_{t-1} + \bm{b}^{hh}) \\
&amp;amp;\bm{y}_t = Softmax(\bm{W}^{hy} \cdot \bm{h_t} + \bm{b}^{hy})
\end{aligned}\]

&lt;p&gt;上式中与经典结构的 RNN（输入与输出是 N vs. N）相比，唯一的区别是第一个式子中多了一个「 \(\bm{h}_{t-1}\) 」。如果我们把第一个式子的  \(tanh\)  部分记作  \(u_t\) ：&lt;/p&gt;

\[\bm{u}_t = tanh(\bm{W}^{xh} \cdot \bm{x}_t + \bm{b}^{xh} + \bm{W}^{hh} \cdot \bm{h}_{t-1} + \bm{b}^{hh})\]

&lt;p&gt;所以：&lt;/p&gt;

\[\bm{h}_t = \bm{h}_{t-1} + \bm{u}_t\]

&lt;p&gt;那么可以展开出如下一组式子：&lt;/p&gt;

\[\begin{aligned}
\bm{h}_{k+1} &amp;amp;= \bm{h}_k + \bm{u}_{k+1} \\
\bm{h}_{k+2} &amp;amp;= \bm{h}_{k+1} + \bm{u}_{k+2} \\
&amp;amp;...... \\
\bm{h}_{t-1} &amp;amp;= \bm{h}_{t-2} + \bm{u}_{t-1} \\
\bm{h}_t &amp;amp;= \bm{h}_{t-1} + \bm{u}_t
\end{aligned}\]

&lt;p&gt;如果我们从  \(h_{k+1}\)  到  \(h_n\)  的所有式子左侧相加、右侧相加，我们就得到如下式子：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{h}_{k+1} + ... + \bm{h}_{t-1} + \bm{h}_t \\
= &amp;amp;\bm{h}_k + \bm{h}_{k+1} + ... + \bm{h}_{t-2} + \bm{h}_{t-1} \\+ &amp;amp;\bm{u}_{k+1} + \bm{u}_{k+2} + ... + \bm{u}_{t-1} + \bm{u}_t
\end{aligned}\]

&lt;p&gt;进而推导出：&lt;/p&gt;

\[\bm{h}_t = \bm{h}_k + \bm{u}_{k+1} + \bm{u}_{k+2} + ... + \bm{u}_{t-1} + \bm{u}_t\]

&lt;p&gt;从这里我们就可以看到，第 t 时刻的隐藏层输出，直接关联到第 k 时刻的输出，t 到 k 时刻的相关性则用  \(\bm{u}_{k+1}\)  到  \(\bm{u}_t\)  相加表示。也就是有 t-k 的短期（Short Term）记忆。&lt;/p&gt;

&lt;h5 id=&quot;442引入遗忘门-f输入门-i输出门-o记忆细胞-c&quot;&gt;4.4.2、引入遗忘门 f、输入门 i、输出门 o、记忆细胞 c&lt;/h5&gt;

&lt;p&gt;如果我们为式子  \(\bm{h}_t = \bm{h}_{t-1} + \bm{u}_t\)  右侧两项分配一个权重呢？就是隐藏层对上一个数据项本身被上一个数据项经过隐藏层计算的结果，这两者做一对权重考虑配比，如下：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{f}_t = sigmoid(\bm{W}^{f,xh} \cdot \bm{x}_t + \bm{b}^{f,xh} + \bm{W}^{f,hh} \cdot \bm{x}_{t-1} + \bm{b}^{f,hh}) \\
&amp;amp;\bm{h}_t = \bm{f}_t \odot \bm{h}_{t-1} + (1 - \bm{f}_t) \odot \bm{u}_t
\end{aligned}\]

&lt;p&gt;其中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(\odot\)  是 Hardamard 乘积，即张量的对应元素相乘。&lt;/li&gt;
  &lt;li&gt;\(\bm{f}_t\)  是「遗忘门（Forget Gate）」，该值很小时 t-1 时刻的权重就很小，也就是「此刻遗忘上一刻」。该值应根据 t 时刻的输入数据、t-1 时刻数据在隐藏层的输出计算，而且其每个元素必须是 (0, 1) 之间的值，所以可以用 sigmoid 函数来得到该值：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但这种方式，对于过去  \(\bm{h}_{t-1}\)  和当下  \(\bm{u}_t\)  形成了互斥，只能此消彼长。但其实过去和当下可能都很重要，有可能都恨不重要，所以我们对过去继续采用  \(\bm{f}_t\)  遗忘门，对当下采用  \(\bm{i}_t\)  输入门（Input Gate）：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{f}_t = sigmoid(\bm{W}^{f,xh} \cdot \bm{x}_t + \bm{b}^{f,xh} + \bm{W}^{f,hh} \cdot \bm{x}_{t-1} + \bm{b}^{f,hh}) \\
&amp;amp;\bm{i}_t = sigmoid(\bm{W}^{i,xh} \cdot \bm{x}_t + \bm{b}^{i,xh} + \bm{W}^{i,hh} \cdot \bm{h}_{t-1} + \bm{b}^{i,hh}) \\
&amp;amp;\bm{h}_t = \bm{f}_t \odot \bm{h}_{t-1} + \bm{i}_t \odot \bm{u}_t
\end{aligned}\]

&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;与  \(\bm{f}_t\)  类似地，定义输入门  \(\bm{i}_t\)  ，但是注意  \(\bm{f}_t\)  与  \(\bm{h}_{t-1}\)  而非  \(\bm{x}_{t-1}\)  有关。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再引入一个输出门：&lt;/p&gt;

\[\bm{o}_t = sigmoid(\bm{W}^{o,xh} \cdot \bm{x}_t + \bm{b}^{o,xh} + \bm{W}^{o,hh} \cdot \bm{x}_{t-1} + \bm{b}^{o,hh})\]

&lt;p&gt;再引入记忆细胞  \(\bm{c}_t\) ，它是原来  \(\bm{h}_t\)  的变体，与 t-1 时刻的记忆细胞有遗忘关系（通过遗忘门），与当下时刻有输入门的关系：&lt;/p&gt;

\[\bm{c}_t = \bm{f}_t \odot \bm{c}_{t-1} + \bm{i}_t \odot \bm{u}_t\]

&lt;p&gt;那么此时  \(\bm{h}_t\)  ，我们可以把  \(\bm{h}_t\)  变成：&lt;/p&gt;

\[\bm{h}_t = \bm{o}_t \odot tanh(\bm{c}_t)\]

&lt;p&gt;记忆细胞这个概念还有有一点点形象的，它存储了过去的一些信息。OK，到此我们整体的 LSTM 模型就变成了这个样子：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{f}_t = sigmoid(\bm{W}^{f,xh} \cdot \bm{x}_t + \bm{b}^{f,xh} + \bm{W}^{f,hh} \cdot \bm{x}_{t-1} + \bm{b}^{f,hh}) \\
&amp;amp;\bm{i}_t = sigmoid(\bm{W}^{i,xh} \cdot \bm{x}_t + \bm{b}^{i,xh} + \bm{W}^{i,hh} \cdot \bm{h}_{t-1} + \bm{b}^{i,hh}) \\
&amp;amp;\bm{o}_t = sigmoid(\bm{W}^{o,xh} \cdot \bm{x}_t + \bm{b}^{o,xh} + \bm{W}^{o,hh} \cdot \bm{x}_{t-1} + \bm{b}^{o,hh}) \\
&amp;amp;\bm{u}_t = tanh(\bm{W}^{xh} \cdot \bm{x}_t + \bm{b}^{xh} + \bm{W}^{hh} \cdot \bm{h}_{t-1} + \bm{b}^{hh}) \\
&amp;amp;\bm{c}_t = \bm{f}_t \odot \bm{c}_{t-1} + \bm{i}_t \odot \bm{u}_t \\
&amp;amp;\bm{h}_t = \bm{o}_t \odot tanh(\bm{c}_t) \\
&amp;amp;\bm{y}_t = Softmax(\bm{W}^{hy} \cdot \bm{h_t} + \bm{b}^{hy})
\end{aligned}\]

&lt;h4 id=&quot;45双向循环神经网络双向-lstm&quot;&gt;4.5、双向循环神经网络、双向 LSTM&lt;/h4&gt;

&lt;p&gt;双向循环神经网络很好理解，就是两个方向都有，例如下图：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-5d130f67fc1bf07abc38d62da6ddb01a&quot; width=&quot;278pt&quot; height=&quot;188pt&quot; viewBox=&quot;0.00 0.00 278.00 188.00&quot;&gt;
&lt;title&gt;graphviz-5d130f67fc1bf07abc38d62da6ddb01a&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	{rank=same h1 h2 hddd hn}

	hddd[label=&amp;quot;...&amp;quot;]
	xddd[label=&amp;quot;...&amp;quot;]
	yddd[label=&amp;quot;...&amp;quot;]

	y1[shape=plaintext]
	y2[shape=plaintext]
	yddd[shape=plaintext]
	yn[shape=plaintext]
	x1[shape=plaintext]
	x2[shape=plaintext]
	xddd[shape=plaintext]
	xn[shape=plaintext]

	h1 -&amp;gt; y1
	h2 -&amp;gt; y2
	hddd -&amp;gt; yddd
	hn -&amp;gt; yn

	h1 -&amp;gt; h2
	h2 -&amp;gt; hddd
	hddd -&amp;gt; hn

	hn -&amp;gt; hddd
	hddd -&amp;gt; h2
	h2 -&amp;gt; h1

	x1 -&amp;gt; h1
	x2 -&amp;gt; h2
	xddd -&amp;gt; hddd
	xn -&amp;gt; hn
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-184 274,-184 274,4 -4,4&quot; /&gt;
&lt;!-- h1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;27&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;99&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M48.38,-101.27C54.78,-103.22 61.18,-103.89 67.58,-103.28&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;68.52,-106.66 77.64,-101.27 67.15,-99.8 68.52,-106.66&quot; /&gt;
&lt;/g&gt;
&lt;!-- y1 --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1&amp;#45;&amp;gt;y1 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1&amp;#45;&amp;gt;y1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-108.3C27,-116.02 27,-125.29 27,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-133.9 27,-143.9 30.5,-133.9 23.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;h1 --&gt;
&lt;g id=&quot;edge10&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;h1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M77.64,-78.73C71.24,-76.78 64.84,-76.11 58.44,-76.72&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;57.49,-73.34 48.38,-78.73 58.87,-80.2 57.49,-73.34&quot; /&gt;
&lt;/g&gt;
&lt;!-- hddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;171&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M120.38,-101.27C126.78,-103.22 133.18,-103.89 139.58,-103.28&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;140.52,-106.66 149.64,-101.27 139.15,-99.8 140.52,-106.66&quot; /&gt;
&lt;/g&gt;
&lt;!-- y2 --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2&amp;#45;&amp;gt;y2 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2&amp;#45;&amp;gt;y2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-108.3C99,-116.02 99,-125.29 99,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-133.9 99,-143.9 102.5,-133.9 95.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M149.64,-78.73C143.24,-76.78 136.84,-76.11 130.44,-76.72&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;129.49,-73.34 120.38,-78.73 130.87,-80.2 129.49,-73.34&quot; /&gt;
&lt;/g&gt;
&lt;!-- hn --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;hn&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;243&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;hn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M192.38,-101.27C198.78,-103.22 205.18,-103.89 211.58,-103.28&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;212.52,-106.66 221.64,-101.27 211.15,-99.8 212.52,-106.66&quot; /&gt;
&lt;/g&gt;
&lt;!-- yddd --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hddd&amp;#45;&amp;gt;yddd --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hddd&amp;#45;&amp;gt;yddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-108.3C171,-116.02 171,-125.29 171,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-133.9 171,-143.9 174.5,-133.9 167.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- hn&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hn&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M221.64,-78.73C215.24,-76.78 208.84,-76.11 202.44,-76.72&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;201.49,-73.34 192.38,-78.73 202.87,-80.2 201.49,-73.34&quot; /&gt;
&lt;/g&gt;
&lt;!-- yn --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;yn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- hn&amp;#45;&amp;gt;yn --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;hn&amp;#45;&amp;gt;yn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-108.3C243,-116.02 243,-125.29 243,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-133.9 243,-143.9 246.5,-133.9 239.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xddd --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xddd&amp;#45;&amp;gt;hddd --&gt;
&lt;g id=&quot;edge13&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xddd&amp;#45;&amp;gt;hddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-36.3C171,-44.02 171,-53.29 171,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-61.9 171,-71.9 174.5,-61.9 167.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x1 --&gt;
&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x1&amp;#45;&amp;gt;h1 --&gt;
&lt;g id=&quot;edge11&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x1&amp;#45;&amp;gt;h1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-36.3C27,-44.02 27,-53.29 27,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-61.9 27,-71.9 30.5,-61.9 23.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x2 --&gt;
&lt;g id=&quot;node11&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x2&amp;#45;&amp;gt;h2 --&gt;
&lt;g id=&quot;edge12&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x2&amp;#45;&amp;gt;h2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-36.3C99,-44.02 99,-53.29 99,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-61.9 99,-71.9 102.5,-61.9 95.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xn --&gt;
&lt;g id=&quot;node12&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;xn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xn&amp;#45;&amp;gt;hn --&gt;
&lt;g id=&quot;edge14&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xn&amp;#45;&amp;gt;hn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-36.3C243,-44.02 243,-53.29 243,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-61.9 243,-71.9 246.5,-61.9 239.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在 PyTorch 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.RNN&lt;/code&gt; 就有参数表示双向：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bidirectional&lt;/code&gt; – If True, becomes a bidirectional RNN. Default: False&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bidirectional&lt;/code&gt;：默认设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;。若为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;，即为双向 RNN。&lt;/p&gt;

&lt;h4 id=&quot;46堆叠循环神经网络stacked-rnn堆叠长短时记忆网络stacked-lstm&quot;&gt;4.6、堆叠循环神经网络（Stacked RNN）、堆叠长短时记忆网络（Stacked LSTM）&lt;/h4&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-79478ee70f94925103b38a21c70c2539&quot; width=&quot;288pt&quot; height=&quot;260pt&quot; viewBox=&quot;0.00 0.00 288.19 260.00&quot;&gt;
&lt;title&gt;graphviz-79478ee70f94925103b38a21c70c2539&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	{rank=same h11 h12 h1ddd h1n}
	{rank=same h21 h22 h2ddd h2n}

	h1ddd[label=&amp;quot;...&amp;quot;]
	h2ddd[label=&amp;quot;...&amp;quot;]
	xddd[label=&amp;quot;...&amp;quot;]
	yddd[label=&amp;quot;...&amp;quot;]

	y1[shape=plaintext]
	y2[shape=plaintext]
	yddd[shape=plaintext]
	yn[shape=plaintext]
	x1[shape=plaintext]
	x2[shape=plaintext]
	xddd[shape=plaintext]
	xn[shape=plaintext]

	h11 -&amp;gt; y1
	h12 -&amp;gt; y2
	h1ddd -&amp;gt; yddd
	h1n -&amp;gt; yn

	h11 -&amp;gt; h12
	h12 -&amp;gt; h1ddd
	h1ddd -&amp;gt; h1n

	h21 -&amp;gt; h22
	h22 -&amp;gt; h2ddd
	h2ddd -&amp;gt; h2n

	h21 -&amp;gt; h11
	h22 -&amp;gt; h12
	h2ddd -&amp;gt; h1ddd
	h2n -&amp;gt; h1n

	x1 -&amp;gt; h21
	x2 -&amp;gt; h22
	xddd -&amp;gt; h2ddd
	xn -&amp;gt; h2n
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 256)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-256 284.19,-256 284.19,4 -4,4&quot; /&gt;
&lt;!-- h11 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h11&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;28.6&quot; cy=&quot;-162&quot; rx=&quot;28.7&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;28.6&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h11&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h12 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h12&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;103.6&quot; cy=&quot;-162&quot; rx=&quot;28.7&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;103.6&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h12&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h11&amp;#45;&amp;gt;h12 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h11&amp;#45;&amp;gt;h12&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M57.31,-162C59.75,-162 62.19,-162 64.63,-162&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;64.67,-165.5 74.67,-162 64.67,-158.5 64.67,-165.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y1 --&gt;
&lt;g id=&quot;node11&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;28.6&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h11&amp;#45;&amp;gt;y1 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h11&amp;#45;&amp;gt;y1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M28.6,-180.3C28.6,-188.02 28.6,-197.29 28.6,-205.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;25.1,-205.9 28.6,-215.9 32.1,-205.9 25.1,-205.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h1ddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h1ddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;177.6&quot; cy=&quot;-162&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;177.6&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h12&amp;#45;&amp;gt;h1ddd --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h12&amp;#45;&amp;gt;h1ddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M132.21,-162C134.85,-162 137.49,-162 140.13,-162&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;140.3,-165.5 150.3,-162 140.3,-158.5 140.3,-165.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y2 --&gt;
&lt;g id=&quot;node12&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;103.6&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h12&amp;#45;&amp;gt;y2 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h12&amp;#45;&amp;gt;y2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M103.6,-180.3C103.6,-188.02 103.6,-197.29 103.6,-205.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;100.1,-205.9 103.6,-215.9 107.1,-205.9 100.1,-205.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h1n --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h1n&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;251.6&quot; cy=&quot;-162&quot; rx=&quot;28.7&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;251.6&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h1n&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1ddd&amp;#45;&amp;gt;h1n --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1ddd&amp;#45;&amp;gt;h1n&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M204.77,-162C207.38,-162 210,-162 212.61,-162&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;212.7,-165.5 222.7,-162 212.7,-158.5 212.7,-165.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yddd --&gt;
&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;177.6&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1ddd&amp;#45;&amp;gt;yddd --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1ddd&amp;#45;&amp;gt;yddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M177.6,-180.3C177.6,-188.02 177.6,-197.29 177.6,-205.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;174.1,-205.9 177.6,-215.9 181.1,-205.9 174.1,-205.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- yn --&gt;
&lt;g id=&quot;node13&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;251.6&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;yn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h1n&amp;#45;&amp;gt;yn --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h1n&amp;#45;&amp;gt;yn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M251.6,-180.3C251.6,-188.02 251.6,-197.29 251.6,-205.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;248.1,-205.9 251.6,-215.9 255.1,-205.9 248.1,-205.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h21 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h21&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;28.6&quot; cy=&quot;-90&quot; rx=&quot;28.7&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;28.6&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h21&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h21&amp;#45;&amp;gt;h11 --&gt;
&lt;g id=&quot;edge11&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h21&amp;#45;&amp;gt;h11&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M28.6,-108.3C28.6,-116.02 28.6,-125.29 28.6,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;25.1,-133.9 28.6,-143.9 32.1,-133.9 25.1,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h22 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h22&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;103.6&quot; cy=&quot;-90&quot; rx=&quot;28.7&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;103.6&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h22&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h21&amp;#45;&amp;gt;h22 --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h21&amp;#45;&amp;gt;h22&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M57.31,-90C59.75,-90 62.19,-90 64.63,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;64.67,-93.5 74.67,-90 64.67,-86.5 64.67,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- h22&amp;#45;&amp;gt;h12 --&gt;
&lt;g id=&quot;edge12&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h22&amp;#45;&amp;gt;h12&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M103.6,-108.3C103.6,-116.02 103.6,-125.29 103.6,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;100.1,-133.9 103.6,-143.9 107.1,-133.9 100.1,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h2ddd --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h2ddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;177.6&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;177.6&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h22&amp;#45;&amp;gt;h2ddd --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h22&amp;#45;&amp;gt;h2ddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M132.21,-90C134.85,-90 137.49,-90 140.13,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;140.3,-93.5 150.3,-90 140.3,-86.5 140.3,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- h2ddd&amp;#45;&amp;gt;h1ddd --&gt;
&lt;g id=&quot;edge13&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2ddd&amp;#45;&amp;gt;h1ddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M177.6,-108.3C177.6,-116.02 177.6,-125.29 177.6,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;174.1,-133.9 177.6,-143.9 181.1,-133.9 174.1,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- h2n --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;h2n&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;251.6&quot; cy=&quot;-90&quot; rx=&quot;28.7&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;251.6&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;h2n&lt;/text&gt;
&lt;/g&gt;
&lt;!-- h2ddd&amp;#45;&amp;gt;h2n --&gt;
&lt;g id=&quot;edge10&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2ddd&amp;#45;&amp;gt;h2n&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M204.77,-90C207.38,-90 210,-90 212.61,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;212.7,-93.5 222.7,-90 212.7,-86.5 212.7,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- h2n&amp;#45;&amp;gt;h1n --&gt;
&lt;g id=&quot;edge14&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;h2n&amp;#45;&amp;gt;h1n&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M251.6,-108.3C251.6,-116.02 251.6,-125.29 251.6,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;248.1,-133.9 251.6,-143.9 255.1,-133.9 248.1,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xddd --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;177.6&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xddd&amp;#45;&amp;gt;h2ddd --&gt;
&lt;g id=&quot;edge17&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xddd&amp;#45;&amp;gt;h2ddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M177.6,-36.3C177.6,-44.02 177.6,-53.29 177.6,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;174.1,-61.9 177.6,-71.9 181.1,-61.9 174.1,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x1 --&gt;
&lt;g id=&quot;node14&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;28.6&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x1&amp;#45;&amp;gt;h21 --&gt;
&lt;g id=&quot;edge15&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x1&amp;#45;&amp;gt;h21&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M28.6,-36.3C28.6,-44.02 28.6,-53.29 28.6,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;25.1,-61.9 28.6,-71.9 32.1,-61.9 25.1,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x2 --&gt;
&lt;g id=&quot;node15&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;103.6&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x2&amp;#45;&amp;gt;h22 --&gt;
&lt;g id=&quot;edge16&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x2&amp;#45;&amp;gt;h22&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M103.6,-36.3C103.6,-44.02 103.6,-53.29 103.6,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;100.1,-61.9 103.6,-71.9 107.1,-61.9 100.1,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xn --&gt;
&lt;g id=&quot;node16&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;251.6&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;xn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xn&amp;#45;&amp;gt;h2n --&gt;
&lt;g id=&quot;edge18&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xn&amp;#45;&amp;gt;h2n&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M251.6,-36.3C251.6,-44.02 251.6,-53.29 251.6,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;248.1,-61.9 251.6,-71.9 255.1,-61.9 248.1,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;在 PyTorch 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.RNN&lt;/code&gt; 就有参数表示双向：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;num_layers – Number of recurrent layers. E.g., setting num_layers=2 would mean stacking two RNNs together to form a stacked RNN, with the second RNN taking in outputs of the first RNN and computing the final results. Default: 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_layers&lt;/code&gt;：隐藏层层数，默认设置为 1 层。当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_layers&lt;/code&gt; &amp;gt;= 2 时，就是一个 stacked RNN 了。&lt;/p&gt;

&lt;h4 id=&quot;47n-vs-m-的-rnn&quot;&gt;4.7、N vs. M 的 RNN&lt;/h4&gt;

&lt;p&gt;对于输入序列长度（长度 N）和输出序列长度（长度 M）不一样的 RNN 模型结构，也可以叫做 Encoder-Decoder 模型，也可以叫 Seq2Seq 模型。首先接收输入序列的 Encoder 先将输入序列转成一个隐藏态的上下文表示 C。C 可以只与最后一个隐藏层有关，甚至可以是最后一个隐藏层生成的隐藏态直接设置为 C，C 还可以与所有隐藏层有关。&lt;/p&gt;

&lt;p&gt;有了这个 C 之后，再用 Decoder 进行解码，也就是从把 C 作为输入状态开始，生成输出序列。&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-094de5e41d0af67d4c5617e0f04d7b57&quot; width=&quot;638pt&quot; height=&quot;188pt&quot; viewBox=&quot;0.00 0.00 638.00 188.00&quot;&gt;
&lt;title&gt;graphviz-094de5e41d0af67d4c5617e0f04d7b57&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	{rank=same e1 e2 eddd en C d1 d2 dddd dm}

	eddd[label=&amp;quot;...&amp;quot;]
	dddd[label=&amp;quot;...&amp;quot;]
	xddd[label=&amp;quot;...&amp;quot;]
	yddd[label=&amp;quot;...&amp;quot;]
	C[shape=plaintext]
	x1[shape=plaintext]
	x2[shape=plaintext]
	xddd[shape=plaintext]
	xn[shape=plaintext]
	y1[shape=plaintext]
	y2[shape=plaintext]
	yddd[shape=plaintext]
	yn[shape=plaintext]

	x1 -&amp;gt; e1
	x2 -&amp;gt; e2
	xddd -&amp;gt; eddd
	xn -&amp;gt; en

	e1 -&amp;gt; e2
	e2 -&amp;gt; eddd
	eddd -&amp;gt; en

	en -&amp;gt; C
	C -&amp;gt; d1

	d1 -&amp;gt; y1
	d2 -&amp;gt; y2
	dddd -&amp;gt; yddd
	dm -&amp;gt; yn

	d1 -&amp;gt; d2
	d2 -&amp;gt; dddd
	dddd -&amp;gt; dm
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-184 634,-184 634,4 -4,4&quot; /&gt;
&lt;!-- e1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;e1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;27&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;e1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;e2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;99&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;e2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e1&amp;#45;&amp;gt;e2 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;e1&amp;#45;&amp;gt;e2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M54,-90C56.61,-90 59.23,-90 61.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;61.93,-93.5 71.93,-90 61.93,-86.5 61.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- eddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;eddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;171&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e2&amp;#45;&amp;gt;eddd --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;e2&amp;#45;&amp;gt;eddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M126,-90C128.61,-90 131.23,-90 133.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;133.93,-93.5 143.93,-90 133.93,-86.5 133.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- en --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;en&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;243&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;en&lt;/text&gt;
&lt;/g&gt;
&lt;!-- eddd&amp;#45;&amp;gt;en --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;eddd&amp;#45;&amp;gt;en&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M198,-90C200.61,-90 203.23,-90 205.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;205.93,-93.5 215.93,-90 205.93,-86.5 205.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- C --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;C&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;315&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;C&lt;/text&gt;
&lt;/g&gt;
&lt;!-- en&amp;#45;&amp;gt;C --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;en&amp;#45;&amp;gt;C&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M270,-90C272.61,-90 275.23,-90 277.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;277.93,-93.5 287.93,-90 277.93,-86.5 277.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- d1 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;d1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;387&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;387&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;d1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- C&amp;#45;&amp;gt;d1 --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;C&amp;#45;&amp;gt;d1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M342.28,-90C344.74,-90 347.19,-90 349.65,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;349.75,-93.5 359.75,-90 349.75,-86.5 349.75,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- d2 --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;d2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;459&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;459&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;d2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d1&amp;#45;&amp;gt;d2 --&gt;
&lt;g id=&quot;edge14&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d1&amp;#45;&amp;gt;d2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M414,-90C416.61,-90 419.23,-90 421.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;421.93,-93.5 431.93,-90 421.93,-86.5 421.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y1 --&gt;
&lt;g id=&quot;node15&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;387&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d1&amp;#45;&amp;gt;y1 --&gt;
&lt;g id=&quot;edge10&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d1&amp;#45;&amp;gt;y1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M387,-108.3C387,-116.02 387,-125.29 387,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;383.5,-133.9 387,-143.9 390.5,-133.9 383.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- dddd --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;531&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;531&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d2&amp;#45;&amp;gt;dddd --&gt;
&lt;g id=&quot;edge15&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d2&amp;#45;&amp;gt;dddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M486,-90C488.61,-90 491.23,-90 493.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;493.93,-93.5 503.93,-90 493.93,-86.5 493.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y2 --&gt;
&lt;g id=&quot;node16&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;459&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d2&amp;#45;&amp;gt;y2 --&gt;
&lt;g id=&quot;edge11&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d2&amp;#45;&amp;gt;y2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M459,-108.3C459,-116.02 459,-125.29 459,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;455.5,-133.9 459,-143.9 462.5,-133.9 455.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- dm --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dm&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;603&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;603&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;dm&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dddd&amp;#45;&amp;gt;dm --&gt;
&lt;g id=&quot;edge16&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dddd&amp;#45;&amp;gt;dm&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M558,-90C560.61,-90 563.23,-90 565.84,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;565.93,-93.5 575.93,-90 565.93,-86.5 565.93,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yddd --&gt;
&lt;g id=&quot;node11&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;531&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dddd&amp;#45;&amp;gt;yddd --&gt;
&lt;g id=&quot;edge12&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dddd&amp;#45;&amp;gt;yddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M531,-108.3C531,-116.02 531,-125.29 531,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;527.5,-133.9 531,-143.9 534.5,-133.9 527.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- yn --&gt;
&lt;g id=&quot;node17&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;603&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;yn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dm&amp;#45;&amp;gt;yn --&gt;
&lt;g id=&quot;edge13&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dm&amp;#45;&amp;gt;yn&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M603,-108.3C603,-116.02 603,-125.29 603,-133.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;599.5,-133.9 603,-143.9 606.5,-133.9 599.5,-133.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xddd --&gt;
&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xddd&amp;#45;&amp;gt;eddd --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xddd&amp;#45;&amp;gt;eddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-36.3C171,-44.02 171,-53.29 171,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-61.9 171,-71.9 174.5,-61.9 167.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x1 --&gt;
&lt;g id=&quot;node12&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x1&amp;#45;&amp;gt;e1 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x1&amp;#45;&amp;gt;e1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-36.3C27,-44.02 27,-53.29 27,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-61.9 27,-71.9 30.5,-61.9 23.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- x2 --&gt;
&lt;g id=&quot;node13&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x2&amp;#45;&amp;gt;e2 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x2&amp;#45;&amp;gt;e2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-36.3C99,-44.02 99,-53.29 99,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-61.9 99,-71.9 102.5,-61.9 95.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;!-- xn --&gt;
&lt;g id=&quot;node14&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;243&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;xn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xn&amp;#45;&amp;gt;en --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xn&amp;#45;&amp;gt;en&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M243,-36.3C243,-44.02 243,-53.29 243,-61.89&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.5,-61.9 243,-71.9 246.5,-61.9 239.5,-61.9&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;具体地，可以如下表示：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{C} = Encoder(\bm{X}) \\
&amp;amp;\bm{Y} = Decoder(\bm{C}) \\
\end{aligned}\]

&lt;p&gt;进一步展开：&lt;/p&gt;

\[\begin{aligned}
e_t &amp;amp;= Encoder_{LSTM/GRU}(x_t, e_{t-1}) \\
\bm{C} &amp;amp;= f_1(e_n) \\
d_t &amp;amp;= f_2(d_{t-1}, \bm{C}) \\
y_t &amp;amp;= Decoder_{LSTM/GRU}(y_{t-1}, d_{t-1}, \bm{C})
\end{aligned}\]

&lt;p&gt;这种的应用就非常广了，因为大多数时候输入序列与输出序列的长度都是不同的，比如最常见的应用「翻译」，从一个语言翻译成另一个语言；再比如 AI 的一个领域「语音识别」，将语音序列输入后生成所识别的文本内容；还有比如 ChatGPT 这种问答应用等等。&lt;/p&gt;

&lt;p&gt;Seq2Seq 模型非常出色，一直到 2018 年之前 NLP 领域里该模型已成为主流。但是它有很显著的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当输入序列很长时，Encoder 生成的 Context 可能就会出现所捕捉的信息不充分的情况，导致 Decoder 最终的输出是不尽如人意的。具体地，毕竟还是 RNN 模型，其词间距过长时还是会有梯度消失问题，根本原因在于用到了「递归」。当递归作用在同一个 weight matrix 上时，使得如果这个矩阵满足条件的话，其最大的特征值要是小于 1 的话，就一定出现梯度消失问题。后来的 LSTM 和 GRU 也仅仅能缓解问题，并不能根本解决。&lt;/li&gt;
  &lt;li&gt;并行效果差：每个时刻的结果依赖前一时刻。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-5-节--为什么说-rnn-模型没有体现注意力&quot;&gt;第 5 节 · 为什么说 RNN 模型没有体现「注意力」？&lt;/h3&gt;

&lt;p&gt;Encoder-Decoder 的一个非常严重的问题，是依赖中间那个 context 向量，则无法处理特别长的输入序列 —— 记忆力不足，会忘事儿。而忘事儿的根本原因，是没有「注意力」。&lt;/p&gt;

&lt;p&gt;对于一般的 RNN 模型，Encoder-Decoder 结构并没有体现「注意力」—— 这句话怎么理解？当输入序列经过 Encoder 生成的中间结果（上下文 C），被喂给 Decoder 时，这些中间结果对所生成序列里的哪个词，都没有区别（没有特别关照谁）。这相当于在说：输入序列里的每个词，对于生成任何一个输出的词的影响，是一样的，而不是输出某个词时是聚焦特定的一些输入词。这就是模型没有注意力机制。&lt;/p&gt;

&lt;p&gt;人脑的注意力模型，其实是资源分配模型。NLP 领域的注意力模型，是在 2014 年被提出的，后来逐渐成为 NLP 领域的一个广泛应用的机制。可以应用的场景，比如对于一个电商平台中很常见的白底图，其边缘的白色区域都是无用的，那么就不应该被关注（关注权重为 0）。比如机器翻译中，翻译词都是对局部输入重点关注的。&lt;/p&gt;

&lt;p&gt;所以 Attention 机制，就是在 Decoder 时，不是所有输出都依赖相同的「上下文  \(\bm{C}_t\) 」，而是时刻 t 的输出，使用  \(\bm{C}_t\) ，而这个  \(\bm{C}_t\)  来自对每个输入数据项根据「注意力」进行的加权。&lt;/p&gt;

&lt;h3 id=&quot;第-6-节--基于-attention-机制的-encoder-decoder-模型&quot;&gt;第 6 节 · 基于 Attention 机制的 Encoder-Decoder 模型&lt;/h3&gt;

&lt;p&gt;2015 年 Dzmitry Bahdanau 等人在论文&lt;a href=&quot;https://arxiv.org/abs/1409.0473&quot;&gt;《Neural Machine Translation by Jointly Learning to Align and Translate》&lt;/a&gt; 中提出了「Attention」机制，下面请跟着麦克船长，船长会深入浅出地为你解释清楚。&lt;/p&gt;

&lt;p&gt;下图中  \(e_i\)  表示编码器的隐藏层输出， \(d_i\)  表示解码器的隐藏层输出&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-f66c634a9c7c02915e5610af76c3b1b7&quot; width=&quot;436pt&quot; height=&quot;336pt&quot; viewBox=&quot;0.00 0.00 436.00 336.00&quot;&gt;
&lt;title&gt;graphviz-f66c634a9c7c02915e5610af76c3b1b7&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	splines=ortho
	{rank=same e1 e2 eddd en}
	{rank=same d1 d2 dddd dt0 dt dddd2}

	eddd[label=&amp;quot;...&amp;quot;]
	dddd[label=&amp;quot;...&amp;quot;]
	xddd[label=&amp;quot;...&amp;quot;]
	yddd[label=&amp;quot;...&amp;quot;]
	dt[label=&amp;quot;d_t&amp;quot;]
	dt0[label=&amp;quot;d_t-1&amp;quot;]
	yt[label=&amp;quot;y_t&amp;quot;]
	yt0[label=&amp;quot;y_t-1&amp;quot;]
	Ct[shape=plaintext]
	x1[shape=plaintext]
	x2[shape=plaintext]
	xddd[shape=plaintext]
	xn[shape=plaintext]
	y1[shape=plaintext]
	y2[shape=plaintext]
	yddd[shape=plaintext]
	dddd2[shape=plaintext, label=&amp;quot;&amp;quot;]
	Ct[label=&amp;quot;C_t&amp;quot;, shape=&amp;quot;square&amp;quot;]

	x1 -&amp;gt; e1
	x2 -&amp;gt; e2
	xddd -&amp;gt; eddd
	xn -&amp;gt; en

	e1 -&amp;gt; e2
	e2 -&amp;gt; eddd
	eddd -&amp;gt; en

	Ct -&amp;gt; dt

	d1 -&amp;gt; y1
	d2 -&amp;gt; y2
	dddd -&amp;gt; yddd
	dt0 -&amp;gt; yt0
	dt -&amp;gt; yt

	d1 -&amp;gt; d2
	d2 -&amp;gt; dddd
	dddd -&amp;gt; dt0
	dt0 -&amp;gt; dt

	e1 -&amp;gt; Ct
	e2 -&amp;gt; Ct
	eddd -&amp;gt; Ct
	en -&amp;gt; Ct

	dt -&amp;gt; dddd2
	dt0 -&amp;gt; Ct
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 332)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-332 432,-332 432,4 -4,4&quot; /&gt;
&lt;!-- e1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;e1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;181&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;181&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;e1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;e2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;253&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;253&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;e2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e1&amp;#45;&amp;gt;e2 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;e1&amp;#45;&amp;gt;e2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M208.22,-90C208.22,-90 215.74,-90 215.74,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;215.74,-93.5 225.74,-90 215.74,-86.5 215.74,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- Ct --&gt;
&lt;g id=&quot;node15&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Ct&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;309,-184 269,-184 269,-144 309,-144 309,-184&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;289&quot; y=&quot;-160.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;C_t&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e1&amp;#45;&amp;gt;Ct --&gt;
&lt;g id=&quot;edge18&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;e1&amp;#45;&amp;gt;Ct&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M203,-100.6C203,-121.06 203,-164 203,-164 203,-164 258.62,-164 258.62,-164&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;258.62,-167.5 268.62,-164 258.62,-160.5 258.62,-167.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- eddd --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;eddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;325&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;325&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- e2&amp;#45;&amp;gt;eddd --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;e2&amp;#45;&amp;gt;eddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M280.22,-90C280.22,-90 287.74,-90 287.74,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;287.74,-93.5 297.74,-90 287.74,-86.5 287.74,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- e2&amp;#45;&amp;gt;Ct --&gt;
&lt;g id=&quot;edge19&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;e2&amp;#45;&amp;gt;Ct&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M274.5,-100.92C274.5,-100.92 274.5,-133.82 274.5,-133.82&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;271,-133.82 274.5,-143.82 278,-133.82 271,-133.82&quot; /&gt;
&lt;/g&gt;
&lt;!-- en --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;en&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;397&quot; cy=&quot;-90&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;397&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;en&lt;/text&gt;
&lt;/g&gt;
&lt;!-- eddd&amp;#45;&amp;gt;en --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;eddd&amp;#45;&amp;gt;en&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M352.22,-90C352.22,-90 359.74,-90 359.74,-90&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;359.74,-93.5 369.74,-90 359.74,-86.5 359.74,-93.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- eddd&amp;#45;&amp;gt;Ct --&gt;
&lt;g id=&quot;edge20&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;eddd&amp;#45;&amp;gt;Ct&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M303.5,-100.92C303.5,-100.92 303.5,-133.82 303.5,-133.82&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;300,-133.82 303.5,-143.82 307,-133.82 300,-133.82&quot; /&gt;
&lt;/g&gt;
&lt;!-- en&amp;#45;&amp;gt;Ct --&gt;
&lt;g id=&quot;edge21&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;en&amp;#45;&amp;gt;Ct&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M399,-108.29C399,-130.21 399,-164 399,-164 399,-164 319.18,-164 319.18,-164&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;319.18,-160.5 309.18,-164 319.18,-167.5 319.18,-160.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- d1 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;d1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;27&quot; cy=&quot;-238&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-234.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;d1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d2 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;d2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;99&quot; cy=&quot;-238&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-234.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;d2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d1&amp;#45;&amp;gt;d2 --&gt;
&lt;g id=&quot;edge14&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d1&amp;#45;&amp;gt;d2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M54.22,-238C54.22,-238 61.74,-238 61.74,-238&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;61.74,-241.5 71.74,-238 61.74,-234.5 61.74,-241.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y1 --&gt;
&lt;g id=&quot;node19&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-306.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d1&amp;#45;&amp;gt;y1 --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d1&amp;#45;&amp;gt;y1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M27,-256.17C27,-256.17 27,-281.59 27,-281.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;23.5,-281.59 27,-291.59 30.5,-281.59 23.5,-281.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dddd --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dddd&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;171&quot; cy=&quot;-238&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-234.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d2&amp;#45;&amp;gt;dddd --&gt;
&lt;g id=&quot;edge15&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d2&amp;#45;&amp;gt;dddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M126.22,-238C126.22,-238 133.74,-238 133.74,-238&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;133.74,-241.5 143.74,-238 133.74,-234.5 133.74,-241.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- y2 --&gt;
&lt;g id=&quot;node20&quot; class=&quot;node&quot;&gt;
&lt;title&gt;y2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;99&quot; y=&quot;-306.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- d2&amp;#45;&amp;gt;y2 --&gt;
&lt;g id=&quot;edge10&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;d2&amp;#45;&amp;gt;y2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M99,-256.17C99,-256.17 99,-281.59 99,-281.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;95.5,-281.59 99,-291.59 102.5,-281.59 95.5,-281.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dt0 --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dt0&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;250&quot; cy=&quot;-238&quot; rx=&quot;33.6&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;250&quot; y=&quot;-234.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;d_t&amp;#45;1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dddd&amp;#45;&amp;gt;dt0 --&gt;
&lt;g id=&quot;edge16&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dddd&amp;#45;&amp;gt;dt0&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M198.19,-238C198.19,-238 206.2,-238 206.2,-238&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;206.2,-241.5 216.2,-238 206.2,-234.5 206.2,-241.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yddd --&gt;
&lt;g id=&quot;node12&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;171&quot; y=&quot;-306.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dddd&amp;#45;&amp;gt;yddd --&gt;
&lt;g id=&quot;edge11&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dddd&amp;#45;&amp;gt;yddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M171,-256.17C171,-256.17 171,-281.59 171,-281.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;167.5,-281.59 171,-291.59 174.5,-281.59 167.5,-281.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dt --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dt&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;329&quot; cy=&quot;-238&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;329&quot; y=&quot;-234.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;d_t&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dt0&amp;#45;&amp;gt;dt --&gt;
&lt;g id=&quot;edge17&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dt0&amp;#45;&amp;gt;dt&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M283.96,-238C283.96,-238 291.98,-238 291.98,-238&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;291.98,-241.5 301.98,-238 291.98,-234.5 291.98,-241.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yt0 --&gt;
&lt;g id=&quot;node14&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yt0&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;250&quot; cy=&quot;-310&quot; rx=&quot;33.29&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;250&quot; y=&quot;-306.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y_t&amp;#45;1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dt0&amp;#45;&amp;gt;yt0 --&gt;
&lt;g id=&quot;edge12&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dt0&amp;#45;&amp;gt;yt0&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M250,-256.17C250,-256.17 250,-281.59 250,-281.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;246.5,-281.59 250,-291.59 253.5,-281.59 246.5,-281.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dt0&amp;#45;&amp;gt;Ct --&gt;
&lt;g id=&quot;edge23&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dt0&amp;#45;&amp;gt;Ct&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M276.4,-226.44C276.4,-226.44 276.4,-194.12 276.4,-194.12&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;279.9,-194.12 276.4,-184.12 272.9,-194.12 279.9,-194.12&quot; /&gt;
&lt;/g&gt;
&lt;!-- dddd2 --&gt;
&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dddd2&lt;/title&gt;
&lt;/g&gt;
&lt;!-- dt&amp;#45;&amp;gt;dddd2 --&gt;
&lt;g id=&quot;edge22&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dt&amp;#45;&amp;gt;dddd2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M356.22,-238C356.22,-238 363.74,-238 363.74,-238&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;363.74,-241.5 373.74,-238 363.74,-234.5 363.74,-241.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- yt --&gt;
&lt;g id=&quot;node13&quot; class=&quot;node&quot;&gt;
&lt;title&gt;yt&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;329&quot; cy=&quot;-310&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;329&quot; y=&quot;-306.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;y_t&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dt&amp;#45;&amp;gt;yt --&gt;
&lt;g id=&quot;edge13&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dt&amp;#45;&amp;gt;yt&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M329,-256.17C329,-256.17 329,-281.59 329,-281.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;325.5,-281.59 329,-291.59 332.5,-281.59 325.5,-281.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- xddd --&gt;
&lt;g id=&quot;node11&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xddd&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;325&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xddd&amp;#45;&amp;gt;eddd --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xddd&amp;#45;&amp;gt;eddd&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M325,-36.17C325,-36.17 325,-61.59 325,-61.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;321.5,-61.59 325,-71.59 328.5,-61.59 321.5,-61.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- Ct&amp;#45;&amp;gt;dt --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Ct&amp;#45;&amp;gt;dt&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M305.5,-184.22C305.5,-184.22 305.5,-218.8 305.5,-218.8&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;302,-218.8 305.5,-228.8 309,-218.8 302,-218.8&quot; /&gt;
&lt;/g&gt;
&lt;!-- x1 --&gt;
&lt;g id=&quot;node16&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x1&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;181&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x1&amp;#45;&amp;gt;e1 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x1&amp;#45;&amp;gt;e1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M181,-36.17C181,-36.17 181,-61.59 181,-61.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;177.5,-61.59 181,-71.59 184.5,-61.59 177.5,-61.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- x2 --&gt;
&lt;g id=&quot;node17&quot; class=&quot;node&quot;&gt;
&lt;title&gt;x2&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;253&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;x2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- x2&amp;#45;&amp;gt;e2 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;x2&amp;#45;&amp;gt;e2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M253,-36.17C253,-36.17 253,-61.59 253,-61.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;249.5,-61.59 253,-71.59 256.5,-61.59 249.5,-61.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- xn --&gt;
&lt;g id=&quot;node18&quot; class=&quot;node&quot;&gt;
&lt;title&gt;xn&lt;/title&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;397&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;xn&lt;/text&gt;
&lt;/g&gt;
&lt;!-- xn&amp;#45;&amp;gt;en --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;xn&amp;#45;&amp;gt;en&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M397,-36.17C397,-36.17 397,-61.59 397,-61.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;393.5,-61.59 397,-71.59 400.5,-61.59 393.5,-61.59&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;更进一步细化关于  \(\bm{C}_t\)  部分，船长在此引用《基于深度学习的道路短期交通状态时空序列预测》一书中的图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-captain-nlp-5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个图里的  \(\widetilde{h}_i\)  与上一个图里的  \(d_i\)  对应， \(h_i\)  与上一个图里的  \(e_i\)  对应。&lt;/p&gt;

&lt;p&gt;针对时刻  \(t\)  要产出的输出，隐藏层每一个隐藏细胞都与  \(\bm{C}_t\)  有一个权重关系  \(\alpha_{t,i}\)  其中  \(1\le i\le n\) ，这个权重值与「输入项经过编码器后隐藏层后的输出 \(e_i（1\le i\le n）\) 、解码器的前一时刻隐藏层输出  \(d_{t-1}\) 」两者有关：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;s_{i,t} = score(\bm{e}_i,\bm{d}_{t-1}) \\
&amp;amp;\alpha_{i,t} = \frac{exp(s_{i,t})}{\textstyle\sum_{j=1}^n exp(s_{j,t})}
\end{aligned}\]

&lt;p&gt;常用的  \(score\)  函数有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;点积（Dot Product）模型： \(s_{i,t} = {\bm{d}_{t-1}}^T \cdot \bm{e}_i\)&lt;/li&gt;
  &lt;li&gt;缩放点积（Scaled Dot-Product）模型： \(s_{i,t} = \frac{{\bm{d}_{t-1}}^T \cdot \bm{e}_i}{\sqrt{\smash[b]{dimensions\:of\:d_{t-1}\:or\:e_i}}}\) ，可避免因为向量维度过大导致点积结果太大&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后上下文向量就表示成：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;\bm{C}_t = \displaystyle\sum_{i=1}^n \alpha_{i,t} \bm{e}_i
\end{aligned}\]

&lt;p&gt;还记得 RNN 那部分里船长讲到的 Encoder-Decoder 模型的公式表示吗？&lt;/p&gt;

\[\begin{aligned}
e_t &amp;amp;= Encoder_{LSTM/GRU}(x_t, e_{t-1}) \\
\bm{C} &amp;amp;= f_1(e_n) \\
d_t &amp;amp;= f_2(d_{t-1}, \bm{C}) \\
y_t &amp;amp;= Decoder_{LSTM/GRU}(y_{t-1}, d_{t-1}, \bm{C})
\end{aligned}\]

&lt;p&gt;加入 Attention 机制的 Encoder-Decoder 模型如下。&lt;/p&gt;

\[\begin{aligned}
e_t &amp;amp;= Encoder_{LSTM/GRU}(x_t, e_{t-1}) \\
\bm{C}_t &amp;amp;= f_1(e_1,e_2...e_n,d_{t-1}) \\
d_t &amp;amp;= f_2(d_{t-1}, \bm{C}_t) \\
y_t &amp;amp;= Decoder_{LSTM/GRU}(y_{t-1}, d_{t-1}, \bm{C}_t)
\end{aligned}\]

&lt;p&gt;这种同时考虑 Encoder、Decoder 的 Attention，就叫做「Encoder-Decoder Attention」，也常被叫做「Vanilla Attention」。可以看到上面最核心的区别是第二个公式  \(C_t\) 。加入 Attention 后，对所有数据给予不同的注意力分布。具体地，比如我们用如下的函数来定义这个模型：&lt;/p&gt;

\[\begin{aligned}
\bm{e} &amp;amp;= tanh(\bm{W}^{xe} \cdot \bm{x} + \bm{b}^{xe}) \\
s_{i,t} &amp;amp;= score(\bm{e}_i,\bm{d}_{t-1}) \\
\alpha_{i,t} &amp;amp;= \frac{e^{s_{i,t}}}{\textstyle\sum_{j=1}^n e^{s_{j,t}}} \\
\bm{C}_t &amp;amp;= \displaystyle\sum_{i=1}^n \alpha_{i,t} \bm{e}_i \\
\bm{d}_t &amp;amp;= tanh(\bm{W}^{dd} \cdot \bm{d}_{t-1} + \bm{b}^{dd} +
				 \bm{W}^{yd} \cdot \bm{y}_{t-1} + \bm{b}^{yd} +
				 \bm{W}^{cd} \cdot \bm{C}_t + \bm{b}^{cd}) \\
\bm{y} &amp;amp;= Softmax(\bm{W}^{dy} \cdot \bm{d} + \bm{b}^{dy})
\end{aligned}\]

&lt;p&gt;到这里你能发现注意力机制的什么问题不？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这个注意力机制忽略了位置信息。比如 Tigers love rabbits 和 Rabbits love tigers 会产生一样的注意力分数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第二章--transformer-在-2017-年横空出世&quot;&gt;第二章 · Transformer 在 2017 年横空出世&lt;/h2&gt;

&lt;p&gt;船长先通过一个动画来看下 Transformer 是举例示意，该图来自 Google 的博客文章 &lt;a href=&quot;https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html&quot;&gt;《Transformer: A Novel Neural Network Architecture for Language Understanding》&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-11.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中文网络里找到的解释得比较好的 blogs、answers，几乎都指向了同一篇博客：Jay Alammar 的&lt;a href=&quot;http://jalammar.github.io/illustrated-transformer/&quot;&gt;《The Illustrated Transformer》&lt;/a&gt;，所以建议读者搭配该篇文章阅读。&lt;/p&gt;

&lt;p&gt;Transformer 模型中用到了自注意力（Self-Attention）、多头注意力（Multiple-Head Attention）、残差网络（ResNet）与捷径（Short-Cut）。下面我们先通过第 1 到第 4 小节把几个基本概念讲清楚，然后在第 5 小节讲解整体 Transformer 模型就会好理解很多了。最后第 6 小节我们来一段动手实践。&lt;/p&gt;

&lt;h3 id=&quot;第-7-节--自注意力机制self-attention&quot;&gt;第 7 节 · 自注意力机制（Self-Attention）&lt;/h3&gt;

&lt;p&gt;自注意力是理解 Transformer 的关键，原作者在论文中限于篇幅，没有给出过多的解释。以下是我自己的理解，能够比较通透、符合常识地去理解 Transformer 中的一些神来之笔的概念。&lt;/p&gt;

&lt;h4 id=&quot;71一段自然语言内容其自身就暗含很多内部关联信息&quot;&gt;7.1、一段自然语言内容，其自身就「暗含」很多内部关联信息&lt;/h4&gt;

&lt;p&gt;在加入了 Attention 的 Encoder-Decoder 模型中，对输出序列 Y 中的一个词的注意力来自于输入序列 X，那么如果 X 和 Y 相等呢？什么场景会有这个需求？因为我们认为一段文字里某些词就是由于另外某些词而决定的，可以粗暴地理解为「完形填空」的原理。那么这样一段文字，其实就存在其中每个词的自注意力，举个例子：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;老王是我的主管，我很喜欢他的平易近人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对这句话里的「他」，如果基于这句话计算自注意力的话，显然应该给予「老王」最多的注意力。受此启发，我们认为：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一段自然语言中，其实暗含了：为了得到关于某方面信息 Q，可以通过关注某些信息 K，进而得到某些信息（V）作为结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Q 就是 query 检索/查询，K、V 分别是 key、value。所以类似于我们在图书检索系统里搜索「NLP书籍」（这是 Q），得到了一本叫《自然语言处理实战》的电子书，书名就是 key，这本电子书就是 value。只是对于自然语言的理解，我们认为任何一段内容里，都自身暗含了很多潜在 Q-K-V 的关联。这是整体受到信息检索领域里 query-key-value 的启发的。&lt;/p&gt;

&lt;p&gt;基于这个启发，我们将自注意力的公式表示为：&lt;/p&gt;

\[\begin{aligned}
Z = SelfAttention(X) = Attention(Q,K,V)
\end{aligned}\]

&lt;p&gt;X 经过自注意力计算后，得到的「暗含」了大量原数据内部信息的 Z。然后我们拿着这个带有自注意力信息的 Z 进行后续的操作。这里要强调的是，Z 向量中的每个元素 z_i 都与 X 的所有元素有某种关联，而不是只与 x_i 有关联。&lt;/p&gt;

&lt;h4 id=&quot;72如何计算-qkv&quot;&gt;7.2、如何计算 Q、K、V&lt;/h4&gt;

&lt;p&gt;Q、K、V 全部来自输入 X 的线性变换：&lt;/p&gt;

\[\begin{aligned}
Q &amp;amp;= W^Q \cdot X \\
K &amp;amp;= W^K \cdot X \\
V &amp;amp;= W^V \cdot X
\end{aligned}\]

&lt;p&gt;\(W^Q、W^K、W^V\)  以随机初始化开始，经过训练就会得到非常好的表现。对于  \(X\)  中的每一个词向量  \(x_i\) ，经过这个变换后得到了：&lt;/p&gt;

\[\begin{aligned}
q_i &amp;amp;= W^Q \cdot x_i \\
k_i &amp;amp;= W^K \cdot x_i \\
v_i &amp;amp;= W^V \cdot x_i
\end{aligned}\]

&lt;h4 id=&quot;73注意力函数如何通过-qv-得到-z&quot;&gt;7.3、注意力函数：如何通过 Q、V 得到 Z&lt;/h4&gt;

&lt;p&gt;基于上面的启发，我们认为 X 经过自注意力的挖掘后，得到了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;暗含信息 1：一组 query 与一组 key 之间的关联，记作 qk（想一下信息检索系统要用 query 先招到 key）&lt;/li&gt;
  &lt;li&gt;暗含信息 2：一组 value&lt;/li&gt;
  &lt;li&gt;暗含信息 3：qk 与 value 的某种关联&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三组信息，分别如何表示呢？这里又需要一些启发了，因为计算机科学其实是在「模拟还原」现实世界，在 AI 的领域目前的研究方向就是模拟还原人脑的思考。所以这种「模拟还原」都是寻找某一种近似方法，因此不能按照数学、物理的逻辑推理来理解，而应该按照「工程」或者「计算科学」来理解，想想我们大学时学的「计算方法」这门课，因此常需要一些启发来找到某种「表示」。&lt;/p&gt;

&lt;p&gt;这里 Transformer 的作者，认为  \(Q\)  和  \(K\)  两个向量之间的关联，是我们在用  \(Q\)  找其在  \(K\)  上的投影，如果  \(Q\) 、 \(K\)  是单位长度的向量，那么这个投影其实可以理解为找「 \(Q\)  和  \(K\)  向量之间的相似度」：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果  \(Q\)  和  \(K\)  垂直，那么两个向量正交，其点积（Dot Product）为 0；&lt;/li&gt;
  &lt;li&gt;如果  \(Q\)  和  \(K\)  平行，那么两个向量点积为两者模积  \(\|Q\|\|K\|\) ；&lt;/li&gt;
  &lt;li&gt;如果  \(Q\)  和  \(K\)  呈某个夹角，则点积就是  \(Q\)  在  \(K\)  上的投影的模。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此「暗含信息 1」就可以用「 \(Q\cdot K\) 」再经过 Softmax 归一化来表示。这个表示，是一个所有元素都是 0~1 的矩阵，可以理解成对应注意力机制里的「注意力分数」，也就是一个「注意力分数矩阵（Attention Score Matrix）」。&lt;/p&gt;

&lt;p&gt;而「暗含信息 2」则是输入  \(X\)  经过的线性变换后的特征，看做  \(X\)  的另一种表示。然后我们用这个「注意力分数矩阵」来加持一下  \(V\) ，这个点积过程就表示了「暗含信息 3」了。所以我们有了如下公式：&lt;/p&gt;

\[\begin{aligned}
Z = Attention(Q,K,V) = Softmax(Q \cdot K^T) \cdot V
\end{aligned}\]

&lt;p&gt;其实到这里，这个注意力函数已经可以用了。有时候，为了避免因为向量维度过大，导致  \(Q \cdot K^T\)  点积结果过大，我们再加一步处理：&lt;/p&gt;

\[\begin{aligned}
Z = Attention(Q,K,V) = Softmax(\frac{Q \cdot K^T}{\sqrt{\smash[b]{d_k}}}) \cdot V
\end{aligned}\]

&lt;p&gt;这里  \(d_k\)  是 K 矩阵中向量  \(k_i\)  的维度。这一步修正还有进一步的解释，即如果经过 Softmax 归一化后模型稳定性存在问题。怎么理解？如果假设 Q 和 K 中的每个向量的每一维数据都具有零均值、单位方差，这样输入数据是具有稳定性的，那么如何让「暗含信息 1」计算后仍然具有稳定性呢？即运算结果依然保持零均值、单位方差，就是除以「 \(\sqrt{\smash[b]{d_k}}\) 」。&lt;/p&gt;

&lt;p&gt;到这里我们注意到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;K、V 里的每一个向量，都是&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;74其他注意力函数&quot;&gt;7.4、其他注意力函数&lt;/h4&gt;

&lt;p&gt;为了提醒大家这种暗含信息的表示，都只是计算方法上的一种选择，好坏全靠结果评定，所以包括上面的在内，常见的注意力函数有（甚至你也可以自己定义）：&lt;/p&gt;

\[Z = Attention(Q,K,V) =
\begin{cases}
\begin{aligned}
&amp;amp;= Softmax(Q^T K) V \\
&amp;amp;= Softmax(\frac{Q K^T}{\sqrt{\smash[b]{d_k}}}) V \\
&amp;amp;= Softmax(\omega^T tanh(W[q;k])) V \\
&amp;amp;= Softmax(Q^T W K) V \\
&amp;amp;= cosine[Q^T K] V
\end{aligned}
\end{cases}\]

&lt;p&gt;到这里，我们就从原始的输入  \(X\)  得到了一个包含自注意力信息的  \(Z\)  了，后续就可以用  \(Z\)  了。&lt;/p&gt;

&lt;h3 id=&quot;第-8-节--多头注意力&quot;&gt;第 8 节 · 多头注意力&lt;/h3&gt;

&lt;p&gt;到这里我们理解了「自注意力」，而 Transformer 这篇论文通过添加「多头」注意力的机制进一步提升了注意力层。我们先看下它是什么，然后看下它的优点。从本小节开始，本文大量插图引用自&lt;a href=&quot;http://jalammar.github.io/illustrated-transformer/&quot;&gt;《The Illustrated Transformer》&lt;/a&gt;，作者 Jay Alammar 写出一篇非常深入浅出的图解文章，被大量引用，非常出色，再次建议大家去阅读。&lt;/p&gt;

&lt;p&gt;Transformer 中用了 8 个头，也就是 8 组不同的 Q-K-V：&lt;/p&gt;

\[\begin{aligned}
Q_0 = W_0^Q \cdot X ;\enspace K_0 = &amp;amp;W_0^K \cdot X ;\enspace V_0 = W_0^V \cdot X \\
Q_1 = W_1^Q \cdot X ;\enspace K_1 = &amp;amp;W_0^K \cdot X ;\enspace V_1 = W_1^V \cdot X \\
&amp;amp;.... \\
Q_7 = W_7^Q \cdot X ;\enspace K_7 = &amp;amp;W_0^K \cdot X ;\enspace V_7 = W_7^V \cdot X
\end{aligned}\]

&lt;p&gt;这样我们就能得到 8 个 Z：&lt;/p&gt;

\[\begin{aligned}
&amp;amp;Z_0 = Attention(Q_0,K_0,V_0) = Softmax(\frac{Q_0 \cdot K_0^T}{\sqrt{\smash[b]{d_k}}}) \cdot V_0 \\
&amp;amp;Z_1 = Attention(Q_1,K_1,V_1) = Softmax(\frac{Q_1 \cdot K_1^T}{\sqrt{\smash[b]{d_k}}}) \cdot V_1 \\
&amp;amp;... \\
&amp;amp;Z_7 = Attention(Q_7,K_7,V_7) = Softmax(\frac{Q_7 \cdot K_7^T}{\sqrt{\smash[b]{d_k}}}) \cdot V_7 \\
\end{aligned}\]

&lt;p&gt;然后我们把  \(Z_0\)  到  \(Z_7\)  沿着行数不变的方向全部连接起来，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-3.png&quot; alt=&quot;image&quot; width=&quot;464&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们再训练一个权重矩阵  \(W^O\) ，然后用上面拼接的  \(Z_{0-7}\)  乘以这个权重矩阵：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-4.png&quot; alt=&quot;image&quot; width=&quot;135&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是我们会得到一个 Z 矩阵：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-5.png&quot; alt=&quot;image&quot; width=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里就是多头注意力机制的全部内容，与单头注意力相比，都是为了得到一个 Z 矩阵，但是多头用了多组 Q-K-V，然后经过拼接、乘以权重矩阵得到最后的 Z。我们总览一下整个过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-6.png&quot; alt=&quot;image&quot; width=&quot;935&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过多头注意力，每个头都会关注到不同的信息，可以如下类似表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-7.png&quot; alt=&quot;image&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这通过两种方式提高了注意力层的性能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多头注意力机制，扩展了模型关注不同位置的能力。 \(Z\)  矩阵中的每个向量  \(z_i\)  包含了与  \(X\)  中所有向量  \(x_i\)  有关的一点编码信息。反过来说，不要认为  \(z_i\)  只与  \(x_i\)  有关。&lt;/li&gt;
  &lt;li&gt;多头注意力机制，为注意力层提供了多个「表示子空间 Q-K-V」，以及 Z。这样一个输入矩阵  \(X\) ，就会被表示成 8 种不同的矩阵 Z，都包含了原始数据信息的某种解读暗含其中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-9-节--退化现象残差网络与-short-cut&quot;&gt;第 9 节 · 退化现象、残差网络与 Short-Cut&lt;/h3&gt;

&lt;h4 id=&quot;91退化现象&quot;&gt;9.1、退化现象&lt;/h4&gt;

&lt;p&gt;对于一个 56 层的神经网路，我们很自然地会觉得应该比 20 层的神经网络的效果要好，比如说从误差率（error）的量化角度看。但是华人学者何凯明等人的论文&lt;a href=&quot;https://arxiv.org/pdf/1512.03385.pdf&quot;&gt;《Deep Residual Learning for Image Recognition》&lt;/a&gt;中给我们呈现了相反的结果，而这个问题的原因并不是因为层数多带来的梯度爆炸/梯度消失（毕竟已经用了归一化解决了这个问题），而是因为一种反常的现象，这种现象我们称之为「退化现象」。何凯明等人认为这是因为存在「难以优化好的网络层」。&lt;/p&gt;

&lt;h4 id=&quot;92恒等映射&quot;&gt;9.2、恒等映射&lt;/h4&gt;

&lt;p&gt;如果这 36 层还帮了倒忙，那还不如没有，是不是？所以这多出来的 36 个网络层，如果对于提升性能（例如误差率）毫无影响，甚至更进一步，这 36 层前的输入数据，和经过这 36 层后的输出数据，完全相同，那么如果将这 36 层抽象成一个函数  \(f_{36}\) ，这就是一个恒等映射的函数：&lt;/p&gt;

\[f_{36}(x) = x\]

&lt;p&gt;回到实际应用中。如果我们对于一个神经网络中的连续 N 层是提升性能，还是降低性能，是未知的，那么则可以建立一个跳过这些层的连接，实现：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果这 N 层可以提升性能，则采用这 N 层；否则就跳过。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就像给了这 N 层神经网络一个试错的空间，待我们确认它们的性能后再决定是否采用它们。同时也可以理解成，这些层可以去单独优化，如果性能提升，则不被跳过。&lt;/p&gt;

&lt;h4 id=&quot;93残差网络residual-network与捷径short-cut&quot;&gt;9.3、残差网络（Residual Network）与捷径（Short-Cut）&lt;/h4&gt;

&lt;p&gt;如果前面 20 层已经可以实现 99% 的准确率，那么引入了这 36 层能否再提升「残差剩余那 1%」的准确率从而达到 100% 呢？所以这 36 层的网络，就被称为「残差网络（Residual Network，常简称为 ResNet）」，这个叫法非常形象。&lt;/p&gt;

&lt;p&gt;而那个可以跳过 N 层残差网络的捷径，则常被称为 Short-Cut，也会被叫做跳跃链接（Skip Conntection），这就解决了上述深度学习中的「退化现象」。&lt;/p&gt;

&lt;h3 id=&quot;第-10-节--transformer-的位置编码positional-embedding&quot;&gt;第 10 节 · Transformer 的位置编码（Positional Embedding）&lt;/h3&gt;

&lt;p&gt;还记得我在第二部分最后提到的吗：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个注意力机制忽略了位置信息。比如 Tigers love rabbits 和 Rabbits love tigers 会产生一样的注意力分数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;101transformer-论文中的三角式位置编码sinusoidal-positional-encoding&quot;&gt;10.1、Transformer 论文中的三角式位置编码（Sinusoidal Positional Encoding）&lt;/h4&gt;

&lt;p&gt;现在我们来解决这个问题，为每一个输入向量  \(x_i\)  生成一个位置编码向量  \(t_i\) ，这个位置编码向量的维度，与输入向量（词的嵌入式向量表示）的维度是相同的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-8.png&quot; alt=&quot;image&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Transformer 论文中给出了如下的公式，来计算位置编码向量的每一位的值：&lt;/p&gt;

\[\begin{aligned}
P_{pos,2i} &amp;amp;= sin(\frac{pos}{10000^{\frac{2i}{d_{model}}}}) \\
P_{pos,2i+1} &amp;amp;= cos(\frac{pos}{10000^{\frac{2i}{d_{model}}}})
\end{aligned}\]

&lt;p&gt;这样对于一个 embedding，如果它在输入内容中的位置是 pos，那么其编码向量就表示为：&lt;/p&gt;

\[\begin{aligned}
[P_{pos,0}, P_{pos,1}, ... , P_{pos,d_x-1}]
\end{aligned}\]

&lt;p&gt;延展开的话，位置编码其实还分为绝对位置编码（Absolute Positional Encoding）、相对位置编码（Relative Positional Encoding）。前者是专门生成位置编码，并想办法融入到输入中，我们上面看到的就是一种。后者是微调 Attention 结构，使得它可以分辨不同位置的数据。另外其实还有一些无法分类到这两种的位置编码方法。&lt;/p&gt;

&lt;h4 id=&quot;102绝对位置编码&quot;&gt;10.2、绝对位置编码&lt;/h4&gt;

&lt;p&gt;绝对位置编码，如上面提到的，就是定义一个位置编码向量  \(t_i\) ，通过  \(x_i + t_i\)  就得到了一个含有位置信息的向量。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;习得式位置编码（Learned Positional Encoding）：将位置编码当做训练参数，生成一个「最大长度 x 编码维度」的位置编码矩阵，随着训练进行更新。目前 Google BERT、OpenAI GPT 模型都是用的这种位置编码。缺点是「外推性」差，如果文本长度超过之前训练时用的「最大长度」则无法处理。目前有一些给出优化方案的论文，比如「&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247515573&amp;amp;idx=1&amp;amp;sn=2d719108244ada7db3a535a435631210&amp;amp;chksm=96ea6235a19deb23babde5eaac484d69e4c2f53bab72d2e350f75bed18323eea3cf9be30615b#rd&quot;&gt;层次分解位置编码&lt;/a&gt;」。&lt;/li&gt;
  &lt;li&gt;三角式位置编码（Sinusoidal Positional Encodign）：上面提过了。&lt;/li&gt;
  &lt;li&gt;循环式位置编码（Recurrent Positional Encoding）：通过一个 RNN 再接一个 Transformer，那么 RNN 暗含的「顺序」就导致不再需要额外编码了。但这样牺牲了并行性，毕竟 RNN 的两大缺点之一就有这个。&lt;/li&gt;
  &lt;li&gt;相乘式位置编码（Product Positional Encoding）：用「 \(x_i \odot t_i\) 」代替「 \(x_i + t_i\) 」。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;103相对位置编码和其他位置编码&quot;&gt;10.3、相对位置编码和其他位置编码&lt;/h4&gt;

&lt;p&gt;最早来自于 Google 的论文&lt;a href=&quot;https://arxiv.org/abs/1803.02155&quot;&gt;《Self-Attention with Relative Position Representations》&lt;/a&gt;相对位置编码，考虑的是当前 position 与被 attention 的 position 之前的相对位置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;常见相对位置编码：经典式、XLNET 式、T5 式、DeBERTa 式等。&lt;/li&gt;
  &lt;li&gt;其他位置编码：CNN 式、复数式、融合式等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到此我们都是在讲 Encoder，目前我们知道一个 Encoder 可以用如下的示意图表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-12.png&quot; alt=&quot;image&quot; width=&quot;680&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第-11-节--transformer-的编码器-encoder-和解码器-decoder&quot;&gt;第 11 节 · Transformer 的编码器 Encoder 和解码器 Decoder&lt;/h3&gt;

&lt;h4 id=&quot;111encoder-和-decoder-的图示结构&quot;&gt;11.1、Encoder 和 Decoder 的图示结构&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-15.png&quot; alt=&quot;image&quot; width=&quot;165&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一层是多头注意力层（Multi-Head Attention Layer）。&lt;/li&gt;
  &lt;li&gt;第二层是经过一个前馈神经网络（Feed Forward Neural Network，简称 FFNN）。&lt;/li&gt;
  &lt;li&gt;这两层，每一层都有「Add &amp;amp; Normalization」和 ResNet。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-14.png&quot; alt=&quot;image&quot; width=&quot;179&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解码器有两个多头注意力层。第一个多头注意力层是 Masked Multi-Head Attention 层，即在自注意力计算的过程中只有前面位置上的内容。第二个多头注意力层买有被 Masked，是个正常多头注意力层。&lt;/li&gt;
  &lt;li&gt;可以看出来，第一个注意力层是一个自注意力层（Self Attention Layer），第二个是 Encoder-Decoder Attention 层（它的 K、V 来自 Encoder，Q 来自自注意力层），有些文章里会用这个角度来指代。&lt;/li&gt;
  &lt;li&gt;FNN、Add &amp;amp; Norm、ResNet 都与 Encoder 类似。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;112decoder-的第一个输出结果&quot;&gt;11.2、Decoder 的第一个输出结果&lt;/h4&gt;

&lt;p&gt;产出第一个最终输出结果的过程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不需要经过 Masked Multi-Head Attention Layer（自注意力层）。&lt;/li&gt;
  &lt;li&gt;只经过 Encoder-Decoder Attention Layer。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-13.png&quot; alt=&quot;image&quot; width=&quot;695&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样我们就像前面的 Encoder-Decoder Attention 模型一样，得到第一个输出。但是最终的输出结果，还会经过一层「Linear + Softmax」。&lt;/p&gt;

&lt;h4 id=&quot;113decoder-后续的所有输出&quot;&gt;11.3、Decoder 后续的所有输出&lt;/h4&gt;

&lt;p&gt;从产出第二个输出结果开始：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decoder 的自注意力层，会用到前面的输出结果。&lt;/li&gt;
  &lt;li&gt;可以看到，这是一个串行过程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;114decoder-之后的-linear-和-softmax&quot;&gt;11.4、Decoder 之后的 Linear 和 Softmax&lt;/h4&gt;

&lt;p&gt;经过所有 Decoder 之后，我们得到了一大堆浮点数的结果。最后的 Linear &amp;amp; Softmax 就是来解决「怎么把它变成文本」的问题的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linear 是一个全连接神经网络，把 Decoders 输出的结果投影到一个超大的向量上，我们称之为 logits 向量。&lt;/li&gt;
  &lt;li&gt;如果我们的输出词汇表有 1 万个词，那么 logits 向量的每一个维度就有 1 万个单元，每个单元都对应输出词汇表的一个词的概率。&lt;/li&gt;
  &lt;li&gt;Softmax 将 logits 向量中的每一个维度都做归一化，这样每个维度都能从 1 万个单元对应的词概率中选出最大的，对应的词汇表里的词，就是输出词。最终得到一个输出字符串。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-12-节--transformer-模型整体&quot;&gt;第 12 节 · Transformer 模型整体&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-16.png&quot; alt=&quot;image&quot; width=&quot;660&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后我们再来整体看一下 Transformer：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先输入数据生成词的嵌入式向量表示（Embedding），生成位置编码（Positional Encoding，简称 PE）。&lt;/li&gt;
  &lt;li&gt;进入 Encoders 部分。先进入多头注意力层（Multi-Head Attention），是自注意力处理，然后进入全连接层（又叫前馈神经网络层），每层都有 ResNet、Add &amp;amp; Norm。&lt;/li&gt;
  &lt;li&gt;每一个 Encoder 的输入，都来自前一个 Encoder 的输出，但是第一个 Encoder 的输入就是 Embedding + PE。&lt;/li&gt;
  &lt;li&gt;进入 Decoders 部分。先进入第一个多头注意力层（是 Masked 自注意力层），再进入第二个多头注意力层（是 Encoder-Decoder 注意力层），每层都有 ResNet、Add &amp;amp; Norm。&lt;/li&gt;
  &lt;li&gt;每一个 Decoder 都有两部分输入。&lt;/li&gt;
  &lt;li&gt;Decoder 的第一层（Maksed 多头自注意力层）的输入，都来自前一个 Decoder 的输出，但是第一个 Decoder 是不经过第一层的（因为经过算出来也是 0）。&lt;/li&gt;
  &lt;li&gt;Decoder 的第二层（Encoder-Decoder 注意力层）的输入，Q 都来自该 Decoder 的第一层，且每个 Decoder 的这一层的 K、V 都是一样的，均来自最后一个 Encoder。&lt;/li&gt;
  &lt;li&gt;最后经过 Linear、Softmax 归一化。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-13-节--transformer-的性能&quot;&gt;第 13 节 · Transformer 的性能&lt;/h3&gt;

&lt;p&gt;Google 在其博客于 2017.08.31 发布如下测试数据：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-9.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-10.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;第三章--一个基于-tensorflow-架构的-transformer-实现&quot;&gt;第三章 · 一个基于 TensorFlow 架构的 Transformer 实现&lt;/h2&gt;

&lt;p&gt;我们来看看一个简单的 Transformer 模型，就是比较早出现的 Kyubyong 实现的 Transformer 模型：https://github.com/Kyubyong/transformer/tree/master/tf1.2_legacy&lt;/p&gt;

&lt;h3 id=&quot;第-14-节--先训练和测试一下-kyubyong-transformer&quot;&gt;第 14 节 · 先训练和测试一下 Kyubyong Transformer&lt;/h3&gt;

&lt;p&gt;下载一个「德语-英语翻译」的数据集：https://drive.google.com/uc?id=1l5y6Giag9aRPwGtuZHswh3w5v3qEz8D8&lt;/p&gt;

&lt;p&gt;把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de-en&lt;/code&gt; 下面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tgz&lt;/code&gt; 解压后放在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corpora/&lt;/code&gt; 目录下。如果需要先修改超参数，需要修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hyperparams.py&lt;/code&gt;。然后运行如下命令，生成词汇文件（vocabulary files），默认到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preprocessed&lt;/code&gt; 目录下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python prepro.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后开始训练：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python train.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以跳过训练，直接&lt;a href=&quot;https://www.dropbox.com/s/fo5wqgnbmvalwwq/logdir.zip?dl=0&quot;&gt;下载预训练过的文件&lt;/a&gt;，是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logdir/&lt;/code&gt; 目录，把它放到项目根目录下。然后可以对训练出来的结果，运行评价程序啦：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python eval.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会生成「德语-英语」测试结果文件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;results/&lt;/code&gt; 目录下，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- source: Sie war eine jährige Frau namens Alex
- expected: She was a yearold woman named Alex
- got: She was a &amp;lt;UNK&amp;gt; of vote called &amp;lt;UNK&amp;gt;

- source: Und als ich das hörte war ich erleichtert
- expected: Now when I heard this I was so relieved
- got: And when I was I &amp;lt;UNK&amp;gt; &apos;s

- source: Meine Kommilitonin bekam nämlich einen Brandstifter als ersten Patienten
- expected: My classmate got an arsonist for her first client
- got: Because my first eye was a first show

- source: Das kriege ich hin dachte ich mir
- expected: This I thought I could handle
- got: I would give it to me a day

- source: Aber ich habe es nicht hingekriegt
- expected: But I didn&apos;t handle it
- got: But I didn&apos;t &amp;lt;UNK&amp;gt; &amp;lt;UNK&amp;gt;

- source: Ich hielt dagegen
- expected: I pushed back
- got: I &amp;lt;UNK&amp;gt;

...

Bleu Score = 6.598452846670836
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;评估结果文件的最后一行是 Bleu Score：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这是用来评估机器翻译质量的一种度量方式。它是由几个不同的 BLEU 分数组成的，每个 BLEU 分数都表示翻译结果中与参考翻译的重叠程度。&lt;/li&gt;
  &lt;li&gt;一个常用的 BLEU 分数是 BLEU-4，它计算翻译结果中与参考翻译的 N 元文法语言模型 n-gram（n 为 4）的重叠程度。分数越高表示翻译结果越接近参考翻译。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-15-节--kyubyong-transformer-源码分析&quot;&gt;第 15 节 · Kyubyong Transformer 源码分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hparams.py&lt;/code&gt;：超参数都在这里，仅 30 行。将在下面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.1&lt;/code&gt; 部分解读。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_load.py&lt;/code&gt;：装载、批处理数据的相关函数，代码仅 92 行。主要在下面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.2&lt;/code&gt; 部分解读。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepro.py&lt;/code&gt;：为 source 和 target 创建词汇文件（vocabulary file），代码仅 39 行。下面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.3&lt;/code&gt; 部分会为大家解读。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.py&lt;/code&gt;：代码仅 184 行。在下面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.4&lt;/code&gt; 部分解读。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules.py&lt;/code&gt;：Encoding / Decoding 网络的构建模块，代码仅 329 行。与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules.py&lt;/code&gt; 一起会在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.4&lt;/code&gt; 部分解读。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval.py&lt;/code&gt;：评估效果，代码仅 82 行。将在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.5&lt;/code&gt; 部分解读&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总计 700 多行代码。&lt;/p&gt;

&lt;h4 id=&quot;151超参数&quot;&gt;15.1、超参数&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hyperparams.py&lt;/code&gt; 文件中定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hyperparams&lt;/code&gt; 超参数类，其中包含的参数我们逐一来解释一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source_train&lt;/code&gt;：训练数据集的源输入文件，默认是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;corpora/train.tags.de-en.de&apos;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_train&lt;/code&gt;：训练数据集的目标输出文件，默认是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;corpora/train.tags.de-en.en&apos;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source_test&lt;/code&gt;：测试数据集的源输入文件，默认是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;corpora/IWSLT16.TED.tst2014.de-en.de.xml&apos;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_test&lt;/code&gt;：测试数据集的目标输出文件，默认是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;corpora/IWSLT16.TED.tst2014.de-en.en.xml&apos;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batch_size&lt;/code&gt;：设置每批数据的大小。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lr&lt;/code&gt;：设置学习率 learning rate。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logdir&lt;/code&gt;：设置日志文件保存的目录。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxlen&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_cnt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hidden_units&lt;/code&gt;：设置编码器和解码器中隐藏层单元的数量。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_blocks&lt;/code&gt;：编码器（encoder block）、解码器（decoder block）的数量&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_epochs&lt;/code&gt;：训练过程中迭代的次数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_heads&lt;/code&gt;：还记得上面文章里我们提到的 Transformer 中用到了多头注意力吧，这里就是多头注意力的头数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;droupout_rate&lt;/code&gt;：设置 dropout 层的 dropout rate，具体 dropout 请看 2.4.1 部分。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sinusoid&lt;/code&gt;：设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; 时表示使用正弦函数计算位置编码，否则为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; 时表示直接用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position&lt;/code&gt; 做位置编码。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;152预处理&quot;&gt;15.2、预处理&lt;/h4&gt;

&lt;p&gt;文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepro.py&lt;/code&gt; 实现了预处理的过程，根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hp.source_train&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hp.target_train&lt;/code&gt; 分别创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;de.vocab.tsv&quot;&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;en.vocab.tsv&quot;&lt;/code&gt; 两个词汇表。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 使用 codecs.open 函数读取指定文件路径(fpath)的文本内容，并将其存储在 text 变量中
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 将 text 中的非字母和空格的字符去掉
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[^\s\p{Latin}&apos;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 将 text 中的文本按照空格分割，并将每个单词存储在 words 变量中
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# words 中每个单词的词频
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;word2cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 检查是否存在 preprocessed 文件夹，如果不存在就创建
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;preprocessed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;preprocessed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;preprocessed/{}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;w&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# 按出现次数从多到少的顺序写入每个单词和它的出现次数
&lt;/span&gt;    	&lt;span class=&quot;c1&quot;&gt;# 在文件最前面写入四个特殊字符 &amp;lt;PAD&amp;gt;, &amp;lt;UNK&amp;gt;, &amp;lt;S&amp;gt;, &amp;lt;/S&amp;gt; 分别用于填充，未知单词，句子开始和句子结束
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;PAD&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;UNK&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;S&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/S&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word2cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word2cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;de.vocab.tsv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en.vocab.tsv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在主函数中调用 make_vocab 函数，在目录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preprocessed&lt;/code&gt; 生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de.vocab.tsv&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;en.vocab.tsv&lt;/code&gt; 两个词汇表文件。&lt;/li&gt;
  &lt;li&gt;在函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_vocab&lt;/code&gt; 中，先使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codecs.open&lt;/code&gt; 函数读取指定文件路径 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpath&lt;/code&gt; 的文本内容，并将其存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; 变量中，再使用正则表达式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;regex&lt;/code&gt; 将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; 中的非字母和空格的字符去掉，接着将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; 中的文本按照空格分割，并将每个单词存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;words&lt;/code&gt; 变量中。&lt;/li&gt;
  &lt;li&gt;接下来，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Counter&lt;/code&gt; 函数统计 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;words&lt;/code&gt; 中每个单词的出现次数，并将统计结果存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;word2cnt&lt;/code&gt; 变量中。&lt;/li&gt;
  &lt;li&gt;最后所有词与词频，存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;de.vocab.tsv&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;en.vocab.tsv&lt;/code&gt; 两个文件中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;153训练测试数据集的加载&quot;&gt;15.3、训练/测试数据集的加载&lt;/h4&gt;

&lt;p&gt;我们先看下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.py&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_load.py&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval.py&lt;/code&gt; 三个文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.py&lt;/code&gt;：该文件包含了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graph&lt;/code&gt; 类的定义，并在其构造函数中调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_data.py&lt;/code&gt; 文件中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_batch_data&lt;/code&gt; 函数加载训练数据。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_load.py&lt;/code&gt;：定义了加载训练数据、加载测试数据的函数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval.py&lt;/code&gt;：测试结果的评价函数定义在这个文件里。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是函数调用的流程：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-9559986008ed2e1e47e8729260efda61&quot; width=&quot;830pt&quot; height=&quot;98pt&quot; viewBox=&quot;0.00 0.00 830.00 98.00&quot;&gt;
&lt;title&gt;graphviz-9559986008ed2e1e47e8729260efda61&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=LR
	splines=ortho
	node [shape=&amp;quot;box&amp;quot;]

	训练 -&amp;gt; Graph构造函数 -&amp;gt; get_batch_data -&amp;gt; load_train_data
	测试 -&amp;gt; eval -&amp;gt; load_test_data

	load_train_data -&amp;gt; create_data
	load_test_data -&amp;gt; create_data

	create_data -&amp;gt; load_de_vocab
	create_data -&amp;gt; load_en_vocab
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 94)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-94 826,-94 826,4 -4,4&quot; /&gt;
&lt;!-- 训练 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;训练&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;54,-90 0,-90 0,-54 54,-54 54,-90&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-68.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;训练&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Graph构造函数 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Graph构造函数&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;208,-90 90,-90 90,-54 208,-54 208,-90&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;149&quot; y=&quot;-68.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Graph构造函数&lt;/text&gt;
&lt;/g&gt;
&lt;!-- 训练&amp;#45;&amp;gt;Graph构造函数 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;训练&amp;#45;&amp;gt;Graph构造函数&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M54.08,-72C54.08,-72 79.54,-72 79.54,-72&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;79.54,-75.5 89.54,-72 79.54,-68.5 79.54,-75.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- get_batch_data --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;get_batch_data&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;369,-90 244,-90 244,-54 369,-54 369,-90&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;306.5&quot; y=&quot;-68.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;get_batch_data&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Graph构造函数&amp;#45;&amp;gt;get_batch_data --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Graph构造函数&amp;#45;&amp;gt;get_batch_data&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M208.1,-72C208.1,-72 233.91,-72 233.91,-72&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;233.91,-75.5 243.91,-72 233.91,-68.5 233.91,-75.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- load_train_data --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;load_train_data&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;531,-90 405,-90 405,-54 531,-54 531,-90&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;468&quot; y=&quot;-68.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;load_train_data&lt;/text&gt;
&lt;/g&gt;
&lt;!-- get_batch_data&amp;#45;&amp;gt;load_train_data --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;get_batch_data&amp;#45;&amp;gt;load_train_data&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M369.4,-72C369.4,-72 394.74,-72 394.74,-72&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;394.74,-75.5 404.74,-72 394.74,-68.5 394.74,-75.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- create_data --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;create_data&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;667,-63 567,-63 567,-27 667,-27 667,-63&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;617&quot; y=&quot;-41.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;create_data&lt;/text&gt;
&lt;/g&gt;
&lt;!-- load_train_data&amp;#45;&amp;gt;create_data --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;load_train_data&amp;#45;&amp;gt;create_data&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M531.19,-58.5C531.19,-58.5 556.81,-58.5 556.81,-58.5&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;556.81,-62 566.81,-58.5 556.81,-55 556.81,-62&quot; /&gt;
&lt;/g&gt;
&lt;!-- 测试 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;测试&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;176,-36 122,-36 122,0 176,0 176,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;149&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;测试&lt;/text&gt;
&lt;/g&gt;
&lt;!-- eval --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;eval&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;333.5,-36 279.5,-36 279.5,0 333.5,0 333.5,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;306.5&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;eval&lt;/text&gt;
&lt;/g&gt;
&lt;!-- 测试&amp;#45;&amp;gt;eval --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;测试&amp;#45;&amp;gt;eval&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M176.08,-18C176.08,-18 269.25,-18 269.25,-18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;269.25,-21.5 279.25,-18 269.25,-14.5 269.25,-21.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- load_test_data --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;load_test_data&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;527.5,-36 408.5,-36 408.5,0 527.5,0 527.5,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;468&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;load_test_data&lt;/text&gt;
&lt;/g&gt;
&lt;!-- eval&amp;#45;&amp;gt;load_test_data --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;eval&amp;#45;&amp;gt;load_test_data&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M333.53,-18C333.53,-18 398.34,-18 398.34,-18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;398.34,-21.5 408.34,-18 398.34,-14.5 398.34,-21.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- load_test_data&amp;#45;&amp;gt;create_data --&gt;
&lt;g id=&quot;edge7&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;load_test_data&amp;#45;&amp;gt;create_data&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M527.75,-31.5C527.75,-31.5 556.82,-31.5 556.82,-31.5&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;556.82,-35 566.82,-31.5 556.81,-28 556.82,-35&quot; /&gt;
&lt;/g&gt;
&lt;!-- load_de_vocab --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;load_de_vocab&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;822,-90 703,-90 703,-54 822,-54 822,-90&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;762.5&quot; y=&quot;-68.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;load_de_vocab&lt;/text&gt;
&lt;/g&gt;
&lt;!-- create_data&amp;#45;&amp;gt;load_de_vocab --&gt;
&lt;g id=&quot;edge8&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;create_data&amp;#45;&amp;gt;load_de_vocab&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M667.07,-58.5C667.07,-58.5 692.8,-58.5 692.8,-58.5&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;692.8,-62 702.8,-58.5 692.8,-55 692.8,-62&quot; /&gt;
&lt;/g&gt;
&lt;!-- load_en_vocab --&gt;
&lt;g id=&quot;node10&quot; class=&quot;node&quot;&gt;
&lt;title&gt;load_en_vocab&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;822,-36 703,-36 703,0 822,0 822,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;762.5&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;load_en_vocab&lt;/text&gt;
&lt;/g&gt;
&lt;!-- create_data&amp;#45;&amp;gt;load_en_vocab --&gt;
&lt;g id=&quot;edge9&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;create_data&amp;#45;&amp;gt;load_en_vocab&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M667.07,-31.5C667.07,-31.5 692.8,-31.5 692.8,-31.5&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;692.8,-35 702.8,-31.5 692.8,-28 692.8,-35&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_de_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vocab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;preprocessed/de.vocab.tsv&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word2idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx2word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2word&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_en_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vocab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;preprocessed/en.vocab.tsv&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word2idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx2word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2word&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preprocessed/de.vocab.tsv&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preprocessed/en.vocab.tsv&lt;/code&gt; 中储存的德语、英语的词汇、词频，载入成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;word2idx&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;idx2word&lt;/code&gt;。前者是通过词查询词向量，后者通过词向量查询词。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_de_vocab&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_en_vocab&lt;/code&gt; 函数被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_data&lt;/code&gt; 函数引用，该函数将输入的源语言和目标语言句子转换为索引表示，并对过长的句子进行截断或填充。详细的解释看下面代码里的注释。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 输入参数是翻译模型的源语言语句、目标语言语句
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_sents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_sents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;de2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2de&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_de_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_en_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 用 zip 函数将源语言和目标语言句子对应起来，并对句子进行截断或填充
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_sent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_sents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_sents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;de2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;/S&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1: OOV, &amp;lt;/S&amp;gt;: End of Text
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;/S&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; 

        &lt;span class=&quot;c1&quot;&gt;# 将句子的词的编号，原句以及编号后的句子存储下来，以供之后使用
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        	&lt;span class=&quot;c1&quot;&gt;# 将 x 和 y 转换成 numpy 数组并加入 x_list 和 y_list 中
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;x_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 将原始的 source_sent 和 target_sent 加入 Sources 和 Targets 列表中
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 对于每个 (x, y) 对，使用 np.lib.pad 函数将 x 和 y 分别用 0 进行填充，直到长度为 hp.maxlen
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 这样做的目的是使得每个句子长度都相等，方便后续的训练
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;constant&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;constant&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 返回转换后的索引表示，以及未经处理的源语言和目标语言句子
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# X 是原始句子中德语的索引
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Y 是原始句子中英语的索引
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Sources 是源原始句子列表，并与 X 一一对应
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Targets 是目标原始句子列表，并与 Y 一一对应
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 返回原始句子中德语、英语的索引
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_train_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;de_sents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[^\s\p{Latin}&apos;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;en_sents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[^\s\p{Latin}&apos;]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;de_sents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;en_sents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_batch_data&lt;/code&gt; 则从文本数据中读取并生成 batch：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_batch_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 加载数据
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_train_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# calc total batch count
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;num_batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 将 X 和 Y 转换成张量
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_to_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_to_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 创建输入队列
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;input_queues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice_input_producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            
    &lt;span class=&quot;c1&quot;&gt;# 创建 batch 队列，利用 shuffle_batch 将一组 tensor 随机打乱，并将它们分为多个 batch
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 使用 shuffle_batch 是为了防止模型过拟合
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_queues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;num_threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   
                                &lt;span class=&quot;n&quot;&gt;min_after_dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;allow_smaller_final_batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_batch&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T), (N, T), ()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;154构建模型并训练&quot;&gt;15.4、构建模型并训练&lt;/h4&gt;

&lt;p&gt;Graph 的构造函数流程，就是模型的构建流程，下面船长来分析这部分代码。&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-d43b60bdbb0d309ff41c0875976a1d4b&quot; width=&quot;526pt&quot; height=&quot;44pt&quot; viewBox=&quot;0.00 0.00 526.00 44.00&quot;&gt;
&lt;title&gt;graphviz-d43b60bdbb0d309ff41c0875976a1d4b&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=LR
	splines=ortho
	node [shape=&amp;quot;box&amp;quot;]

	Graph构造函数 -&amp;gt; 编码器 -&amp;gt; 解码器 -&amp;gt; Linear -&amp;gt; Softmax
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 40)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-40 522,-40 522,4 -4,4&quot; /&gt;
&lt;!-- Graph构造函数 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Graph构造函数&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;118,-36 0,-36 0,0 118,0 118,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;59&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Graph构造函数&lt;/text&gt;
&lt;/g&gt;
&lt;!-- 编码器 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;编码器&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;213,-36 154,-36 154,0 213,0 213,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;183.5&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;编码器&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Graph构造函数&amp;#45;&amp;gt;编码器 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Graph构造函数&amp;#45;&amp;gt;编码器&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M118.33,-18C118.33,-18 143.7,-18 143.7,-18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;143.7,-21.5 153.7,-18 143.7,-14.5 143.7,-21.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- 解码器 --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;解码器&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;308,-36 249,-36 249,0 308,0 308,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;278.5&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;解码器&lt;/text&gt;
&lt;/g&gt;
&lt;!-- 编码器&amp;#45;&amp;gt;解码器 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;编码器&amp;#45;&amp;gt;解码器&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M213.04,-18C213.04,-18 238.98,-18 238.98,-18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;238.98,-21.5 248.98,-18 238.98,-14.5 238.98,-21.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- Linear --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Linear&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;406,-36 344,-36 344,0 406,0 406,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;375&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Linear&lt;/text&gt;
&lt;/g&gt;
&lt;!-- 解码器&amp;#45;&amp;gt;Linear --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;解码器&amp;#45;&amp;gt;Linear&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M308.24,-18C308.24,-18 333.85,-18 333.85,-18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;333.85,-21.5 343.85,-18 333.85,-14.5 333.85,-21.5&quot; /&gt;
&lt;/g&gt;
&lt;!-- Softmax --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Softmax&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;518,-36 442,-36 442,0 518,0 518,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;480&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Softmax&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Linear&amp;#45;&amp;gt;Softmax --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Linear&amp;#45;&amp;gt;Softmax&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M406.22,-18C406.22,-18 431.65,-18 431.65,-18&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;431.65,-21.5 441.65,-18 431.65,-14.5 431.65,-21.5&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;整体这个流程，主要涉及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.py&lt;/code&gt; 文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules.py&lt;/code&gt; 文件。所有模型所需的主要函数定义，都是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules.py&lt;/code&gt; 中实现的。我们先看下编码器（Encoder）的流程：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-4459d4df0778b105cf972d664023b546&quot; width=&quot;169pt&quot; height=&quot;332pt&quot; viewBox=&quot;0.00 0.00 169.00 332.00&quot;&gt;
&lt;title&gt;graphviz-4459d4df0778b105cf972d664023b546&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	splines=ortho
	node [shape=&amp;quot;box&amp;quot;]

	embedding -&amp;gt; positional_encoding -&amp;gt; dropout -&amp;gt; multihead_attention -&amp;gt; feedforward
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 328)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-328 165,-328 165,4 -4,4&quot; /&gt;
&lt;!-- embedding --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;embedding&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;128.5,-36 32.5,-36 32.5,0 128.5,0 128.5,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;80.5&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;embedding&lt;/text&gt;
&lt;/g&gt;
&lt;!-- positional_encoding --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;positional_encoding&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;159.5,-108 1.5,-108 1.5,-72 159.5,-72 159.5,-108&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;80.5&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;positional_encoding&lt;/text&gt;
&lt;/g&gt;
&lt;!-- embedding&amp;#45;&amp;gt;positional_encoding --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;embedding&amp;#45;&amp;gt;positional_encoding&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M80.5,-36.17C80.5,-36.17 80.5,-61.59 80.5,-61.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;77,-61.59 80.5,-71.59 84,-61.59 77,-61.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dropout --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dropout&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;117,-180 44,-180 44,-144 117,-144 117,-180&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;80.5&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;dropout&lt;/text&gt;
&lt;/g&gt;
&lt;!-- positional_encoding&amp;#45;&amp;gt;dropout --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;positional_encoding&amp;#45;&amp;gt;dropout&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M80.5,-108.17C80.5,-108.17 80.5,-133.59 80.5,-133.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;77,-133.59 80.5,-143.59 84,-133.59 77,-133.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- multihead_attention --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;multihead_attention&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;161,-252 0,-252 0,-216 161,-216 161,-252&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;80.5&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;multihead_attention&lt;/text&gt;
&lt;/g&gt;
&lt;!-- dropout&amp;#45;&amp;gt;multihead_attention --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dropout&amp;#45;&amp;gt;multihead_attention&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M80.5,-180.17C80.5,-180.17 80.5,-205.59 80.5,-205.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;77,-205.59 80.5,-215.59 84,-205.59 77,-205.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- feedforward --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;feedforward&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;132.5,-324 28.5,-324 28.5,-288 132.5,-288 132.5,-324&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;80.5&quot; y=&quot;-302.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;feedforward&lt;/text&gt;
&lt;/g&gt;
&lt;!-- multihead_attention&amp;#45;&amp;gt;feedforward --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;multihead_attention&amp;#45;&amp;gt;feedforward&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M80.5,-252.17C80.5,-252.17 80.5,-277.59 80.5,-277.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;77,-277.59 80.5,-287.59 84,-277.59 77,-277.59&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;下面是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.py&lt;/code&gt; 中实现的 Transformer 流程，其中的每一段代码，船长都会做详细解释，先不用急。这个流程里，首先定义了编码器，先使用了 Embedding 层将输入数据转换为词向量，使用 Positional Encoding 层对词向量进行位置编码，使用 Dropout 层进行 dropout 操作，然后进行多层 Multihead Attention 和 Feed Forward 操作。&lt;/p&gt;

&lt;p&gt;在构建模型前，先执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.py&lt;/code&gt; 的主程序段，首先 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt; 这句代码是在 Python 中常用的一种编写方式，它的意思是当一个文件被直接运行时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句下面的代码会被执行。请看下面代码的注释。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                
    
    &lt;span class=&quot;c1&quot;&gt;# 加载词汇表   
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;de2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2de&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_de_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_en_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 构建模型并训练
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;train&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Graph loaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 创建了一个 Supervisor 对象来管理训练过程
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                             &lt;span class=&quot;n&quot;&gt;logdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;save_model_secs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 使用 with 语句打开一个会话
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managed_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# 训练迭代 hp.num_epochs 次
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_epochs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# tqdm 是一个 Python 库，用来在循环执行训练操作时在命令行中显示进度条
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tqdm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

            	&lt;span class=&quot;c1&quot;&gt;# 每次迭代都会运行训练操作 g.train_op
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 获取训练的步数，通过 sess.run() 函数获取 global_step 的当前值并赋值给 gs。这样可在后面使用 gs 保存模型时用这个值命名模型
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 每个 epoch 结束时，它使用 saver.save() 函数保存当前模型的状态
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;/model_epoch_%02d_gs_%d&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_epochs&lt;/code&gt; 是训练过程中迭代的次数，它表示训练模型需要在训练数据上跑多少遍。每一次迭代都会在训练数据集上进行训练，通常来说，训练数据集会被重复多次迭代，直到达到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_epochs&lt;/code&gt; 次。这样可以确保模型能够充分地学习数据的特征。设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_epochs&lt;/code&gt; 的值过大或过小都会导致模型性能下降。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1541编码过程&quot;&gt;15.4.1、编码过程&lt;/h5&gt;

&lt;h6 id=&quot;embedding&quot;&gt;Embedding&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;embedding&lt;/code&gt; 用来把输入生成词嵌入向量：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 词语转换为对应的词向量表示
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;de2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enc_embed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vocab_size&lt;/code&gt; 是词汇表的大小。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_units&lt;/code&gt; 是词向量的维度。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; 是一个布尔值，用来确定是否对词向量进行标准化。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt; 是变量作用域的名称。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;key-masks&quot;&gt;Key Masks&lt;/h6&gt;

&lt;p&gt;接着生成一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_masks&lt;/code&gt; 用于在之后的计算中屏蔽掉某些位置的信息，以便模型只关注有效的信息。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;先对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.enc&lt;/code&gt; 张量进行对每个元素求绝对值的操作&lt;/li&gt;
  &lt;li&gt;沿着最后一阶作为轴，进行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce_sum&lt;/code&gt; 操作，得到一个 (batch, sequence_length) 形状的张量。&lt;/li&gt;
  &lt;li&gt;再进行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tf.sign&lt;/code&gt; 操作，对刚得到的每个元素进行符号函数的变换。&lt;/li&gt;
  &lt;li&gt;最后再扩展阶数，变成形状 (batch, sequence_length, 1) 的张量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;positional-encoding&quot;&gt;Positional Encoding&lt;/h6&gt;

&lt;p&gt;下面生成 Transformer 的位置编码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 位置编码
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinusoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positional_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enc_pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    							 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;enc_pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果超参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hp.sinusoid=True&lt;/code&gt;，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;positional_encoding&lt;/code&gt; 函数，通过使用正弦和余弦函数来生成位置编码，可以为输入序列添加位置信息。如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hp.sinusoid=False&lt;/code&gt;，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;embedding&lt;/code&gt; 函数，通过学习的词嵌入来生成位置编码。&lt;/p&gt;

&lt;p&gt;位置编码生成后，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_masks&lt;/code&gt; 处理一下。注意 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_masks&lt;/code&gt; 的生成一定要用最初的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.enc&lt;/code&gt;，所以在前面执行而不是这里：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个不是矩阵乘法，而是对应元素相乘。这里乘上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_masks&lt;/code&gt; 的目的是将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_masks&lt;/code&gt; 中值为 0 的位置对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.enc&lt;/code&gt; 中的元素置为 0，这样就可以排除这些位置对计算的影响。&lt;/p&gt;

&lt;h6 id=&quot;drop-out&quot;&gt;Drop out&lt;/h6&gt;

&lt;p&gt;下面调用了 TensorFlow 的 drop out 操作：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_to_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;drop out 是一种在深度学习中常用的正则化技巧。它通过在训练过程中随机地「关闭」一些神经元来减少 &lt;strong&gt;过拟合&lt;/strong&gt;。这样做是为了防止模型过于依赖于某些特定的特征，而导致在新数据上的表现不佳。&lt;/p&gt;

&lt;p&gt;在这个函数中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dropout&lt;/code&gt; 层通过在训练过程中随机地将一些神经元的输出值设置为 0，来减少模型的过拟合。这个函数中使用了一个参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate&lt;/code&gt;，表示每个神经元被「关闭」的概率。这样做是为了防止模型过于依赖于某些特定的特征，而导致在新数据上的表现不佳。&lt;/p&gt;

&lt;h6 id=&quot;encoder-blocks-multi-head-attention--feed-forward&quot;&gt;Encoder Blocks: Multi-Head Attention &amp;amp; Feed Forward&lt;/h6&gt;

&lt;p&gt;然后看下 encoder blocks 代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;## Blocks
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num_blocks_{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 多头注意力
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multihead_attention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;causality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 前馈神经网络
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedforward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码是编码器（Encoder）的实现函数调用的流程，也是与船长上面的模型原理介绍一致的，在定义时同样使用了 Embedding 层、Positional Encoding 层、Dropout 层、Multihead Attention 和 Feed Forward 操作。其中 Multihead Attention 在编码、解码中是不一样的，待会儿我们会在 Decoder 部分再提到，有自注意力层和 Encoder-Decoder 层。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;超参数 hp.num_blocks 表示 Encoder Blocks 的层数，每一层都有一个 Multi-Head Attention 和一个 Feed Forward。&lt;/li&gt;
  &lt;li&gt;这个 Encoder 中的 Multi-Head Attention 是基于自注意力的（注意与后面的 Decoder 部分有区别）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;causality&lt;/code&gt; 参数的意思是否使用 Causal Attention，它是 Self-Attention 的一种，但是只使用过去的信息，防止模型获取未来信息的干扰。一般对于预测序列中的某个时间步来说，只关注之前的信息，而不是整个序列的信息。这段代码中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;causality&lt;/code&gt; 设置为了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;，即会关注整个序列的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1542解码过程&quot;&gt;15.4.2、解码过程&lt;/h5&gt;

&lt;p&gt;再看一下解码的流程：&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-0ec29ea83329c971f433bc6641585297&quot; width=&quot;372pt&quot; height=&quot;404pt&quot; viewBox=&quot;0.00 0.00 372.00 404.00&quot;&gt;
&lt;title&gt;graphviz-0ec29ea83329c971f433bc6641585297&lt;/title&gt;
&lt;desc&gt;
digraph G {
	rankdir=BT
	splines=ortho
	node [shape=&amp;quot;box&amp;quot;]
	decoder_attn1 [label=&amp;quot;multihead_attention (self-attention)&amp;quot;]
	decoder_attn2 [label=&amp;quot;multihead_attention (encoder-decoder attention)&amp;quot;]

	embedding -&amp;gt; positional_encoding -&amp;gt; dropout -&amp;gt; decoder_attn1 -&amp;gt; decoder_attn2 -&amp;gt; feedforward
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 400)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-400 368,-400 368,4 -4,4&quot; /&gt;
&lt;!-- decoder_attn1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;decoder_attn1&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;317,-252 47,-252 47,-216 317,-216 317,-252&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;182&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;multihead_attention (self&amp;#45;attention)&lt;/text&gt;
&lt;/g&gt;
&lt;!-- decoder_attn2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;decoder_attn2&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;364,-324 0,-324 0,-288 364,-288 364,-324&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;182&quot; y=&quot;-302.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;multihead_attention (encoder&amp;#45;decoder attention)&lt;/text&gt;
&lt;/g&gt;
&lt;!-- decoder_attn1&amp;#45;&amp;gt;decoder_attn2 --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;decoder_attn1&amp;#45;&amp;gt;decoder_attn2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M182,-252.17C182,-252.17 182,-277.59 182,-277.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;178.5,-277.59 182,-287.59 185.5,-277.59 178.5,-277.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- feedforward --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;feedforward&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;234,-396 130,-396 130,-360 234,-360 234,-396&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;182&quot; y=&quot;-374.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;feedforward&lt;/text&gt;
&lt;/g&gt;
&lt;!-- decoder_attn2&amp;#45;&amp;gt;feedforward --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;decoder_attn2&amp;#45;&amp;gt;feedforward&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M182,-324.17C182,-324.17 182,-349.59 182,-349.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;178.5,-349.59 182,-359.59 185.5,-349.59 178.5,-349.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- embedding --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;embedding&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;230,-36 134,-36 134,0 230,0 230,-36&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;182&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;embedding&lt;/text&gt;
&lt;/g&gt;
&lt;!-- positional_encoding --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;positional_encoding&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;261,-108 103,-108 103,-72 261,-72 261,-108&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;182&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;positional_encoding&lt;/text&gt;
&lt;/g&gt;
&lt;!-- embedding&amp;#45;&amp;gt;positional_encoding --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;embedding&amp;#45;&amp;gt;positional_encoding&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M182,-36.17C182,-36.17 182,-61.59 182,-61.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;178.5,-61.59 182,-71.59 185.5,-61.59 178.5,-61.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dropout --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;dropout&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; points=&quot;218.5,-180 145.5,-180 145.5,-144 218.5,-144 218.5,-180&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;182&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;dropout&lt;/text&gt;
&lt;/g&gt;
&lt;!-- positional_encoding&amp;#45;&amp;gt;dropout --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;positional_encoding&amp;#45;&amp;gt;dropout&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M182,-108.17C182,-108.17 182,-133.59 182,-133.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;178.5,-133.59 182,-143.59 185.5,-133.59 178.5,-133.59&quot; /&gt;
&lt;/g&gt;
&lt;!-- dropout&amp;#45;&amp;gt;decoder_attn1 --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;dropout&amp;#45;&amp;gt;decoder_attn1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M182,-180.17C182,-180.17 182,-205.59 182,-205.59&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;178.5,-205.59 182,-215.59 185.5,-205.59 178.5,-205.59&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h6 id=&quot;embedding-1&quot;&gt;Embedding&lt;/h6&gt;

&lt;p&gt;下面我们逐一看每段代码，主要关注与编码阶段的区别即可：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoder_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dec_embed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;embedding&lt;/code&gt; 输入用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.decoder_inputs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;词汇表尺寸用翻译后的输出语言英语词汇表长度 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len(en2idx)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;key-masks-1&quot;&gt;Key Masks&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_masks&lt;/code&gt; 输入变量用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.dec&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;positional-encoding--drop-out&quot;&gt;Positional Encoding &amp;amp; Drop out&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 位置编码
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinusoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positional_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoder_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dec_pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoder_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    							 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoder_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dec_pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_to_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.decoder_inputs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vocab_size&lt;/code&gt; 参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hp.maxlen&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;decoder-blocks-multi-head-attention--feed-forward&quot;&gt;Decoder Blocks: Multi-Head Attention &amp;amp; Feed Forward&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;## 解码器模块
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num_blocks_{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 多头注意力（自注意力）
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multihead_attention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;causality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;self_attention&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 多头注意力（Encoder-Decoder 注意力）
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multihead_attention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                        &lt;span class=&quot;n&quot;&gt;causality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vanilla_attention&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 前馈神经网络
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedforward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multihead_attention&lt;/code&gt; 函数解码器模块时，注意传入的参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt; 区别，先是自注意力层，用参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self_attention&lt;/code&gt;，对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queries&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.dec&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; 也是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.dec&lt;/code&gt;。再是「Encoder-Decder Attention」用的是参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vanilla_attention&lt;/code&gt;，对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queries&lt;/code&gt; 来自解码器是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.dec&lt;/code&gt;，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; 来自编码器是是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.enc&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1543embeddingpositional-encodingmulti-head-attentionfeed-forward&quot;&gt;15.4.3、Embedding、Positional Encoding、Multi-Head Attention、Feed Forward&lt;/h5&gt;

&lt;h6 id=&quot;embedding-函数实现&quot;&gt;Embedding 函数实现&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;embedding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# 创建一个名为 `lookup_table`、形状为 (vocab_size, num_units) 的矩阵
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;lookup_table&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vocab_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contrib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xavier_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# lookup_table 的第一行插入一个全零行，作为 PAD 的词向量
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 在词向量矩阵 lookup_table 中查找 inputs
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embedding_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 对输出的词向量进行除以根号 num_units 的操作，可以控制词向量的统计稳定性。
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;positional-encoding-函数实现&quot;&gt;Positional Encoding 函数实现&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;positional_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;positional_encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# tf.range(T) 生成一个 0~T-1 的数组
&lt;/span&gt;    	&lt;span class=&quot;c1&quot;&gt;# tf.tile() 将其扩展成 N*T 的矩阵，表示每个词的位置
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;position_ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# First part of the PE function: sin and cos argument
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;position_enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 用 numpy 的 sin 和 cos 函数对每个位置进行编码
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;position_enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position_enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# dim 2i
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;position_enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position_enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# dim 2i+1
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 将编码结果转为张量
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_to_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position_enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 将编码的结果与位置索引相关联，得到最终的位置编码
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero_pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        	&lt;span class=&quot;c1&quot;&gt;# 如果 zero_pad 参数为 True，则在编码结果的开头添加一个全 0 的向量
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embedding_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# scale 参数为 True，则将编码结果乘上 num_units 的平方根
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;multi-head-attention-函数实现&quot;&gt;Multi-Head Attention 函数实现&lt;/h6&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multihead_attention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;causality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multihead_attention&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Set the fall back option for num_units
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Linear Projections
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 使用三个全连接层对输入的 queries、keys 分别进行线性变换，将其转换为三个维度相同的张量 Q/K/V
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_q, C)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_k, C)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_k, C)
&lt;/span&gt;        
        &lt;span class=&quot;c1&quot;&gt;# Split and concat
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 按头数 split Q/K/V，再各自连接起来
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Q_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, C/h) 
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;K_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_k, C/h) 
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;V_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_k, C/h) 
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Multiplication
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 计算 Q_, K_, V_ 的点积来获得注意力权重
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 其中 Q_ 的维度为 (hN, T_q, C/h)
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# K_ 的维度为 (hN, T_k, C/h)
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 计算出来的结果 outputs 的维度为 (h*N, T_q, T_k)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Scale
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 对权重进行 scale，这里除以了 K_ 的第三维的平方根，用于缩放权重
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Key Masking
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 这里需要将 keys 的有效部分标记出来，将无效部分设置为极小值，以便在之后的 softmax 中被忽略
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_k)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_k)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;paddings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paddings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;# Causality = Future blinding
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;causality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        	&lt;span class=&quot;c1&quot;&gt;# 创建一个与 outputs[0, :, :] 相同形状的全 1 矩阵
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;diag_vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (T_q, T_k)
&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 对 diag_vals 进行处理，返回一个下三角线矩阵
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;tril&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinearOperatorLowerTriangular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diag_vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (T_q, T_k)
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tril&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;   
   			&lt;span class=&quot;c1&quot;&gt;# 将 masks 为 0 的位置的 outputs 值设置为一个非常小的数
&lt;/span&gt;   			&lt;span class=&quot;c1&quot;&gt;# 这样会导致这些位置在之后的计算中对结果产生非常小的影响，从而实现了遮盖未来信息的功能
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;paddings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones_like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paddings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;# 对于每个头的输出，应用 softmax 激活函数，这样可以得到一个概率分布
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;softmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;         
        &lt;span class=&quot;c1&quot;&gt;# Query Masking
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 对于查询（queries）进行 masking，这样可以避免输入序列后面的词对之前词的影响
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;query_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_q)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;query_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;query_masks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (h*N, T_q, T_k)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_masks&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# broadcasting. (N, T_q, C)
&lt;/span&gt;          
        &lt;span class=&quot;c1&quot;&gt;# Dropouts &amp;amp; Weighted Sum
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 对于每个头的输出，应用 dropout 以及进行残差连接
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout_rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_to_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ( h*N, T_q, C/h)
&lt;/span&gt;        
        &lt;span class=&quot;c1&quot;&gt;# Restore shape
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 将每个头的输出拼接起来，使用 tf.concat 函数，将不同头的结果按照第二维拼接起来
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 得到最终的输出结果，即经过多头注意力计算后的结果
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_q, C)
&lt;/span&gt;              
        &lt;span class=&quot;c1&quot;&gt;# Residual connection
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;
              
        &lt;span class=&quot;c1&quot;&gt;# Normalize
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (N, T_q, C)
&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;feed-forward-函数实现&quot;&gt;Feed Forward 函数实现&lt;/h6&gt;

&lt;p&gt;下面是 &lt;strong&gt;前馈神经网络层&lt;/strong&gt; 的定义，这是一个非线性变换，这里用到了一些卷积神经网络（CNN）的知识，我们来看下代码再解释：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;feedforward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multihead_attention&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Inner layer
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;inputs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;filters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kernel_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;activation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;use_bias&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Readout layer
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;inputs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;filters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_units&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kernel_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;activation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;use_bias&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 连接一个残差网络 ResNet
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 归一化后输出
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;先是使用了一个卷积层（conv1d）作为 inner layer、一个卷积层作为 readout layer，卷积核大小都为 1。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filters&lt;/code&gt; 参数用来控制卷积层中输出通道数量，inner layer 的输出通道数设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_units[0]&lt;/code&gt; ，readout layer 的设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_units[1]&lt;/code&gt;。有时也会把这个解释为神经元数量。这两个的默认分别为 2048、512，调用时传入的是超参数的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[4 * hidden_units, hidden_units]&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;其中 inner layer 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReLU&lt;/code&gt; 作为激活函数，然后连接一个残差网络 RedNet，把 readout layer 的输出加上原始的输入。&lt;/li&gt;
  &lt;li&gt;最后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normalize&lt;/code&gt; 归一化处理输出，再返回。下面来看下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normalize&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e-8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ln&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# 输入数据的形状
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;inputs_shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params_shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    
    	&lt;span class=&quot;c1&quot;&gt;# 平均数、方差
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep_dims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 拉伸因子 beta
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 缩放因子 gamma
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 归一化：加上一个非常小的 epsilon，是为了防止除以 0
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;该函数实现了 Layer Normalization，用于在深度神经网络中解决数据的不稳定性问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;1544编码和解码完成后的操作&quot;&gt;15.4.4、编码和解码完成后的操作&lt;/h5&gt;

&lt;p&gt;解码器后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear &amp;amp; Softmax&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 全连接层得到的未经过归一化的概率值
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 预测的英文单词 idx
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 正确预测数量，除以所有样本数，得到准确率
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#  记录了模型的准确率的值，用于 tensorboard 可视化
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;acc&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;训练集数据处理时，经过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear &amp;amp; Softmax&lt;/code&gt; 之后的最后处理如下。这里用到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tf.nn.softmax_cross_entropy_with_logits&lt;/code&gt; 交叉熵损失，来计算模型的错误率 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean_loss&lt;/code&gt;，并使用 Adam 优化器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdamOptimizer&lt;/code&gt; 来优化模型参数。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 使用 label_smoothing 函数对真实标签进行标签平滑，得到 self.y_smoothed
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_smoothed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one_hot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面这段代码实现了一种叫做「label Smoothing」的技巧。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;label_smoothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;# 获取输入的类别数，并将其赋值给变量 K
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# number of channels
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在训练过程中，样本的标签被表示为一个二维矩阵，其中第一维表示样本的编号，第二维表示样本的标签。这个矩阵的形状就是 (样本数, 类别数)，所以类别数对应的就是最后一维。具体到这个模型用例里，第一个维度是德语样本句子数，最后一维就是英语词汇量的大小。&lt;/p&gt;

&lt;p&gt;用于解决在训练模型时出现的过拟合问题。在标签平滑中，我们给每个样本的标签加上一些噪声，使得模型不能完全依赖于样本的标签来进行训练，从而减少过拟合的可能性。具体来说，这段代码将输入的标签 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; 乘上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1-epsilon&lt;/code&gt;，再加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epsilon / K&lt;/code&gt;，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epsilon&lt;/code&gt; 是平滑因子，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt; 是标签类别数（英语词汇量大小）。这样就可以在训练过程中让模型对标签的预测更加平稳，并且降低过拟合的风险。&lt;/p&gt;

&lt;p&gt;然后我们看后续的操作。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 对于分类问题来说，常用的损失函数是交叉熵损失
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;softmax_cross_entropy_with_logits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_smoothed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean_loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Training Scheme
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;global_step&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trainable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Adam 优化器 self.optimizer，用于优化损失函数
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdamOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e-8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 使用优化器的 minimize() 函数创建一个训练操作 self.train_op，用于更新模型参数。这个函数会自动计算梯度并应用更新
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;c1&quot;&gt;# 将平均损失写入 TensorFlow 的 Summary 中，用于 tensorboard 可视化
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;mean_loss&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 将所有的 summary 合并到一起，方便在训练过程中写入事件文件
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;155效果评价&quot;&gt;15.5、效果评价&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;# 创建一个处理测试数据集的 Graph 实例
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_training&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Graph loaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# 加载测试数据
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_test_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;de2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2de&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_de_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;en2idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx2en&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_en_vocab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     
    &lt;span class=&quot;c1&quot;&gt;# Start session         
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;# TensorFlow 中用于管理训练的一个类
&lt;/span&gt;    	&lt;span class=&quot;c1&quot;&gt;# 它可以帮助你轻松地管理训练过程中的各种资源，如模型参数、检查点和日志
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 创建一个会话
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managed_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigProto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow_soft_placement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 恢复模型参数
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latest_checkpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Restored!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              
            &lt;span class=&quot;c1&quot;&gt;# 获取模型名称
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;/checkpoint&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# model name
&lt;/span&gt;             
            &lt;span class=&quot;c1&quot;&gt;## Inference
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;results&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;results&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 初始化结果文件
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;results/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_of_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypotheses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;# 循环处理数据
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                     
                    &lt;span class=&quot;c1&quot;&gt;# 获取小批量数据
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     
                    &lt;span class=&quot;c1&quot;&gt;# 使用自回归推理（Autoregressive inference）得到预测结果
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;_preds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_preds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     
                    &lt;span class=&quot;c1&quot;&gt;# 将预测结果写入文件
&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sentence-wise
&lt;/span&gt;                        &lt;span class=&quot;n&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx2en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/S&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- source: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- expected: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- got: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                          
                        &lt;span class=&quot;c1&quot;&gt;# bleu score
&lt;/span&gt;                        &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;hypothesis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypothesis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;list_of_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;hypotheses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypothesis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              
                &lt;span class=&quot;c1&quot;&gt;# 计算 BLEU 分数，并将其写入文件
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corpus_bleu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_of_refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypotheses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bleu Score = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                          
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;第-16-节--kyubyong-transformer-的性能表现和一些问题&quot;&gt;第 16 节 · Kyubyong Transformer 的性能表现和一些问题&lt;/h3&gt;

&lt;p&gt;评估结果文件的最后一行有 Bleu Score = 6.598452846670836 表示这个翻译模型的翻译结果与参考翻译重叠程度比较高，翻译质量较好。不过需要注意的是，BLEU 分数不能完全反映翻译质量，因为它不能评估语法，语义，语调等方面的问题。&lt;/p&gt;

&lt;p&gt;另外前面我们在代码中已经将过程数据保存在 logdir 下了，就是为了后续方便可视化，我们可以用 TensorBoard 来可视化，具体使用方法如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@local &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tensorboard &lt;span class=&quot;nt&quot;&gt;--logdir&lt;/span&gt; logdir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在浏览器里查看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:6006&lt;/code&gt;，示例如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-04-language-model-5-17.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到这个 Transformer 能够较好地捕捉长距离依赖关系，提高翻译质量。然而，Kyubyong Transformer 的实现存在一些问题。该 Transformer 模型在训练过程中还需要调整许多超参数，如学习率（learning rate）、batch size 等，不同的任务可能需要不同的超参数调整。&lt;/p&gt;

&lt;h2 id=&quot;结尾--transformer-问世后的这些年&quot;&gt;结尾 · Transformer 问世后的这些年&lt;/h2&gt;

&lt;p&gt;Transformer 的优势显而易见：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更快 —— 并行性好：在 Transformer 诞生之前，RNN 是 NLP 领域的主流模型，但是 RNN 并行性差（序列串行处理）。&lt;/li&gt;
  &lt;li&gt;不健忘 —— 词距离缩短为 1：RNN 模型处理长文本内容已丢失（在 RNN 模型中意味着词的空间距离长）。&lt;/li&gt;
  &lt;li&gt;处理不同长度序列：不需要输入数据的序列是固定长度的。&lt;/li&gt;
  &lt;li&gt;易于转移学习。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此基于 Transformer 原理的模型，在众多 NLP 任务中都取得了卓越的表现。&lt;/p&gt;

&lt;p&gt;说到底机器学习（Machine Learning）领域还是一个实验科学，并且是离工业界极近的实验科学。机器学习看待实验结果的角度，不是为了拿实验结果总结抽象后推动理论科学发展。机器学习的实验结果是要被评价的，其效果有客观量化评估标准。所以机器学习，一切以结果说话。&lt;/p&gt;

&lt;p&gt;Transformer 在 2017 年开创性地引入 Q、K、V 抽取特征，基于其架构的 Decoder 部分诞生了 OpenAI 的 GPT 大模型，基于其架构的 Encoder 部分诞生了 Google 的 BERT 大模型，他们两个都诞生于 2018 年。这几年基于 Transformer 的各种优化思想不断出现，其集大成者便是 2022 年年底基于 GPT-3.5 或者说基于 InstructGPT 的 ChatGPT。&lt;/p&gt;

&lt;p&gt;感谢你有耐心看完本篇近 10 万字长文，因为是船涨的技术笔记，所以对于关键点梳理得细致了些。后续，我讲和大家一起聊聊 AIGC 的当下，如果说本篇内容更像一个教程（对缘起技术的深入），那么后续我们的探讨则可能更像一篇报告了（对眼前学界与业界发展现状的综述），我们将更关注文章「前言」部分的两个议题：1）如果认为通过图灵测试代表着 AGI（Artificial General Intelligence，通用人工智能）的话，当下 NLP，乃至 AGI 发展到什么程度了？2）未来一些年内，AGI 的发展路线可能会是怎样的？&lt;/p&gt;

&lt;p&gt;AI 终将颠覆各行各业，阿里人有责任花些时间关注前沿的发展脉搏，欢迎大家在钉钉或微信（id：sinosuperman）上与我交流。&lt;/p&gt;

&lt;p&gt;最后，船涨祝大家兔年里，健康又快乐。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://web.stanford.edu/~jurafsky/slp3/3.pdf&lt;/li&gt;
  &lt;li&gt;https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html&lt;/li&gt;
  &lt;li&gt;《自然语言处理：基于预训练模型的方法》车万翔 等著&lt;/li&gt;
  &lt;li&gt;https://cs.stanford.edu/people/karpathy/convnetjs/&lt;/li&gt;
  &lt;li&gt;https://arxiv.org/abs/1706.03762&lt;/li&gt;
  &lt;li&gt;https://arxiv.org/abs/1512.03385&lt;/li&gt;
  &lt;li&gt;https://github.com/Kyubyong/transformer/&lt;/li&gt;
  &lt;li&gt;http://jalammar.github.io/illustrated-transformer/&lt;/li&gt;
  &lt;li&gt;https://towardsdatascience.com/this-is-how-to-train-better-transformer-models-d54191299978&lt;/li&gt;
  &lt;li&gt;《自然语言处理实战：预训练模型应用及其产品化》安库·A·帕特尔 等著&lt;/li&gt;
  &lt;li&gt;https://lilianweng.github.io/posts/2018-06-24-attention/&lt;/li&gt;
  &lt;li&gt;https://github.com/lilianweng/transformer-tensorflow/&lt;/li&gt;
  &lt;li&gt;《基于深度学习的道路短期交通状态时空序列预测》崔建勋 著&lt;/li&gt;
  &lt;li&gt;https://www.zhihu.com/question/325839123&lt;/li&gt;
  &lt;li&gt;https://luweikxy.gitbook.io/machine-learning-notes/self-attention-and-transformer&lt;/li&gt;
  &lt;li&gt;《Python 深度学习（第 2 版）》弗朗索瓦·肖莱 著&lt;/li&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/Attention_(machine_learning)&lt;/li&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/410776234&lt;/li&gt;
  &lt;li&gt;https://www.tensorflow.org/tensorboard/get_started&lt;/li&gt;
  &lt;li&gt;https://paperswithcode.com/method/multi-head-attention&lt;/li&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/48508221&lt;/li&gt;
  &lt;li&gt;https://www.joshbelanich.com/self-attention-layer/&lt;/li&gt;
  &lt;li&gt;https://learning.rasa.com/transformers/kvq/&lt;/li&gt;
  &lt;li&gt;http://deeplearning.stanford.edu/tutorial/supervised/ConvolutionalNeuralNetwork/&lt;/li&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/352898810&lt;/li&gt;
  &lt;li&gt;https://towardsdatascience.com/beautifully-illustrated-nlp-models-from-rnn-to-transformer-80d69faf2109&lt;/li&gt;
  &lt;li&gt;https://medium.com/analytics-vidhya/understanding-q-k-v-in-transformer-self-attention-9a5eddaa5960&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="NLP" /><category term="自然语言处理" /><category term="神经网络" /><category term="Attention" /><category term="注意力" /><category term="AIGC" /><category term="Transformer" /><category term="自注意力" /><category term="Self-Attention" /><category term="多头注意力" /><category term="Multiple Head Attention" /><category term="残差网络" /><category term="Short-Cut" /><category term="位置编码" /><category term="Bahdanau" /><category term="Encoder-Decoder" /><summary type="html">基于 RNN 的 Encoder-Decoder 模型存在无法处理过长文本、并行性差的两大痛点。2015 年 Bahdanau 等人在其论文中提出 Attention 机制，再到 2017 年 Transformer 模型的论文《Attention is All You Need》横空出世，其并行速度极快，而且每两个词之间的词间距都是 1。此后 NLP 领域 Transformer 彻底成为主流。如果你已经了解 Encoder-Decoder 模型，本文将基于此带你深入浅出的搞清楚 Attention、Transformer。</summary></entry><entry><title type="html">Pathways 语言模型 (PaLM)：扩展到 5400 亿个参数以获得突破性性能</title><link href="https://www.mikecaptain.com/2023/01/20/pathways-language-model-palm-scaling-to/" rel="alternate" type="text/html" title="Pathways 语言模型 (PaLM)：扩展到 5400 亿个参数以获得突破性性能" /><published>2023-01-20T09:13:09+00:00</published><updated>2023-01-20T09:13:09+00:00</updated><id>https://www.mikecaptain.com/2023/01/20/pathways-language-model-palm-scaling-to</id><content type="html" xml:base="https://www.mikecaptain.com/2023/01/20/pathways-language-model-palm-scaling-to/">&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#使用-pathways-训练一个-5400-亿参数的语言模型&quot; id=&quot;markdown-toc-使用-pathways-训练一个-5400-亿参数的语言模型&quot;&gt;使用 Pathways 训练一个 5400 亿参数的语言模型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#语言推理和代码任务的突破性能力&quot; id=&quot;markdown-toc-语言推理和代码任务的突破性能力&quot;&gt;语言、推理和代码任务的突破性能力&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#语言理解与生成&quot; id=&quot;markdown-toc-语言理解与生成&quot;&gt;语言理解与生成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#推理&quot; id=&quot;markdown-toc-推理&quot;&gt;推理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#代码生成&quot; id=&quot;markdown-toc-代码生成&quot;&gt;代码生成&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#道德考量&quot; id=&quot;markdown-toc-道德考量&quot;&gt;道德考量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#结论和未来的工作&quot; id=&quot;markdown-toc-结论和未来的工作&quot;&gt;结论和未来的工作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#致谢&quot; id=&quot;markdown-toc-致谢&quot;&gt;致谢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;原文标题：Pathways Language Model (PaLM): Scaling to 540 Billion Parameters for Breakthrough Performance&lt;/li&gt;
  &lt;li&gt;原文链接：https://ai.googleblog.com/2022/04/pathways-language-model-palm-scaling-to.html&lt;/li&gt;
  &lt;li&gt;原文作者：Google Search 软件工程师 Sharan Narang 和 Aakanksha Chowdhery&lt;/li&gt;
  &lt;li&gt;原文日期：2022 年 4 月 4 日&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;近年来，为语言理解和生成而训练的大型神经网络在广泛的任务中取得了令人瞩目的成果。 GPT-3 首先展示了大型语言模型 (LLM) 可用于少样本学习，无需大规模任务特定数据收集或模型参数更新即可取得令人印象深刻的结果。 最近的 LLM，例如 GLaM、LaMDA、Gopher 和 Megatron-Turing NLG，通过缩放模型大小、使用稀疏激活模块以及在来自更多数据集的更大数据集上进行训练，在许多任务上取得了最先进的小样本结果。 来源多样。 然而，在我们推动模型规模的极限时，要理解小样本学习所出现的能力，还有很多工作要做。&lt;/p&gt;

&lt;p&gt;去年，Google Research 宣布了我们对 Pathways 的愿景，这是一种单一模型，可以在高效的同时跨领域和任务进行泛化。 实现这一愿景的一个重要里程碑是开发新的 Pathways 系统来为加速器编排分布式计算。 在“PaLM: Scaling Language Modeling with Pathways”中，我们介绍了 Pathways Language Model (PaLM)，这是一个 5400 亿参数、密集解码器的 Transformer 模型，使用 Pathways 系统训练，使我们能够有效地跨多个模型训练单个模型 TPU v4 Pod。 我们在数百个语言理解和生成任务上评估了 PaLM，发现它在大多数任务中都实现了最先进的小样本性能，在许多情况下都有很大的优势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-1.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随着模型规模的增加，跨任务的性能会提高，同时还会解锁新功能。&lt;/p&gt;

&lt;h2 id=&quot;使用-pathways-训练一个-5400-亿参数的语言模型&quot;&gt;使用 Pathways 训练一个 5400 亿参数的语言模型&lt;/h2&gt;

&lt;p&gt;PaLM 首次大规模使用 Pathways 系统将训练扩展到 6144 个芯片，这是迄今为止用于训练的最大的基于 TPU 的系统配置。 训练在两个 Cloud TPU v4 Pod 之间使用 Pod 级别的数据并行性进行扩展，同时在每个 Pod 内使用标准数据和模型并行性。 与大多数以前的 LLM 相比，这是规模的显着增加，这些 LLM 在单个 TPU v3 Pod（例如 GLaM、LaMDA）上进行训练，使用流水线并行性跨 GPU 集群（Megatron-Turing NLG）扩展到 2240 个 A100 GPU，或者 使用了多个 TPU v3 Pod（Gopher），最大规模为 4096 个 TPU v3 芯片。&lt;/p&gt;

&lt;p&gt;PaLM 实现了 57.8% 的硬件 FLOPs 利用率的训练效率，这是 LLM 在此规模上达到的最高水平。 这是由于结合了并行策略和 Transformer 块的重新制定，允许并行计算注意力和前馈层，从而实现 TPU 编译器优化的加速。&lt;/p&gt;

&lt;p&gt;PaLM 使用英语和多语言数据集的组合进行训练，这些数据集包括高质量的网络文档、书籍、维基百科、对话和 GitHub 代码。 我们还创建了一个“无损”词汇表，保留所有空格（对代码尤其重要），将词汇外的 Unicode 字符拆分为字节，并将数字拆分为单独的标记，每个标记一个。&lt;/p&gt;

&lt;h2 id=&quot;语言推理和代码任务的突破性能力&quot;&gt;语言、推理和代码任务的突破性能力&lt;/h2&gt;

&lt;p&gt;PaLM 在许多非常困难的任务上显示出突破性的能力。 我们在下面重点介绍了语言理解和生成、推理以及与代码相关的任务的几个示例。&lt;/p&gt;

&lt;h3 id=&quot;语言理解与生成&quot;&gt;语言理解与生成&lt;/h3&gt;

&lt;p&gt;我们在 29 个广泛使用的英语自然语言处理 (NLP) 任务上评估了 PaLM。 PaLM 540B 在 29 个跨越问答任务（开放域封闭- book variant）、完形填空和句子完成任务、Winograd 风格任务、上下文阅读理解任务、常识推理任务、SuperGLUE 任务和自然语言推理任务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 在 29 个基于英语的 NLP 任务上，PaLM 540B 的性能比之前最先进 (SOTA) 的结果有所提高。&lt;/p&gt;

&lt;p&gt;除了英语 NLP 任务外，PaLM 在多语言 NLP 基准测试中也表现出色，包括翻译，尽管只有 22% 的训练语料库是非英语的。&lt;/p&gt;

&lt;p&gt;我们还在 Beyond the Imitation Game Benchmark (BIG-bench) 上探索了 PaLM 的新兴和未来功能，这是最近发布的包含 150 多个新语言建模任务的套件，并发现 PaLM 实现了突破性的性能。 我们比较了 PaLM 与 Gopher 和 Chinchilla 的性能，在这些任务的 58 个公共子集中取平均值。 有趣的是，我们注意到 PaLM 作为规模函数的性能遵循与先前模型相似的对数线性行为，这表明规模带来的性能改进尚未达到稳定水平。 PaLM 540B 5-shot 的表现也优于人们要求解决相同任务的平均表现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;↑ PaLM 在 58 个 BIG-bench 任务的子集上的缩放行为。&lt;/p&gt;

&lt;p&gt;PaLM 在几个 BIG-bench 任务上展示了令人印象深刻的自然语言理解和生成能力。 为了考试例如，该模型可以区分因果关系，理解适当上下文中的概念组合，甚至可以根据表情符号猜测电影。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-4.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 展示 PaLM 540B 在 BIG-bench 任务上的 1-shot 性能的示例：标记因果关系、概念理解、根据表情符号猜测电影，以及寻找同义词和反事实。&lt;/p&gt;

&lt;h3 id=&quot;推理&quot;&gt;推理&lt;/h3&gt;

&lt;p&gt;通过将模型规模与思维链提示相结合，PaLM 在需要多步算术或常识推理的推理任务上显示出突破性的能力。 之前的 LLM，如 Gopher，认为模型规模在提高性能方面的好处较少。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 标准提示与思维链提示的示例小学数学问题。 思维链提示将多步推理问题的提示分解为中间步骤（以黄色突出显示），类似于人处理它的方式。&lt;/p&gt;

&lt;p&gt;我们在三个算术数据集和两个常识推理数据集上观察到 PaLM 540B 结合思维链提示的强大性能。 例如，通过 8 次提示，PaLM 解决了 GSM8K 中 58% 的问题，GSM8K 是数千个具有挑战性的小学水平数学问题的基准，优于之前通过微调 GPT-3 175B 模型获得的 55% 的最高分 具有 7500 个问题的训练集，并将其与外部计算器和验证器相结合。&lt;/p&gt;

&lt;p&gt;这个新分数特别有趣，因为它接近 9-12 岁儿童解决问题的平均 60%，他们是问题集的目标受众。 我们怀疑 PaLM 词汇表中的数字单独编码有助于实现这些性能改进。&lt;/p&gt;

&lt;p&gt;值得注意的是，PaLM 甚至可以为需要多步逻辑推理、世界知识和深度语言理解的复杂组合的场景生成明确的解释。 例如，它可以为网络上找不到的小说笑话提供高质量的解释。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;↑ PaLM 用两次提示解释了一个原创笑话。&lt;/p&gt;

&lt;h3 id=&quot;代码生成&quot;&gt;代码生成&lt;/h3&gt;

&lt;p&gt;LLM 也被证明 [1, 2, 3, 4] 可以很好地泛化到编码任务，例如编写给定自然语言描述的代码（文本到代码），将代码从一种语言翻译成另一种语言，以及修复编译错误 （代码到代码）。&lt;/p&gt;

&lt;p&gt;PaLM 540B 在单个模型中跨编码任务和自然语言任务显示出强大的性能，即使它在预训练数据集中只有 5% 的代码。 它的 few-shot 性能尤其出色，因为它与经过微调的 Codex 12B 相当，同时使用的 Python 代码少了 50 倍进行训练。 这一结果强化了之前的发现，即较大的模型可以比较小的模型更有效地采样，因为它们更有效地从其他编程语言和自然语言数据中迁移学习。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-7.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 在文本到代码任务（例如 GSM8K-Python 和 HumanEval）和代码到代码任务（例如 Transcoder）上经过微调的 PaLM 540B 模型示例。&lt;/p&gt;

&lt;p&gt;通过在纯 Python 代码数据集上微调 PaLM，我们还看到了性能的进一步提高，我们称之为 PaLM-Coder。 对于名为 DeepFix 的示例代码修复任务，其目标是修改最初损坏的 C 程序，直到它们成功编译，PaLM-Coder 540B 展示了令人印象深刻的性能，实现了 82.1% 的编译率，优于之前的 71.7% 的现有技术水平 . 这为修复软件开发过程中出现的更复杂的错误提供了机会。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-04-05-pathways-language-model-palm-scaling-to-8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;来自 DeepFix 代码修复任务的示例。 经过微调的 PaLM-Coder 540B 将编译错误（左，红色）修复为可编译的代码版本（右）。&lt;/p&gt;

&lt;h2 id=&quot;道德考量&quot;&gt;道德考量&lt;/h2&gt;

&lt;p&gt;最近的研究强调了与接受网络文本培训的法学硕士相关的各种潜在风险。&lt;/p&gt;

&lt;p&gt;通过模型卡和数据表等透明工件分析和记录此类潜在的不良风险至关重要，其中还包括有关预期用途和测试的信息。 为此，我们的论文提供了数据表、模型卡和 Responsible AI 基准测试结果，并报告了对数据集和模型输出的偏差和风险的全面分析。 虽然分析有助于概述模型的一些潜在风险，但针对特定领域和任务的分析对于真正校准、情境化和减轻可能的危害至关重要。 进一步了解这些模型的风险和好处是正在进行的研究的主题，同时开发可扩展的解决方案可以防止恶意使用语言模型。&lt;/p&gt;

&lt;h2 id=&quot;结论和未来的工作&quot;&gt;结论和未来的工作&lt;/h2&gt;

&lt;p&gt;PaLM 展示了 Pathways 系统在两个 TPU v4 Pod 上扩展到数千个加速器芯片的扩展能力，方法是使用经过充分研究、完善的密集解码器 Transformer 模型有效地训练一个 5400 亿个参数模型。 突破模型规模的极限，使 PaLM 在各种自然语言处理、推理和代码任务中实现突破性的小样本性能。&lt;/p&gt;

&lt;p&gt;PaLM 通过以下方式为功能更强大的模型铺平了道路将扩展能力与新颖的架构选择和培训方案相结合，使我们更接近 Pathways 的愿景：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“使单个 AI 系统能够概括数千或数百万个任务，理解不同类型的数据，并以惊人的效率完成这些任务。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;致谢&quot;&gt;致谢&lt;/h2&gt;

&lt;p&gt;PaLM 是 Google Research 和整个 Alphabet 的许多团队共同努力的结果。 我们要感谢整个 PaLM 团队的贡献：Jacob Devlin、Maarten Bosma、Gaurav Mishra、Adam Roberts、Paul Barham、Hyung Won Chung、Charles Sutton、Sebastian Gehrmann、Parker Schuh、Kensen Shi、Sasha Tsvyashchenko、Joshua Maynez , Abhishek Rao, Parker Barnes, Yi Tay, Noam Shazeer, Vinodkumar Prabhakaran, Emily Reif, Nan Du, Ben Hutchinson, Reiner Pope, James Bradbury, Jacob Austin, Michael Isard, Guy Gur-Ari, Pengcheng Yin, Toju Duke, Anselm Levskaya , Sanjay Ghemawat, Sunipa Dev, Henryk Michalewski, Xavier Garcia, Vedant Misra, Kevin Robinson, Liam Fedus, Denny Zhou, Daphne Ippolito, David Luan, Hyeontaek Lim, Barret Zoph, Alexander Spiridonov, Ryan Sepassi, David Dohan, Shivani Agrawal, Mark Omernick、Andrew Dai、Thanumalayan Sankaranarayana Pillai、Marie Pellat、Aitor Lewkowycz、Erica Moreira、Rewon Child、Oleksandr Polozov、Katherine Lee、Zongwei Zhou、Xuezhi Wang、Brennan Saeta、Mark Diaz、Orhan Firat、Michele Catasta 和 Jason Wei。 PaLM 建立在谷歌许多团队的工作之上，我们特别要感谢 T5X 团队、Pathways 基础设施团队、JAX 团队、Flaxformer 团队、XLA 团队、Plaque 团队、Borg 团队，以及 数据中心网络基础架构团队。 我们要感谢这篇博文的共同作者 Alexander Spiridonov 和 Maysam Moussalem，以及 Josh Newlan 和 Tom Small 在这篇博文中提供的图像和动画。 最后，我们要感谢我们的项目顾问：Noah Fiedel、Slav Petrov、Jeff Dean、Douglas Eck 和 Kathy Meier-Hellstern。&lt;/p&gt;</content><author><name>Google Research | [译] AI &amp; 麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="NLP" /><category term="自然语言处理" /><category term="神经网络" /><category term="Attention" /><category term="注意力" /><category term="AIGC" /><category term="Transformer" /><category term="自注意力" /><category term="Self-Attention" /><category term="多头注意力" /><category term="Multiple Head Attention" /><category term="残差网络" /><category term="Short-Cut" /><category term="位置编码" /><category term="Bahdanau" /><category term="Encoder-Decoder" /><summary type="html">本文目录</summary></entry><entry><title type="html">三万字长文！LSTM 之父 Jürgen 带我们回顾深度学习发展史</title><link href="https://www.mikecaptain.com/2023/01/14/juergen-deep-learning-history/" rel="alternate" type="text/html" title="三万字长文！LSTM 之父 Jürgen 带我们回顾深度学习发展史" /><published>2023-01-14T20:21:55+00:00</published><updated>2023-01-14T20:21:55+00:00</updated><id>https://www.mikecaptain.com/2023/01/14/juergen-deep-learning-history</id><content type="html" xml:base="https://www.mikecaptain.com/2023/01/14/juergen-deep-learning-history/">&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文译自 LSTM 作者 &lt;a href=&quot;https://people.idsia.ch/~juergen/deep-learning-history.html#gan&quot;&gt;Jürgen Schmidhuber, KAUST AII, Swiss AI Lab IDSIA, USI&lt;/a&gt;，中文译文由 AI 及麦克船长完成翻译。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#现代人工智能和深度学习的注释历史&quot; id=&quot;markdown-toc-现代人工智能和深度学习的注释历史&quot;&gt;现代人工智能和深度学习的注释历史&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#介绍&quot; id=&quot;markdown-toc-介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1676向后信用分配的链式规则&quot; id=&quot;markdown-toc-1676向后信用分配的链式规则&quot;&gt;1676：向后信用分配的链式规则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1800第一个神经网络线性回归浅层学习&quot; id=&quot;markdown-toc-1800第一个神经网络线性回归浅层学习&quot;&gt;~1800：第一个神经网络/线性回归/浅层学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1920-1925第一个循环网络架构&quot; id=&quot;markdown-toc-1920-1925第一个循环网络架构&quot;&gt;1920-1925：第一个循环网络架构&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1972首次发布学习人工-rnn&quot; id=&quot;markdown-toc-1972首次发布学习人工-rnn&quot;&gt;~1972：首次发布学习人工 RNN&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1958-年多层前馈神经网络没有深度学习&quot; id=&quot;markdown-toc-1958-年多层前馈神经网络没有深度学习&quot;&gt;1958 年：多层前馈神经网络（没有深度学习）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1965-年第一次深度学习&quot; id=&quot;markdown-toc-1965-年第一次深度学习&quot;&gt;1965 年：第一次深度学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1967-68通过随机梯度下降进行深度学习&quot; id=&quot;markdown-toc-1967-68通过随机梯度下降进行深度学习&quot;&gt;1967-68：通过随机梯度下降进行深度学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1970-年反向传播-1982-年对于神经网络-1960-年先驱&quot; id=&quot;markdown-toc-1970-年反向传播-1982-年对于神经网络-1960-年先驱&quot;&gt;1970 年：反向传播。 1982 年：对于神经网络。 1960 年：先驱。&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1979-年第一个深度卷积神经网络1969-年relu&quot; id=&quot;markdown-toc-1979-年第一个深度卷积神经网络1969-年relu&quot;&gt;1979 年：第一个深度卷积神经网络（1969 年：ReLU）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1980-年代至-90-年代图形神经网络随机增量规则dropout&quot; id=&quot;markdown-toc-1980-年代至-90-年代图形神经网络随机增量规则dropout&quot;&gt;1980 年代至 90 年代：图形神经网络/随机增量规则（Dropout）/…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1990-年-2-月生成对抗网络好奇心&quot; id=&quot;markdown-toc-1990-年-2-月生成对抗网络好奇心&quot;&gt;1990 年 2 月：生成对抗网络/好奇心&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1990-年-2-月生成对抗网络好奇心-1&quot; id=&quot;markdown-toc-1990-年-2-月生成对抗网络好奇心-1&quot;&gt;1990 年 2 月：生成对抗网络/好奇心&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1991-年-3-月具有线性化自注意力的变形金刚&quot; id=&quot;markdown-toc-1991-年-3-月具有线性化自注意力的变形金刚&quot;&gt;1991 年 3 月：具有线性化自注意力的变形金刚&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1991-年-4-月通过自监督预训练进行深度学习&quot; id=&quot;markdown-toc-1991-年-4-月通过自监督预训练进行深度学习&quot;&gt;1991 年 4 月：通过自监督预训练进行深度学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1991-年-6-月基本问题梯度消失&quot; id=&quot;markdown-toc-1991-年-6-月基本问题梯度消失&quot;&gt;1991 年 6 月：基本问题：梯度消失&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1991-年-6-月lstm--highway-nets--resnets-的根源&quot; id=&quot;markdown-toc-1991-年-6-月lstm--highway-nets--resnets-的根源&quot;&gt;1991 年 6 月：LSTM / Highway Nets / ResNets 的根源&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1995神经概率语言模型&quot; id=&quot;markdown-toc-1995神经概率语言模型&quot;&gt;1995：神经概率语言模型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lstm--highway-net-原理是现代深度学习的核心&quot; id=&quot;markdown-toc-lstm--highway-net-原理是现代深度学习的核心&quot;&gt;LSTM / Highway Net 原理是现代深度学习的核心&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#是硬件笨蛋&quot; id=&quot;markdown-toc-是硬件笨蛋&quot;&gt;是硬件，笨蛋！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#不要忽视-1931-年以来的人工智能理论&quot; id=&quot;markdown-toc-不要忽视-1931-年以来的人工智能理论&quot;&gt;不要忽视 1931 年以来的人工智能理论&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#从大爆炸到遥远的未来的更广泛的历史背景&quot; id=&quot;markdown-toc-从大爆炸到遥远的未来的更广泛的历史背景&quot;&gt;从大爆炸到遥远的未来的更广泛的历史背景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#致谢&quot; id=&quot;markdown-toc-致谢&quot;&gt;致谢&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#555-参考文献调查-dl1-中还有更多参考文献&quot; id=&quot;markdown-toc-555-参考文献调查-dl1-中还有更多参考文献&quot;&gt;555+ 参考文献（调查 [DL1] 中还有更多参考文献）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;现代人工智能和深度学习的注释历史&quot;&gt;现代人工智能和深度学习的注释历史&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;。 机器学习（ML）是信用分配的科学：在观察中发现预测行动后果的模式，并帮助提高未来的表现。信用分配也是人类理解世界如何运作的必要条件，不仅对于每天生活中的个人，而且对于像历史学家这样的学术专业人士来说也是如此。在这里，我主要关注现代人工智能（AI）的历史，它由人工神经网络（NNs）和深度学习（DL）主导，在概念上更接近早期的控制论，而不是自1956年以来被称为 AI（例如专家系统和逻辑编程）的领域。现代AI的历史重点将强调传统AI教科书以外的突破，特别是当今NNs的数学基础，如链式规则（1676 年），第一个NNs（线性回归，约1800年）和第一个工作的深度学习器（1965-）。从2022年的角度来看，我提供了一个时间表，阐述了NNs，深度学习，AI，计算机科学和数学领域中事后看来最重要的相关事件，并对那些奠定了这一领域基础的人进行了赞扬。文章中包含了许多与我的AI博客相关的概述网站的超链接。它还揭示了深度学习的一些流行但是误导性的历史条目，并补充了我之前的深度学习调查[DL1]，其中提供了数百条额外的参考资料。最后，为了结束这篇文章，我将把事情放在更广泛的历史背景中，跨越从大爆炸开始到宇宙将比现在老很多倍的时间。本文也是我即将出版的AI书籍的一章的草稿。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;免责声明&lt;/strong&gt;。 有人说深度学习的历史不应该由帮助塑造它的人来写——“你是历史的一部分，而不是历史学家。”[CONN21] 我不同意这种观点。 由于我似乎比其他人更了解深度学习的历史，[S20][DL3,DL3a][T22][DL1-2] 我认为记录和推广这些知识是我的责任，即使这似乎暗示着与 兴趣，因为这意味着突出提及我自己团队的工作，因为（截至 2022 年）引用最多的神经网络都是基于它的。[MOST] 未来的人工智能历史学家可能会纠正任何时代特定的潜在偏见。&lt;/p&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;随着时间的推移，某些历史事件在某些旁观者眼中变得更加重要。 例如，138 亿年前的大爆炸现在被广泛认为是万物历史上的重要时刻。 然而，直到几十年前，地球人还完全不知道它，长期以来，地球人对宇宙的起源抱有相当错误的看法（有关世界历史的更多信息，请参见最后一节）。 目前接受的许多更有限主题的历史是类似激进修订的结果。 在这里，我将重点关注人工智能 (AI) 的历史，它也与过去不同。&lt;/p&gt;

&lt;p&gt;1980 年代写的 AI 历史会强调定理证明、[GOD][GOD34][ZU48][NS56] 逻辑编程、专家系统和启发式搜索等主题。[FEI63,83][LEN83] 这将是 与 1956 年达特茅斯会议的主题一致，约翰麦卡锡在会上创造了“人工智能”一词，用来描述一个旧的研究领域重新引起人们的兴趣。 实用 AI 至少可以追溯到 1914 年，当时 Leonardo Torres y Quevedo（见下文）构建了第一个工作的国际象棋终端游戏玩家 [BRU1-4]（当时国际象棋被认为是一种仅限于智能生物领域的活动）。 AI 理论至少可以追溯到 1931-34 年，当时 Kurt Gödel（见下文）确定了任何类型的基于计算的 AI 的基本限制。[GOD][BIB3][GOD21,a,b]&lt;/p&gt;

&lt;p&gt;2000 年代初期编写的 AI 历史会更加强调支持向量机和内核方法等主题，[SVM1-4] 贝叶斯（实际上是拉普拉斯或可能是桑德森[STI83-85]）推理[BAY1-8][ FI22]和其他概率论和统计概念，[MM1-5][NIL98][RUS95]决策树，例如[MIT97]集成方法，[ENS1-4]群体智能，[SW1]和进化计算。&lt;a href=&quot;[TUR1],未发表&quot;&gt;EVO1 -7&lt;/a&gt;为什么？ 因为在当时，此类技术推动了许多成功的 AI 应用。&lt;/p&gt;

&lt;p&gt;写于 2020 年代的 AI 历史必须强调诸如更古老的链式法则 [LEI07] 和通过梯度下降训练的深度非线性人工神经网络 (NN) [GD’] 等概念，特别是基于反馈的循环网络，它们是 其程序是权重矩阵的通用计算机。[AC90] 为什么？ 因为最近许多最著名和最商业化的 AI 应用程序都依赖于它们。[DL4]&lt;/p&gt;

&lt;p&gt;这样的 NN 概念实际上在概念上接近 MACY 会议 (1946-1953)[MACY51] 和 1951 年关于计算机器和人类思想的巴黎会议的主题，现在通常被视为关于 AI 的第一次会议。[AI51][BRO21][ BRU4] 然而，在 1956 年之前，现在称为 AI 的大部分内容仍被称为控制论，重点与基于神经网络“深度学习”的现代 AI 非常一致。[DL1-2][DEC]&lt;/p&gt;

&lt;p&gt;过去的一些神经网络研究受到人脑的启发，人脑有大约 1000 亿个神经元，每个神经元平均连接到 10,000 个其他神经元。 有些是输入神经元，为其余神经元提供数据（声音、视觉、触觉、疼痛、饥饿）。 其他的是控制肌肉的输出神经元。 大多数神经元隐藏在两者之间，思考发生的地方。 你的大脑显然通过改变连接的强度或权重来学习，这决定了神经元相互影响的强度，并且似乎编码了你一生的所有经历。 与我们的人工 NN 类似，它比以前的方法学习得更好，可以识别语音或手写或视频、最小化痛苦、最大化快乐、驾驶汽车等。[MIR]（第 0 节）[DL1-4]&lt;/p&gt;

&lt;p&gt;NN 如何学习所有这些？ 在下文中，我将强调使这一切成为可能的重要历史贡献。 由于现代 AI 的几乎所有基本概念都源于前几千年，因此下面的章节标题只强调到 2000 年的发展。然而，许多章节都提到了这项工作在新千年的后期影响，这带来了许多 硬件和软件的改进，有点像 20 世纪对 19 世纪发明的汽车进行了大量改进。&lt;/p&gt;

&lt;p&gt;本文还揭穿了一个经常重复的、误导性的“深度学习的历史”[S20][DL3,3a]，它忽略了下面提到的大部分开创性工作。[T22]见脚注 6。本文的标题图片是一个 对一条错误的常识的反应，该常识说 [T19] 使用神经网络“作为帮助计算机识别模式和模拟人类智能的工具是在 1980 年代引入的”，尽管这种神经网络早在 1980 年代就出现了。 [T22 ] 确保在所有科学中正确分配学分对我来说非常重要——就像对所有科学家一样——我鼓励有兴趣的读者也看看我在《科学》和《自然》杂志上就此发表的一些信件，例如， 关于航空史，[NASC1-2] 电话，[NASC3] 计算机，[NASC4-7] 弹性机器人，[NASC8] 和 19 世纪的科学家。[NASC9]&lt;/p&gt;

&lt;p&gt;最后，为了圆满结束，我将把事情放在更广泛的历史背景下，跨越从大爆炸到宇宙比现在古老许多倍的时间。&lt;/p&gt;

&lt;h2 id=&quot;1676向后信用分配的链式规则&quot;&gt;1676：向后信用分配的链式规则&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;莱布尼茨，大约 1670 年的计算机科学之父，于 1676 年发表了链式法则&lt;/p&gt;

&lt;p&gt;1676年，戈特弗里德·威廉·莱布尼茨在回忆录中发表了微积分的链式法则（尽管万物皆有符号错误！）； Guillaume de l’Hopital 在他 1696 年关于莱布尼茨微积分的教科书中对此进行了描述。[LEI07-10][L84] 今天，这条规则是深度神经网络 (NN) 中信用分配的核心。 为什么？ 最流行的 NN 具有计算来自其他神经元的输入的可微函数的节点或神经元，这些节点或神经元又计算来自其他神经元的输入的可微函数，等等。 问题是：如果我们稍微修改早期函数的参数或权重，最终函数的输出将如何变化？ 链式法则是计算答案的基本工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-3.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cauchy 这个答案被梯度下降 (GD) 技术使用，显然是由 Augustin-Louis Cauchy 于 1847 年首次提出 [GD’]（后来由 Jacques Hadamard [GD’’] 提出；称为 SGD 的随机版本归功于 Herbert 罗宾斯和萨顿门罗 (1951)[STO51-52])。 为了教会神经网络将来自训练集的输入模式转换为所需的输出模式，所有神经网络权重都朝着最大局部改进的方向迭代改变一点，以创建稍微更好的神经网络，依此类推，直到获得令人满意的解决方案 成立。&lt;/p&gt;

&lt;p&gt;脚注 1. 1684 年，莱布尼茨也是第一个发表“现代”微积分的人；[L84][SON18][MAD05][LEI21,a,b] 后来艾萨克·牛顿也因其未发表的工作而受到赞誉。[SON18] 他们的优先事项 然而，争议 [SON18] 并不包含链式法则。[LEI07-10] 当然，两者都建立在早期工作的基础上：在公元前 2 世纪，阿基米德（也许是有史以来最伟大的科学家 [ARC06]）为 无穷小并发表了微积分的特例，例如球体和抛物线段，建立在古希腊更早的工作之上。 14 世纪，Sangamagrama 的 Madhava 和印度喀拉拉邦学派的同事也进行了微积分的基础工作。[MAD86-05]&lt;/p&gt;

&lt;p&gt;脚注 2. 值得注意的是，莱布尼茨（1646-1714 年，又名“世界上第一位计算机科学家”[LA14]）也奠定了现代计算机科学的基础。 他设计了第一台可以执行所有四种算术运算的机器（1673），以及第一台带有内部存储器的机器。[BL16] 他描述了二进制计算机的原理（1679）[L79][L03][LA14][HO66][ LEI21,a,b] 几乎被所有现代机器所采用。 他的正式思想代数 (1686)[L86][WI48] 与后来的布尔代数 (1847) 演绎等价[LE18]。[BOO] 他的 Characteristica Universalis &amp;amp; Calculus Ratiocinator 旨在通过计算回答所有可能的问题；[WI48 】 他的《微积分！ 是启蒙时代的标志性名言之一。 值得注意的是，他还负责链式法则，这是“现代”深度学习的基础，是现代计算机科学的一个重要子领域。&lt;/p&gt;

&lt;p&gt;脚注 3. 有人声称反向传播算法（进一步讨论；现在广泛用于训练深度神经网络）只是 Leibniz (1676) &amp;amp; L’Hopital (1696) 的链式法则。[CONN21] 不，这是有效的方法 将链式法则应用于具有可微分节点的大型网络（也有许多低效的方法）。[T22] 直到 1970 年才发布，如下所述。[BP1,4,5]&lt;/p&gt;

&lt;h2 id=&quot;1800第一个神经网络线性回归浅层学习&quot;&gt;~1800：第一个神经网络/线性回归/浅层学习&lt;/h2&gt;

&lt;p&gt;1805 年，Adrien-Marie Legendre 发表了现在通常称为线性神经网络 (NN) 的内容。 约翰·卡尔·弗里德里希·高斯 (Johann Carl Friedrich Gauss) 也因在大约 1795 年完成的早期未发表的工作而受到赞誉&lt;/p&gt;

&lt;p&gt;1805 年，Adrien-Marie Legendre 发表了现在通常称为线性神经网络 (NN) 的内容。 后来，约翰·卡尔·弗里德里希·高斯 (Johann Carl Friedrich Gauss) 也因在大约 1795 年完成的这项未发表的工作而受到赞誉。[STI81]&lt;/p&gt;

&lt;p&gt;这个来自 2 个多世纪前的神经网络有两层：一个具有多个输入单元的输入层和一个输出层。 为简单起见，我们假设后者由单个输出单元组成。 每个输入单元都可以保存一个实数值，并通过具有实数值权重的连接连接到输出。 NN 的输出是输入与其权重的乘积之和。 给定输入向量的训练集和每个向量的期望目标值，调整 NN 权重，使 NN 输出与相应目标之间的平方误差之和最小化。&lt;/p&gt;

&lt;p&gt;1795 年，高斯使用了现在称为线性神经网络的东西，但勒让德于 1805 年首次发表了它。高斯通常被称为自古以来最伟大的数学家，当然，那时候还不叫神经网络。 它被称为最小二乘法，也被广泛称为线性回归。 但它在数学上与今天的线性神经网络相同：相同的基本算法、相同的误差函数、相同的自适应参数/权重。 这种简单的神经网络执行“浅层学习”（与具有许多非线性层的“深度学习”相反）。 事实上，许多神经网络课程都是从介绍这种方法开始的，然后转向更复杂、更深入的神经网络。&lt;/p&gt;

&lt;p&gt;也许第一个通过浅层学习进行模式识别的著名例子可以追溯到 200 多年前：1801 年通过高斯重新发现矮行星谷神星，他从以前的天文观测中获得了数据点，然后使用各种技巧来调整模型的参数 预测器，它基本上学会了从训练数据中进行归纳以正确预测谷神星的新位置。&lt;/p&gt;

&lt;p&gt;脚注 4. 今天，所有技术学科的学生都必须上数学课，尤其是分析、线性代数和统计学。 在所有这些领域中，重要的结果和方法（至少部分）归功于高斯：代数基本定理、高斯消去法、统计的高斯分布等。这位号称“自古以来最伟大的数学家”的人也开创了微分 几何、数论（他最喜欢的科目）和非欧几何。 此外，他对天文学和物理学做出了重大贡献。 如果没有他的成果，包括 AI 在内的现代工程将不可想象。&lt;/p&gt;

&lt;p&gt;脚注 5. 神经网络的“浅层学习”在 1950 年代后期经历了新一波的流行。 Rosenblatt 的感知器 (1958)[R58] 将上述线性 NN 与输出阈值函数相结合以获得模式分类器（比较他在下面讨论的多层网络上更先进的工作）。 Joseph[R61] 提到了 Farley &amp;amp; Clark 更早的类似感知器的设备。 Widrow &amp;amp; Hoff 的类似 Adaline 在 1962 年学到。[WID62]&lt;/p&gt;

&lt;h2 id=&quot;1920-1925第一个循环网络架构&quot;&gt;1920-1925：第一个循环网络架构&lt;/h2&gt;

&lt;p&gt;1924 年，Ernst Ising 发表了第一个循环网络架构：Ising 模型或 Lenz-Ising 模型。 与人脑相似，但与更有限的前馈神经网络 (FNN) 不同，循环神经网络 (RNN) 具有反馈连接，因此可以遵循从某些内部节点到其他节点的定向连接，并最终在起点处结束。 这对于在序列处理期间实现对过去事件的记忆是必不可少的。&lt;/p&gt;

&lt;p&gt;第一个非学习 RNN 架构（Ising 模型或 Lenz-Ising 模型）是由物理学家 Ernst Ising 和 Wilhelm Lenz 在 1920 年代引入和分析的[L20][I24,I25][K41][W45][T22] 它 响应输入条件进入平衡状态，并且是第一个学习 RNN 的基础（见下文）。&lt;/p&gt;

&lt;p&gt;非学习 RNN 也在 1943 年由神经科学家 Warren McCulloch 和 Walter Pitts [MC43] 进行了讨论，并在 1956 年由 Stephen Cole Kleene 进行了正式分析。 [K56]&lt;/p&gt;

&lt;p&gt;1972 年，Shun-Ichi Amari 使 Ising 递归网络自适应。 这是第一个发表的学习人工递归神经网络&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1972首次发布学习人工-rnn&quot;&gt;~1972：首次发布学习人工 RNN&lt;/h3&gt;

&lt;p&gt;1972 年，Shun-Ichi Amari 使 Lenz-Ising 循环架构具有自适应性，这样它就可以通过改变连接权重来学习将输入模式与输出模式相关联。[AMH1] 另见 Stephen Grossberg 关于生物网络的工作，[GRO69] David Marr 的 [MAR71]和Teuvo Kohonen的[KOH72]工作，以及Kaoru Nakano的学习RNN。[NAK72]&lt;/p&gt;

&lt;p&gt;艾伦·图灵
10 年后，Amari 网络被重新发布（并分析了它的存储容量）。[AMH2] 有人称它为 Hopfield 网络（！）或 Amari-Hopfield 网络。[AMH3] 它不处理序列，但在响应中达到平衡 到静态输入模式。 然而，Amari (1972) 也对其进行了序列处理推广[AMH1]&lt;/p&gt;

&lt;p&gt;值得注意的是，早在 1948 年，艾伦图灵就提出了与人工进化和学习 RNN 相关的想法。 然而，这在几十年后首次发表，[TUR1] 这解释了他在这里思想的晦涩。[TUR21]（边注：有人指出，著名的“图灵测试”实际上应该称为“笛卡尔测试” .[TUR3,a,b][TUR21])&lt;/p&gt;

&lt;p&gt;今天最流行的RNN就是下面提到的长短期记忆（LSTM），它已经成为20世纪被引用最多的NN[MOST]&lt;/p&gt;

&lt;h2 id=&quot;1958-年多层前馈神经网络没有深度学习&quot;&gt;1958 年：多层前馈神经网络（没有深度学习）&lt;/h2&gt;

&lt;p&gt;1958 年，弗兰克·罗森布拉特 (Frank Rosenblatt) 拥有多层感知器，其最后一层学习&lt;/p&gt;

&lt;p&gt;1958 年，Frank Rosenblatt 不仅结合了线性 NN 和阈值函数（参见 1800 年以来的浅层学习部分），他还有更有趣、更深层的多层感知器 (MLP)。[R58] 他的 MLP 有一个非学习的第一层 随机权重和自适应输出层。 虽然这还不是深度学习，因为只有最后一层学习了，[DL1] Rosenblatt 基本上拥有了后来被重新命名为极限学习机 (ELM) 的东西，但没有适当的归因。[ELM1-2][CONN21][T22]&lt;/p&gt;

&lt;p&gt;1961 年，Karl Steinbuch [ST61-95] 和 Roger David Joseph [R61] (1961) 也讨论了 MLP。 另见 Oliver Selfridge 的多层 Pandemonium [SE59] (1959)。&lt;/p&gt;

&lt;p&gt;Rosenblatt (1962) 甚至写了关于带有隐藏层的 MLP 中的“反向传播错误”[R62]，尽管他还没有针对深度 MLP 的通用深度学习算法。 现在称为反向传播的东西完全不同，它于 1970 年首次发布，如下所述。[BP1-BP5][BPA-C]&lt;/p&gt;

&lt;p&gt;今天，最流行的 FNN 是基于 LSTM 的 Highway Net（下文提到）的一个版本，称为 ResNet，[HW1-3]，它已成为 21 世纪被引用最多的 NN。[MOST]&lt;/p&gt;

&lt;h2 id=&quot;1965-年第一次深度学习&quot;&gt;1965 年：第一次深度学习&lt;/h2&gt;

&lt;p&gt;1965 年，Alexey Ivakhnenko 和 Valentin Lapa 推出了第一个适用于具有任意多个隐藏层的深度 MLP 的深度学习算法
深度前馈网络架构的成功学习始于 1965 年的乌克兰（当时的苏联），当时 Alexey Ivakhnenko 和 Valentin Lapa 为具有任意多个隐藏层（已经包含现在流行的乘法门）的深度 MLP 引入了第一个通用的工作学习算法 .[DEEP1-2][DL1-2][FDL] 1971年的一篇论文[DEEP2]已经描述了一个8层的深度学习网络，用他们被高度引用的方法训练，这种方法在新千年仍然很流行，[DL2]尤其是 在东欧，那里诞生了很多机器学习。[MIR]（第 1 节）[R8]&lt;/p&gt;

&lt;p&gt;给定一组具有相应目标输出向量的输入向量训练集，层逐渐增长并通过回归分析进行训练，然后借助单独的验证集进行修剪，其中正则化用于清除多余的单元。 层数和每层单元以问题相关的方式学习。&lt;/p&gt;

&lt;p&gt;与后来的深度神经网络一样，Ivakhnenko 的网络学会了为传入数据创建分层的、分布式的、内部表示。&lt;/p&gt;

&lt;p&gt;他没有称它们为深度学习神经网络，但它们就是这样。 事实上，“深度学习”这个古老的术语最早是由 Dechter (1986) 引入机器学习的，Aizenberg 等人 (2000) 引入神经网络的。[DL2]（边注：我们 2005 年关于深度学习的论文 [DL6 ,6a] 是第一本机器学习出版物，标题中包含“深入学习”这个词组合。[T22])&lt;/p&gt;

&lt;h2 id=&quot;1967-68通过随机梯度下降进行深度学习&quot;&gt;1967-68：通过随机梯度下降进行深度学习&lt;/h2&gt;

&lt;p&gt;1967-68 年，Shun-Ichi Amari 通过随机梯度下降训练深度 MLP
Ivakhnenko 和 Lapa（1965 年，见上文）逐层训练他们的深层网络。 然而，在 1967 年，Shun-Ichi Amari 建议通过随机梯度下降 (SGD)[GD1] 从头开始以非增量端到端方式训练多层 MLP，这是 Robbins 和 Monro 于 1951 年提出的一种方法。 STO51-52]&lt;/p&gt;

&lt;p&gt;Amari 的实现 [GD2,GD2a]（与他的学生 Saito）在具有两个可修改层的五层 MLP 中学习了内部表示，该层被训练为对非线性可分离模式类进行分类。 那时候的计算成本是今天的数十亿倍。&lt;/p&gt;

&lt;p&gt;另见 Iakov Zalmanovich Tsypkin 更早的关于非线性系统的基于梯度下降的在线学习的工作。[GDa-b]&lt;/p&gt;

&lt;p&gt;值得注意的是，如上所述，Amari 还在 1972 年发表了学习 RNN。[AMH1]&lt;/p&gt;

&lt;h2 id=&quot;1970-年反向传播-1982-年对于神经网络-1960-年先驱&quot;&gt;1970 年：反向传播。 1982 年：对于神经网络。 1960 年：先驱。&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-12.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;谁发明了反向传播？&lt;/p&gt;

&lt;p&gt;1970 年，Seppo Linnainmaa 是第一个发布现在称为反向传播的算法，这是一种著名的可微节点网络信用分配算法，[BP1,4,5] 也称为“自动微分的反向模式”。 它现在是广泛使用的神经网络软件包的基础，例如 PyTorch 和谷歌的 Tensorflow。&lt;/p&gt;

&lt;p&gt;1960年，Henry J. Kelley在控制理论领域有了反向传播的先驱
1982 年，Paul Werbos 在他 1974 年的论文中提出了使用该方法训练神经网络，[BP2] 扩展了思想。&lt;/p&gt;

&lt;p&gt;1960 年，Henry J. Kelley 在控制理论领域已经有了反向传播的先驱；[BPA] 另请参阅 Stuart Dreyfus 和 Arthur E. Bryson 在 1960 年代早期的后期工作。[BPB][BPC][R7] 不同于 Linnainmaa 的一般方法，[BP1] 1960 年代的系统[BPA-C] 通过标准雅可比矩阵计算从一个“阶段”到前一个“阶段”反向传播导数信息，既没有解决跨多个阶段的直接链接，也没有解决由于网络导致的潜在额外效率增益 稀疏性。&lt;/p&gt;

&lt;p&gt;反向传播本质上是为深度网络实施莱布尼茨链式法则 [LEI07-10] (1676)（见上文）的有效方式。 Cauchy 的梯度下降 [GD’] 使用它在许多试验过程中逐渐削弱某些 NN 连接并加强其他连接，这样 NN 的行为越来越像某个老师，可能是一个人，也可能是另一个 NN，[UN- UN2] 或其他东西。&lt;/p&gt;

&lt;p&gt;到 1985 年，计算成本已比 1970 年便宜约 1,000 倍，而第一台台式计算机刚刚在富裕的学术实验室中普及。 David E. Rumelhart 等人对已知方法[BP1-2] 的实验分析。 然后证明反向传播可以在 NN 的隐藏层中产生有用的内部表示。[RUM] 至少对于监督学习，反向传播通常比 Amari 的上述深度学习更有效，通过更一般的 SGD 方法（1967），它学习了有用的内部 大约 2 年前 NN 中的表示。[GD1-2a]&lt;/p&gt;

&lt;p&gt;直到 1970 年 [BP1-2] 的反向传播方法被广泛接受作为深度神经网络的训练方法，花了 4 年时间。 在 2010 年之前，许多人认为训练多层神经网络需要无监督预训练，这是我自己在 1991 年提出的方法[UN][UN0-3]（见下文），后来得到其他人的支持（2006 年）。[UN4 ] 事实上，据称 [VID1] “没有任何头脑正常的人会建议”将简单的反向传播应用于深度神经网络。 然而，在 2010 年，我们的团队与我出色的罗马尼亚博士后 Dan Ciresan [MLP1-2] 表明，深度 FNN 可以通过简单的反向传播进行训练，并且根本不需要对重要应用进行无监督预训练。 [MLP2]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-14.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的系统在当时著名且广泛使用的图像识别基准 MNIST 上创造了新的性能记录 [MLP1]。 这是通过在称为 GPU 的高度并行图形处理单元上极大地加速深度 FNN 来实现的（正如 Jung 和 Oh 在 2004 年 [GPUNN] 首次对层数较少的浅层 NN 所做的那样）。 一位评论家称这是“机器学习社区的警钟”。 今天，该领域的每个人都在追求这种方法。&lt;/p&gt;

&lt;p&gt;脚注 6. 不幸的是，在 1980 年代重新发表反向传播的几位作者没有引用现有技术——甚至在后来的调查中也没有。[T22] 事实上，正如引言中提到的，有一个更广泛的、经常重复的、误导性的“ 深度学习的历史[S20]忽略了前面章节中提到的大部分开创性工作。[T22][DLC]这个“替代历史”基本上是这样的：“1969 年，Minsky &amp;amp; Papert[M69] 表明浅 没有隐藏层的神经网络非常有限，该领域被放弃，直到新一代神经网络研究人员在 1980 年代重新审视这个问题。[S20] 然而，1969 年的书 [M69] 解决了高斯的“问题” &amp;amp; Legendre 的浅层学习（大约 1800 年）[DL1-2] 已经在 4 年前被 Ivakhnenko &amp;amp; Lapa 流行的深度学习方法 [DEEP1-2][DL2] 解决了，然后 Amari 的 SGD 也解决了 MLPs。[GD1- 2] Minsky 既没有引用这项工作，也没有在后来更正他的书。&lt;a href=&quot;Sec. I&quot;&gt;HIN&lt;/a&gt;[T22] 甚至 r 最近的论文宣扬了这种对深度学习的修正主义叙述，显然是为了美化其作者后来的贡献（例如玻尔兹曼机[BM][HIN][SK75][G63][T22]），而没有将它们与原始作品联系起来，[DLC ][S20][T22]虽然真实历史众所周知。 深度学习研究在 1960 年代至 70 年代非常活跃，尤其是在英语圈之外。[DEEP1-2][GD1-3][CNN1][DL1-2][T22] 明显的错误归因和无意的[PLAG1][CONN21] 或故意 [FAKE2] 剽窃仍在污染整个深度学习领域。[T22] 科学期刊“需要对自我纠正做出更明确、更坚定的承诺”，[SV20] 这已经是其他科学领域的标准。&lt;/p&gt;

&lt;h2 id=&quot;1979-年第一个深度卷积神经网络1969-年relu&quot;&gt;1979 年：第一个深度卷积神经网络（1969 年：ReLU）&lt;/h2&gt;

&lt;p&gt;1979 年，Kunihiko Fukushima 引入了卷积神经网络 (CNN) 架构。计算机视觉在 2010 年代被称为卷积神经网络 (CNN) 的特殊前馈神经网络彻底改变了。[CNN1-4] 具有交替卷积层和下采样层的基本 CNN 架构 这要归功于福岛邦彦 (1979)。 他称之为 Neocognitron。[CNN1]&lt;/p&gt;

&lt;p&gt;值得注意的是，早在 10 年前，Fukushima 还为神经网络引入了整流线性单元 (ReLU) (1969)。[RELU1] 它们现在广泛用于 CNN 和其他神经网络。&lt;/p&gt;

&lt;p&gt;1987 年，Alex Waibel 将带卷积的神经网络与权重共享和反向传播相结合（见上文），[BP1-2] 并将其应用于语音。[CNN1a] Waibel 没有称此为 CNN，而是 TDNN。&lt;/p&gt;

&lt;p&gt;Yamaguchi 等人介绍了一种流行的下采样变体，称为最大池化。 1990 年的 TDNN [CNN3a] 和 Juan Weng 等人。 1993 年用于高维 CNN。[CNN3]&lt;/p&gt;

&lt;p&gt;自 1989 年以来，Yann LeCun 的团队为 CNN 的改进做出了贡献，尤其是在图像方面。[CNN2,4][T22] Baldi 和 Chauvin (1993) 首次将具有反向传播功能的 CNN 应用于生物医学/生物特征图像。[BA93]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-16.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2011 年晚些时候，CNN 在 ML 社区变得更加流行，当时我自己的团队大大加快了深度 CNN 的训练（Dan Ciresan 等人，2011）。[GPUCNN1,3,5] 我们基于 GPU 的快速 [GPUNN][ GPUCNN5] 2011 年的 CNN [GPUCNN1] 被称为 DanNet[DAN,DAN1][R6] 是一个实际的突破，比 2006 年早期的 GPU 加速 CNN 更深更快。[GPUCNN] 2011 年，DanNet 成为第一个纯深度 CNN 赢得计算机视觉竞赛。[GPUCNN2-3,5]&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Competition[GPUCNN5]&lt;/th&gt;
      &lt;th&gt;Date/Deadline&lt;/th&gt;
      &lt;th&gt;Image size&lt;/th&gt;
      &lt;th&gt;Improvement&lt;/th&gt;
      &lt;th&gt;Winner&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;IJCNN 2011 traffic signs&lt;/td&gt;
      &lt;td&gt;Aug 06, 2011&lt;/td&gt;
      &lt;td&gt;variable&lt;/td&gt;
      &lt;td&gt;68.0% (superhuman)&lt;/td&gt;
      &lt;td&gt;DanNet[DAN,DAN1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ISBI 2012 image segmentation&lt;/td&gt;
      &lt;td&gt;Mar 01, 2012&lt;/td&gt;
      &lt;td&gt;512x512&lt;/td&gt;
      &lt;td&gt;26.1%&lt;/td&gt;
      &lt;td&gt;DanNet[GPUCNN3a]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ICPR 2012 medical imaging&lt;/td&gt;
      &lt;td&gt;Sep 10, 2012&lt;/td&gt;
      &lt;td&gt;2048x2048x3&lt;/td&gt;
      &lt;td&gt;8.9%&lt;/td&gt;
      &lt;td&gt;DanNet[GPUCNN3a]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ImageNet 2012&lt;/td&gt;
      &lt;td&gt;Sep 30, 2012&lt;/td&gt;
      &lt;td&gt;256x256x3&lt;/td&gt;
      &lt;td&gt;41.4%&lt;/td&gt;
      &lt;td&gt;AlexNet[GPUCNN4]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MICCAI 2013 Grand Challenge&lt;/td&gt;
      &lt;td&gt;Sep 08, 2013&lt;/td&gt;
      &lt;td&gt;2048x2048x3&lt;/td&gt;
      &lt;td&gt;26.5%&lt;/td&gt;
      &lt;td&gt;DanNet[GPUCNN8]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ImageNet 2014&lt;/td&gt;
      &lt;td&gt;Aug 18, 2014&lt;/td&gt;
      &lt;td&gt;256x256x3&lt;/td&gt;
      &lt;td&gt;15.8%&lt;/td&gt;
      &lt;td&gt;VGG Net[GPUCNN9]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ImageNet 2015&lt;/td&gt;
      &lt;td&gt;Sep 30, 2015&lt;/td&gt;
      &lt;td&gt;256x256x&lt;/td&gt;
      &lt;td&gt;315.8%&lt;/td&gt;
      &lt;td&gt;ResNet,[HW2] a Highway Net[HW1] with open gates&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;有一段时间，DanNet 享有垄断地位。 从 2011 年到 2012 年，它赢得了它参加的所有比赛，并连续赢得了四场比赛（2011 年 5 月 15 日、2011 年 8 月 6 日、2012 年 3 月 1 日、2012 年 9 月 10 日）。[GPUCNN5] 特别是在硅谷的 IJCNN 2011 上，DanNet 吹响了比赛，并在国际比赛中取得了第一个超人视觉模式识别[DAN1]。 DanNet 也是第一个获胜的深度 CNN：中国手写比赛（ICDAR 2011）、图像分割比赛（ISBI，2012 年 5 月）、大图像物体检测比赛（ICPR，2012 年 9 月 10 日），以及——在 同一时间——关于癌症检测的医学成像竞赛。[GPUCNN8] 2010 年，我们将 DanNet 介绍给世界上最大的钢铁生产商 Arcelor Mittal，并且能够大大提高钢铁缺陷检测。[ST] 据我所知， 这是重工业的第一个深度学习突破。 2012 年 7 月，我们关于 DanNet[GPUCNN3] 的 CVPR 论文引起了计算机视觉社区的注意。 5 个月后，类似的 GPU 加速 AlexNet 赢得了 ImageNet[IM09] 2012 竞赛。[GPUCNN4-5][R6] 我们的 CNN 图像扫描仪比以前的方法快 1000 倍。[SCAN] 这引起了医疗保健行业的极大兴趣 . 今天，IBM、西门子、谷歌和许多初创公司都在采用这种方法。 VGG 网络（ImageNet 2014 获胜者）[GPUCNN9] 和其他高引用的 CNNs[RCNN1-3] 进一步扩展了 2011 年的 DanNet。[MIR]（第 19 节）[MOST]&lt;/p&gt;

&lt;p&gt;ResNet，ImageNet 2015 的赢家[HW2]（2015 年 12 月）和目前被引用最多的神经网络，[MOST] 是我们早期 Highway Net（2015 年 5 月）的一个版本（开门）[HW1-3][R5] Highway Net（见下文）实际上是我们的 vanilla LSTM（见下文）的前馈网络版本。[LSTM2] 它是第一个有效的、真正具有数百层的深度前馈神经网络（以前的神经网络最多只有几十层） .&lt;/p&gt;

&lt;h2 id=&quot;1980-年代至-90-年代图形神经网络随机增量规则dropout&quot;&gt;1980 年代至 90 年代：图形神经网络/随机增量规则（Dropout）/…&lt;/h2&gt;

&lt;p&gt;v.d. 引入了具有快速变化的“快速权重”的神经网络。 Malsburg (1981) 等人。[FAST,a,b] 1987 年由 Pollack [PO87-90] 提出并由 Sperduti、Goller 和 Küchler 扩展/改进的可以操纵图形等结构化数据的深度学习架构 [T22] 在 1990 年代初期。[SP93-97][GOL][KU][T22] 另见我们的图 NN-like, Transformer-like Fast Weight Programmers of 1991[FWP0-1][FWP6][FWP] 学习不断 重写从输入到输出的映射（见下文），以及 Baldi 及其同事的工作。[BA96-03] 如今，图 NN 用于许多应用程序。&lt;/p&gt;

&lt;p&gt;Werbos,[BP2][BPTT1] Williams,[BPTT2][CUB0-2]等人[ROB87][BPTT3][DL1]分析了梯度下降的实现方式[GD’][STO51-52][GDa-b][ GD1-2a] 在 RNN 中。 Kohonen 的自组织映射开始流行。[KOH82-89]&lt;/p&gt;

&lt;p&gt;80 年代和 90 年代还看到了各种生物学上更合理的深度学习算法的提议，与反向传播不同，这些算法在空间和时间上是局部的。[BB2][NAN1-4][NHE][HEL] 参见概述[MIR]（第 15 节） ，第 17 节）以及最近对此类方法重新产生的兴趣。[NAN5][FWPMETA6][HIN22]&lt;/p&gt;

&lt;p&gt;1990 年，Hanson 引入了随机增量法则，这是一种通过反向传播训练神经网络的随机方法。 几十年后，这个版本在绰号“dropout”下流行起来。[Drop1-4][GPUCNN4]&lt;/p&gt;

&lt;p&gt;1980 年代和 90 年代发表了许多关于 NN（包括 RNN）的其他论文——请参阅 2015 年调查中的大量参考文献。[DL1] 然而，在这里，我们主要将自己限制在——事后看来——最重要的论文，鉴于目前 （短暂的？）2022 年的前景。&lt;/p&gt;

&lt;h2 id=&quot;1990-年-2-月生成对抗网络好奇心&quot;&gt;1990 年 2 月：生成对抗网络/好奇心&lt;/h2&gt;

&lt;p&gt;生成对抗网络 (GAN) 已经变得非常流行。[MOST] 它们于 1990 年首次在慕尼黑以人工好奇心的名义发表。[AC90-20][GAN1] 两个决斗的神经网络（一个概率生成器和一个预测器）正试图 在 minimax 游戏中最大化彼此的损失。[AC]（第 1 节）生成器（称为控制器）生成概率输出（使用随机单位 [AC90]，就像在后来的 StyleGANs[GAN2] 中一样）。 预测器（称为世界模型）看到控制器的输出并预测环境对它们的反应。 使用梯度下降，预测器 NN 最小化它的错误，而生成器 NN 试图使输出最大化这个错误：一个网络的损失是另一个网络的收益。[AC90]（世界模型也可以用于连续在线行动规划。 [AC90][计划 2-3][计划])&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-17.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 2014 年一篇关于 GAN 的论文之前 4 年，[GAN1] 我著名的 2010 年调查 [AC10] 将 1990 年的生成对抗性神经网络总结如下：“神经网络作为预测世界模型用于最大化控制器的内在奖励，这 与模型的预测误差成正比”（已最小化）。&lt;/p&gt;

&lt;p&gt;2014 年的 GAN 就是这样的一个例子，其中试验非常短（就像老虎机问题）并且环境简单地返回 1 或 0，这取决于控制器（或生成器）的输出是否在给定的集合中。[AC20][AC] [T22]（第十七节）&lt;/p&gt;

&lt;p&gt;其他早期的对抗性机器学习设置 [S59][H90] 非常不同——它们既不涉及无监督神经网络，也不涉及建模数据，也不使用梯度下降。[AC20]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-18.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可预测性最小化：无监督极小极大博弈，其中一个神经网络最小化另一个最大化的目标函数&lt;/p&gt;

&lt;p&gt;1990 年的原则已被广泛用于强化学习 [SIN5][OUD13][PAT17][BUR18] 和逼真图像合成 [GAN1,2] 的探索，尽管后者最近被 Rombach 等人接管。 s Latent Diffusion，另一种在慕尼黑发表的方法，[DIF1] 建立在 Jarzynski 上个千年的早期物理学工作 [DIF2] 和最近的论文的基础上。 [DIF3-5]&lt;/p&gt;

&lt;p&gt;1991 年，我发布了另一种基于两个称为可预测性最小化的对抗性神经网络的 ML 方法，用于创建部分冗余数据的分离表示，并于 1996 年应用于图像。[PM0-2][AC20][R2][MIR]（第 7 节） )&lt;/p&gt;

&lt;h2 id=&quot;1990-年-2-月生成对抗网络好奇心-1&quot;&gt;1990 年 2 月：生成对抗网络/好奇心&lt;/h2&gt;

&lt;p&gt;生成对抗网络 (GAN) 已经变得非常流行。[MOST] 它们于 1990 年首次在慕尼黑以人工好奇心的名义发表。[AC90-20][GAN1] 两个决斗的神经网络（一个概率生成器和一个预测器）正试图 在 minimax 游戏中最大化彼此的损失。[AC]（第 1 节）生成器（称为控制器）生成概率输出（使用随机单位 [AC90]，就像在后来的 StyleGANs[GAN2] 中一样）。 预测器（称为世界模型）看到控制器的输出并预测环境对它们的反应。 使用梯度下降，预测器 NN 最小化它的错误，而生成器 NN 试图使输出最大化这个错误：一个网络的损失是另一个网络的收益。[AC90]（世界模型也可以用于连续在线行动规划。 [AC90][计划 2-3][计划])&lt;/p&gt;

&lt;p&gt;1990-91 年以来的人工好奇心和创造力&lt;/p&gt;

&lt;p&gt;在 2014 年一篇关于 GAN 的论文之前 4 年，[GAN1] 我著名的 2010 年调查 [AC10] 将 1990 年的生成对抗性神经网络总结如下：“神经网络作为预测世界模型用于最大化控制器的内在奖励，这 与模型的预测误差成正比”（已最小化）。&lt;/p&gt;

&lt;p&gt;2014 年的 GAN 就是这样的一个例子，其中试验非常短（就像老虎机问题）并且环境简单地返回 1 或 0，这取决于控制器（或生成器）的输出是否在给定的集合中。[AC20][AC] [T22]（第十七节）&lt;/p&gt;

&lt;p&gt;其他早期的对抗性机器学习设置 [S59][H90] 非常不同——它们既不涉及无监督神经网络，也不涉及建模数据，也不使用梯度下降。[AC20]&lt;/p&gt;

&lt;p&gt;可预测性最小化：无监督极小极大博弈，其中一个神经网络最小化另一个最大化的目标函数&lt;/p&gt;

&lt;p&gt;1990 年的原则已被广泛用于强化学习 [SIN5][OUD13][PAT17][BUR18] 和逼真图像合成 [GAN1,2] 的探索，尽管后者最近被 Rombach 等人接管。 s Latent Diffusion，另一种在慕尼黑发表的方法，[DIF1] 建立在 Jarzynski 上个千年的早期物理学工作 [DIF2] 和最近的论文的基础上。 [DIF3-5]&lt;/p&gt;

&lt;p&gt;1991 年，我发布了另一种基于两个称为可预测性最小化的对抗性神经网络的 ML 方法，用于创建部分冗余数据的分离表示，并于 1996 年应用于图像。[PM0-2][AC20][R2][MIR]（第 7 节） )&lt;/p&gt;

&lt;h3 id=&quot;1991-年-3-月具有线性化自注意力的变形金刚&quot;&gt;1991 年 3 月：具有线性化自注意力的变形金刚&lt;/h3&gt;

&lt;p&gt;最近，Transformers[TR1] 风靡一时，例如生成听起来像人类的文本。[GPT3] Transformers with “linearized self-attention”[TR5-6] 发表于 1991 年 3 月[FWP0-1][FWP6] [FWP]（除了正常化——见 2022 年 30 周年推文）。 这些所谓的“Fast Weight Programmers”或“Fast Weight Controllers”[FWP0-1] 像传统计算机一样将存储和控制分开，但是以端到端可微分的、自适应的、完全神经的方式（而不是 混合时尚[PDA1-2][DNC])。 标准变形金刚 [TR1-4] 中的“自注意力”将其与投影和 softmax 相结合（使用像我在 1993 年 [ATT][FWP2][R4] 中介绍的那样的注意力术语）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-19.png&quot; alt=&quot;image&quot; /&gt;
1991 年 3 月 26 日：神经网络学习使用快速权重对神经网络进行编程——就像今天的 Transformer 变体一样。 2021 年：新东西！&lt;/p&gt;

&lt;p&gt;今天的变形金刚大量使用无监督预训练[UN0-3]（见下一节），这是另一种深度学习方法，首次发表于我们 1990-1991 年的奇迹年[MIR][MOST]&lt;/p&gt;

&lt;p&gt;1991 年的快速权重程序员还导致了元学习自参照神经网络，它们可以在自己身上运行自己的权重变化算法或学习算法，并对其进行改进，并改进它们改进它的方式，等等。 这项工作自 1992 年以来[FWPMETA1-9][HO1] 扩展了我 1987 年的毕业论文，[META1] 介绍了不仅用于学习而且用于元学习或学习学习的算法，[META] 通过经验学习更好的学习算法。 这在 2010 年代[DEC] 变得非常流行，当时计算机的速度快了一百万倍。&lt;/p&gt;

&lt;h2 id=&quot;1991-年-4-月通过自监督预训练进行深度学习&quot;&gt;1991 年 4 月：通过自监督预训练进行深度学习&lt;/h2&gt;

&lt;p&gt;今天最强大的 NN 往往非常深，也就是说，它们有很多层神经元或许多后续计算阶段。[MIR] 然而，在 1990 年代之前，基于梯度的训练对深度 NN 效果不佳，仅适用于浅层 NN [DL1-2]（但请参阅 1989 年的一篇论文 [MOZ]）。 这个深度学习问题对于循环神经网络最为明显。 与人脑相似，但与更有限的前馈神经网络 (FNN) 不同，RNN 具有反馈连接。 这使得 RNN 成为功能强大的通用并行顺序计算机，可以处理任意长度的输入序列（想想语音数据或视频）。 RNN 原则上可以实现任何可以在您的笔记本电脑或任何其他现有计算机上运行的程序。 如果我们想要构建通用人工智能 (AGI)，那么它的底层计算基础必须更像 RNN 而不是 FNN，因为 FNN 从根本上是不够的； RNN 和类似系统之于 FNN 就像通用计算机之于袖珍计算器一样。 特别是，与 FNN 不同，RNN 原则上可以处理任意深度的问题。[DL1] 然而，在 1990 年代之前，RNN 在实践中未能学习深度问题。[MIR]（第 0 节）&lt;/p&gt;

&lt;p&gt;为了通过基于 RNN 的“一般深度学习”克服这个缺点，我构建了一个自我监督的 RNN 层次结构，它在多个抽象层次和多个自组织时间尺度上学习表示：[LEC] 神经序列分块器 [UN0] 或神经网络 History Compressor.[UN1] 每个 RNN 都试图解决预测其下一个输入的借口任务，仅将意外输入（因此也是目标）发送到上面的下一个 RNN。 由此产生的压缩序列表示极大地促进了下游监督深度学习，例如序列分类。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-20.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;尽管当时的计算机每一美元的计算速度比今天慢了大约一百万倍，但到 1993 年，上面的神经历史压缩器已经能够解决以前无法解决的深度 &amp;gt; 1000[UN2]（需要超过 1,000 个后续计算阶段）的“非常深度学习”任务 ——这样的阶段越多，学习越深入）。 1993 年，我们还发布了神经历史压缩器的连续版本。[UN3]（另请参阅最近关于无监督的基于神经网络的抽象的工作。[OBJ1-5]）&lt;/p&gt;

&lt;p&gt;这项工作十多年后，[UN1] 发布了一种类似的用于更有限的前馈神经网络 (FNN) 的无监督方法，通过对称为深度信念网络 (DBN) 的 FNN 堆栈进行无监督预训练来促进监督学习。[UN4] 2006 年的理由基本上是我在 1990 年代初期为我的 RNN 堆栈使用的理由：每个更高级别都试图减少下面级别中数据表示的描述长度（或负对数概率）。[HIN][T22][MIR]&lt;/p&gt;

&lt;p&gt;1991 年 4 月：将一个 NN 提炼成另一个 NN
使用我 1991 年的 NN 蒸馏程序，可以将上述神经历史压缩器的分层内部表示折叠成单个循环神经网络 (RNN)。[UN0-1][MIR] 在这里，教师神经网络的知识被“蒸馏”成 一个学生 NN，通过训练学生 NN 模仿老师 NN 的行为（同时还对学生 NN 重新训练以前学过的技能，这样它就不会忘记它们）。 NN 蒸馏也在多年后重新发表，[DIST2][MIR][HIN][T22] 并在今天被广泛使用。&lt;/p&gt;

&lt;p&gt;如今，无监督预训练被 Transformers[TR1-6] 大量用于自然语言处理和其他领域。 值得注意的是，具有线性化自注意力的 Transformers 也首次在我们的 Annus Mirabilis of 1990-1991 中发表[FWP0-6]，[MIR][MOST] 以及用于深度学习的无监督/自监督预训练。[UN0-3 ] 见上一节。&lt;/p&gt;

&lt;h2 id=&quot;1991-年-6-月基本问题梯度消失&quot;&gt;1991 年 6 月：基本问题：梯度消失&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-21.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sepp Hochreiter 对基本深度学习问题的分析 (1991) 深度学习之所以困难，是因为我的第一个学生 Sepp Hochreiter 在他的毕业论文中于 1991 年确定并分析了基本深度学习问题，我很高兴能够监督。[VAN1] 首先 他实现了上面的神经历史压缩器，但后来做了更多：他表明深度神经网络存在现在著名的梯度消失或爆炸问题：在典型的深度或循环网络中，反向传播的误差信号要么迅速缩小，要么从中消失 界限。 在这两种情况下，学习都会失败（比较[VAN2]）。 这种分析导致了现在称为 LSTM 的基本原理（见下文）。&lt;/p&gt;

&lt;h2 id=&quot;1991-年-6-月lstm--highway-nets--resnets-的根源&quot;&gt;1991 年 6 月：LSTM / Highway Nets / ResNets 的根源&lt;/h2&gt;

&lt;p&gt;长短期记忆 (LSTM) 循环神经网络 [LSTM1-6] 克服了 Sepp 在其上述 1991 年毕业论文 [VAN1] 中确定的基本深度学习问题，我认为这是历史上最重要的文献之一 机器学习。 它还通过我们在 1995 年的一份技术报告中称为 LSTM 的基本原理（例如恒定错误流）提供了解决问题的重要见解。[LSTM0] 在 1997 年主要同行评审出版物之后 [LSTM1][25y97] （现在是 20 世纪被引用次数最多的 NN 文章 [MOST]），LSTM 及其训练程序在我在 IDSIA 的瑞士 LSTM 资助下通过我后来的学生 Felix Gers、Alex Graves 和其他人的工作得到了进一步改进。 一个里程碑是带有遗忘门 [LSTM2] 的“香草 LSTM 架构”——今天每个人都在使用的 1999-2000 的 LSTM 变体，例如在谷歌的 Tensorflow 中。 Alex 是我们首次将 LSTM 成功应用于语音（2004 年）的主要作者。[LSTM10] 2005 年首次发布了具有全时间反向传播的 LSTM 和双向 LSTM[LSTM3]（现已广泛使用）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-22.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2006 年的另一个里程碑是用于同时比对和识别序列的训练方法“Connectionist Temporal Classification”或 CTC[CTC]。 我们的团队在 2007 年成功地将 CTC 训练的 LSTM 应用于语音 [LSTM4]（也使用分层 LSTM 堆栈 [LSTM14]）。 这导致了第一个卓越的端到端神经语音识别。 它与 20 世纪 80 年代末以来将神经网络与传统方法（如隐马尔可夫模型 (HMM)）相结合的混合方法有很大不同。[BW][BRI][BOU][HYB12][T22] 在 2009 年，通过 Alex 的努力， CTC训练的LSTM成为第一个赢得国际比赛的RNN，即三项ICDAR 2009 Connected Handwriting Competitions（法语，波斯语，阿拉伯语）。 这引起了业界的极大兴趣。 LSTM 很快被用于涉及序列数据的所有事物，例如语音 [LSTM10-11][LSTM4][DL1] 和视频。 2015 年，CTC-LSTM 组合显着改善了谷歌在 Android 智能手机上的语音识别。[GSR15] 许多其他公司采用了这一点。[DL4] 谷歌 2019 年新的设备语音识别（现在在你的手机上，而不是在服务器上） 仍然是基于LSTM。&lt;/p&gt;

&lt;h3 id=&quot;1995神经概率语言模型&quot;&gt;1995：神经概率语言模型&lt;/h3&gt;

&lt;p&gt;第一个出色的端到端神经机器翻译也是基于 LSTM。 1995 年，我们已经有了一个优秀的神经概率文本模型 [SNT]，其基本概念在 2003 年 [NPM][T22] 中得到了重用——另请参阅 Pollack 早期关于词嵌入和其他结构的工作 [PO87][PO90] 以及 Nakamura 和 Shikano 1989 年的词类别预测模型。[NPMa] 2001 年，我们表明 LSTM 可以学习 HMM 等传统模型无法学习的语言，[LSTM13] 即神经“亚符号”模型突然擅长学习“符号”任务。 计算仍然必须便宜 1000 倍，但到 2016 年，谷歌翻译 [GT16]——其白皮书 [WU] 提到 LSTM 超过 50 次——基于两个连接的 LSTM，[S2S] 一个用于传入文本，一个用于传出翻译 - 比以前好得多。[DL4] 到 2017 年，LSTM 还支持 Facebook 的机器翻译（每周超过 300 亿次翻译——最受欢迎的 YouTube 视频需要数年时间才能实现仅 100 亿次点击），[FB17][DL4] 苹果的 大约 10 亿部 iPhone 上的 Quicktype，[DL4] 亚马逊 Alexa 的声音，[DL4] 谷歌的图像标题生成 [DL4] 和自动电子邮件回复 [DL4] 等。《商业周刊》称 LSTM “可以说是最商业化的 AI 成就”。[AV1 ] 到 2016 年，谷歌数据中心超过四分之一的强大推理计算能力用于 LSTM（5% 用于另一种流行的深度学习技术，称为 CNN——见上文）。[JOU17] 当然，我们的 LSTM 也是 大量用于医疗保健和医疗诊断——一个简单的谷歌 e Scholar search 出现了无数标题中带有“LSTM”的医学文章。[DEC]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-23.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过我的学生 Rupesh Kumar Srivastava 和 Klaus Greff 的工作，LSTM 原理也促成了我们 2015 年 5 月的 Highway Network[HW1]，这是第一个具有数百层的非常深的 FNN（以前的 NN 最多只有几十层） ). Microsoft 的 ResNet[HW2]（赢得了 ImageNet 2015 竞赛）是其一个版本（ResNet 是大门始终敞开的 Highway Net）。 早期的 Highway Nets 在 ImageNet 上的表现与它们的 ResNet 版本大致相同。[HW3] highway gates 的变体也用于某些算法任务，其中纯残差层不能很好地工作。[NDR]&lt;/p&gt;

&lt;h3 id=&quot;lstm--highway-net-原理是现代深度学习的核心&quot;&gt;LSTM / Highway Net 原理是现代深度学习的核心&lt;/h3&gt;

&lt;p&gt;深度学习完全是关于神经网络深度的。[DL1] 在 1990 年代，LSTM 为受监督的循环神经网络带来了本质上无限的深度； 在 2000 年代，受 LSTM 启发的 Highway Nets 将其引入前馈神经网络。 LSTM 已成为 20 世纪引用最多的神经网络； 名为 ResNet 的 Highway Net 版本是 21 世纪引用最多的神经网络。[MOST]（然而，引用是衡量真实影响的一个非常值得怀疑的衡量标准。[NAT1]）&lt;/p&gt;

&lt;p&gt;1980s-：在没有老师的情况下学习行动的神经网络
前面的部分主要关注用于被动模式识别/分类的深度学习。 然而，NN 也与强化学习 (RL)、[KAE96][BER96][TD3][UNI][GM3][LSTMPG] 最通用的学习类型相关。 一般的 RL 智能体必须在没有教师帮助的情况下发现如何与动态的、最初未知的、部分可观察的环境进行交互，以最大化其预期的累积奖励信号。[DL1] 动作之间可能存在任意的、先验未知的延迟 和可察觉的后果。 RL 问题与计算机科学的任何问题一样困难，因为任何具有可计算描述的任务都可以在通用 RL 框架中制定。[UNI]&lt;/p&gt;

&lt;p&gt;某些强化学习问题可以通过 80 年代之前发明的非神经技术来解决：蒙特卡洛（树）搜索（MC，1949 年）、[MOC1-5] 动态规划（DP，1953 年）、[BEL53] 人工进化（1954 年） ,&lt;a href=&quot;[TUR1],未发表&quot;&gt;EVO1-7&lt;/a&gt; alpha-beta-pruning (1959),[S59] 控制理论与系统辨识 (1950s),[KAL59][GLA85] 随机梯度下降 (SGD, 1951),[ STO51-52]和通用搜索技术（1973）。[AIT7]&lt;/p&gt;

&lt;p&gt;然而，深度 FNN 和 RNN 是改进某些类型的 RL 的有用工具。 在 1980 年代，函数逼近和 NN 的概念与系统识别相结合，[WER87-89][MUN87][NGU89] DP 及其在线变体 Temporal Differences (TD)，[TD1-3] 人工进化，[EVONN1- 3] 和策略梯度。[GD1][PG1-3] 可以在第 1 节中找到有关此的许多其他参考资料。 2015 年调查的 6 [DL1]&lt;/p&gt;

&lt;p&gt;当环境存在马尔可夫接口 [PLAN3]，使得 RL 机器的当前输入传达了确定下一个最佳动作所需的所有信息时，基于 DP/TD/MC 的 FNN 的 RL 可以非常成功，如图所示 1994 年 [TD2]（大师级西洋双陆棋玩家）和 2010 年代 [DM1-2a]（围棋、国际象棋和其他游戏的超人玩家）。&lt;/p&gt;

&lt;p&gt;对于没有马尔可夫接口的更复杂的情况，学习机不仅要考虑当前输入，还要考虑以前输入的历史，我们的 RL 算法和 LSTM[LSTM-RL][RPG] 的组合已经成为标准，特别是， 我们的 LSTM 通过策略梯度训练 (2007).[RPG07][RPG][LSTMPG]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-24.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如，2018 年，PG 训练的 LSTM 是 OpenAI 著名的 Dactyl 的核心，它学会了在没有老师的情况下控制灵巧的机器人手。[OAI1][OAI1a] 视频游戏类似：2019 年，DeepMind（由 我实验室的一名学生）在星际争霸游戏中击败了一名职业玩家，这在理论上比国际象棋或围棋 [DM2] 在许多方面都更难，使用的是 Alphastar，其大脑具有由 PG 训练的深层 LSTM 核心。[DM3] 强化学习 LSTM（占模型总参数数的 84%）也是著名的 OpenAI Five 的核心，它学会了在 Dota 2 视频游戏（2018 年）中击败人类专家。[OAI2] 比尔·盖茨称这是“进步的巨大里程碑” 人工智能”。[OAI2a][MIR]（第 4 节）[LSTMPG]&lt;/p&gt;

&lt;p&gt;RL 的未来将是关于使用复杂输入流的紧凑时空抽象进行学习/组合/规划——关于常识推理[MAR15] 和学习思考。[PLAN4-5] 分层方式，在多个抽象级别和多个时间尺度？[LEC] 我们在 1990-91 年发表了这些问题的答案：自我监督的神经历史压缩器 [UN][UN0-3] learn to represent percepts at multiple levels 抽象和多个时间尺度（见上文），而端到端可区分的基于神经网络的子目标生成器[HRL3] [MIR]（第 10 节）通过梯度下降学习分层行动计划（见上文）。 更复杂的学习抽象思考的方法发表于 1997[AC97][AC99][AC02] 和 2015-18.[PLAN4-5]&lt;/p&gt;

&lt;h2 id=&quot;是硬件笨蛋&quot;&gt;是硬件，笨蛋！&lt;/h2&gt;

&lt;p&gt;如果没有不断改进和加速计算机硬件，深度学习算法在过去千年中的最新突破（见前几节）是不可能的。 如果不提及这种已经运行了至少两千年的进化，任何人工智能和深度学习的历史都是不完整的。&lt;/p&gt;

&lt;p&gt;第一个已知的基于齿轮的计算设备是 2000 多年前古希腊的 Antikythera 机制（一种天文钟）。&lt;/p&gt;

&lt;p&gt;也许世界上第一台实用的可编程机器是 1 世纪 [SHA7a][RAU1] 由亚历山大的赫伦制造的自动剧院（显然他还拥有第一台已知的工作蒸汽机 - Aeolipile）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-25.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Banu Musa 兄弟在 9 世纪在巴格达制造的音乐自动机可能是第一台具有存储程序的机器。[BAN][KOE1] 它使用旋转圆柱体上的销来存储控制蒸汽驱动长笛的程序——比较 Al-Jazari 的可编程 1206.[SHA7b] 的鼓机&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-26.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1600 年代带来了更灵活的机器，可以根据输入数据计算答案。 第一个用于简单算术的基于数据处理齿轮的专用计算器是由 Wilhelm Schickard 于 1623 年建造的，Wilhelm Schickard 是“自动计算之父”称号的候选人之一，其次是 Blaise Pascal 的高级 Pascaline（1642 年）。 1673 年，已经提到的戈特弗里德·威廉·莱布尼茨（被称为“有史以来最聪明的人”[SMO13]）设计了第一台可以执行所有四种算术运算的机器（计步器），并且是第一台带有记忆的机器。[BL16] 他还描述了由穿孔卡 (1679)、[L79][L03][LA14][HO66] 控制的二进制计算机的原理，并发表了链式法则[LEI07-10]（见上文），深度学习和现代的基本要素 人工智能。&lt;/p&gt;

&lt;p&gt;大约 1800 年，约瑟夫-玛丽·雅卡尔 (Joseph-Marie Jacquard) 和其他人在法国制造了第一台商业程序控制机器（基于打孔卡的织机）——他们可能是编写世界上第一个工业软件的第一批“现代”程序员。 他们启发了 Ada Lovelace 和她的导师 Charles Babbage（英国，大约 1840 年）。 他计划但无法构建一台可编程的通用计算机（只有他的非通用专用计算器导致了 20 世纪的工作复制品）。&lt;/p&gt;

&lt;p&gt;Leonardo Torres y Quevedo，20 世纪第一个实用 AI 的先驱 1914 年，西班牙人 Leonardo Torres y Quevedo（在介绍中提到）成为 20 世纪第一个 AI 先驱，他创造了第一个工作的国际象棋终端玩家（当时国际象棋被认为 作为一种仅限于智能生物领域的活动）。 几十年后，当另一位 AI 先驱 Norbert Wiener [WI48] 在 1951 年巴黎 AI 会议上与它对战时，这台机器仍然被认为令人印象深刻。 [AI51][BRO21][BRU4]&lt;/p&gt;

&lt;p&gt;1935 年至 1941 年间，Konrad Zuse 创造了世界上第一台可运行的可编程通用计算机：Z3。 1936 年的相应专利 [ZU36-38][RO98][ZUS21] 描述了可编程物理硬件所需的数字电路，早于克劳德香农 1937 年关于数字电路设计的论文。[SHA37] 与巴贝奇不同，Zuse 使用了莱布尼茨的二进制计算原理 (1679)[L79][LA14][HO66][L03] 代替传统的十进制计算。 这极大地简化了硬件。[LEI21,a,b] 忽略任何物理计算机不可避免的存储限制，Z3 的物理硬件在哥德尔 [GOD][GOD34, GOD34, 21,21a] (1931-34)、Church[CHU] (1935)、Turing[TUR] (1936) 和 Post[POS] (1936)。 简单的算术技巧可以弥补 Z3 缺少明确的条件跳转指令。[RO98] 今天，大多数计算机都像 Z3 一样是二进制的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-28.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Z3 使用带有明显移动开关的电磁继电器。 第一个电子专用计算器（其运动部件是电子，太小以至于看不见）是约翰·阿塔纳索夫（“管基计算之父”[NASC6a]）的二进制 ABC（美国，1942 年）。 与 1600 年代基于齿轮的机器不同，ABC 使用真空管——今天的机器使用 Julius Edgar Lilienfeld 于 1925 年获得专利的晶体管原理。[LIL1-2] 但与 Zuse 的 Z3 不同，ABC 不能自由编程。 Tommy Flowers（英国，1943-45 年）的电子巨像机器也没有用来破解纳粹密码。[NASC6]&lt;/p&gt;

&lt;p&gt;由 Zuse (1941)[RO98] 以外的人建造的第一台通用工作可编程机器是 Howard Aiken 的十进制 MARK I（美国，1944 年）。 由 Eckert 和 Mauchly (1945/46) 开发的速度快得多的十进制 ENIAC 是通过重新布线来编程的。 数据和程序都被“曼彻斯特宝贝”（Williams, Kilburn &amp;amp; Tootill, UK, 1948）和 1948 年升级的 ENIAC 存储在电子存储器中，通过将数字指令代码输入只读存储器来重新编程。 [HAI14b]&lt;/p&gt;

&lt;p&gt;从那时起，计算机通过集成电路 (IC) 变得更快。 1949 年，西门子的 Werner Jacobi 为在公共基板上具有多个晶体管的 IC 半导体申请了专利（于 1952 年授予）。[IC49-14] 1958 年，Jack Kilby 展示了带有外部导线的 IC。 1959 年，罗伯特·诺伊斯 (Robert Noyce) 提出了单片 IC。[IC14] 自 1970 年代以来，图形处理单元 (GPU) 已被用于通过并行处理来加速计算。 今天（2022 年）的 IC/GPU 包含数十亿个晶体管（几乎所有晶体管都是 Lilienfeld 的 1925 FET 类型[LIL1-2]）。&lt;/p&gt;

&lt;p&gt;1941 年，Zuse 的 Z3 每秒可以执行大约一个基本运算（例如加法）。 从那时起，每 5 年，计算成本就会降低 10 倍（请注意，他的定律比摩尔定律要古老得多，摩尔定律指出每个芯片的晶体管 [LIL1-2] 数量每 18 个月翻一番）。 截至 2021 年，即 Z3 之后的 80 年，现代计算机每秒可以以相同（经通货膨胀调整后）的价格执行约 1000 万亿条指令。 对这种指数趋势的天真推断预测，21 世纪将出现廉价计算机，其原始计算能力是所有人类大脑总和的一千倍。[RAW]&lt;/p&gt;

&lt;p&gt;物理极限在哪里？ 根据 Bremermann (1982)，[BRE] 一台质量为 1 千克和体积为 1 升的计算机最多可以在最多 1032 位上每秒执行最多 1051 次操作。 上述趋势将在 Z3 之后大约 25 年，即 2200 年左右达到布雷默曼极限。但是，由于太阳系中只有 2 x 1030 千克的质量，因此趋势势必会在几个世纪内打破，因为光速 将极大地限制额外质量的获取，例如，以其他太阳系的形式，通过及时的函数多项式，如先前在 2004 年指出的那样。[OOPS2][ZUS21]&lt;/p&gt;

&lt;p&gt;物理学似乎要求未来高效的计算硬件必须像大脑一样，在 3 维空间中有许多紧凑放置的处理器，由许多短线和少量长线稀疏地连接，以最小化总连接成本（即使“线” 实际上是光束）。[DL2] 基本架构本质上是一种深度的、稀疏连接的 3 维 RNN，这种 RNN 的深度学习方法有望变得比今天更加重要。[DL2 ]&lt;/p&gt;

&lt;h2 id=&quot;不要忽视-1931-年以来的人工智能理论&quot;&gt;不要忽视 1931 年以来的人工智能理论&lt;/h2&gt;

&lt;p&gt;现代人工智能和深度学习的核心主要基于近几个世纪的简单数学：微积分/线性代数/统计学。 然而，要在上一节中提到的现代硬件上有效地实现这个核心，并为数十亿人推出它，需要大量的软件工程，基于上个世纪发明的大量智能算法。 这里没有余地一一提及。 然而，至少我会列出人工智能和计算机科学理论的一些最重要的亮点。&lt;/p&gt;

&lt;p&gt;1930 年代初期，哥德尔创立了现代理论计算机科学。[GOD][GOD34][LEI21,21a] 他介绍了一种通用编码语言 (1931-34)。[GOD][GOD34-21a] 它基于整数， 并允许以公理形式形式化任何数字计算机的操作。 哥德尔用它来表示数据（例如公理和定理）和程序 [VAR13]（例如数据操作的证明生成序列）。 他著名地构造了关于其他形式陈述的计算的形式陈述——特别是暗示它们不可判定的自引用陈述，给定一个计算定理证明器，系统地从一组可枚举的公理中列举所有可能的定理。 因此，他确定了算法定理证明、计算和任何类型的基于计算的 AI 的基本限制。[GOD][BIB3][MIR]（第 18 节）[GOD21,21a]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-29.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;像大多数伟大的科学家一样，哥德尔建立在早期工作的基础上。 他将 Georg Cantor 的对角化技巧 [CAN]（在 1891 年表明存在不同类型的无穷大）与 Gottlob Frege [FRE]（他在 1879 年引入了第一种形式语言）、Thoralf Skolem [SKO23]（他 在 1923 年引入了原始递归函数）和 Jacques Herbrand [GOD86]（他发现了 Skolem 方法的局限性）。 这些作者又建立在 Gottfried Wilhelm Leibniz[L86][WI48]（见上文）的正式思想代数（1686 年）的基础上，它与后来的 1847 年布尔代数演绎等价[LE18]。[BOO]&lt;/p&gt;

&lt;p&gt;1935 年，Alonzo Church 通过证明 Hilbert &amp;amp; Ackermann 的 Entscheidungsproblem（决策问题）没有一般解决方案，得出了哥德尔结果的推论/扩展。[CHU] 为此，他使用了他的替代通用编码语言，称为 Untyped Lambda Calculus， 它构成了极具影响力的编程语言 LISP 的基础。 1936年，Alan M. Turing引入了另一个通用模型：图灵机。[TUR]他重新推导了上述结果。[CHU][TUR][HIN][GOD21,21a][TUR21][LEI21,21a] 在 1936 年的同一年，Emil Post 发表了另一个独立的通用计算模型。[POS] 今天我们知道很多这样的模型。&lt;/p&gt;

&lt;p&gt;Konrad Zuse 不仅创造了世界上第一台可工作的可编程通用计算机，[ZU36-38][RO98][ZUS21]，他还设计了第一种高级编程语言 Plankalkül。[BAU][KNU]，他将其应用于国际象棋 在 1945 年 [KNU] 和 1948 年的定理证明。[ZU48] 比较 Newell 和 Simon 在定理证明方面的后期工作（1956）。[NS56] 1940 年代至 70 年代的许多早期人工智能实际上是关于哥德尔风格的定理证明和演绎 [GOD][GOD34,21,21a] 通过专家系统和逻辑编程。&lt;/p&gt;

&lt;p&gt;1964 年，Ray Solomonoff 将贝叶斯（实际上是拉普拉斯[STI83-85]）概率推理与理论计算机科学[GOD][CHU][TUR][POS] 相结合，推导出一种数学上最优（但计算上不可行）的学习预测未来的方式 [AIT1][AIT10] 与 Andrej Kolmogorov 一起创立了 Kolmogorov 复杂性理论或算法信息论 (AIT)，[AIT1-22] 通过形式化概念超越了传统信息论 [SHA48][KUL] 奥卡姆剃刀原理，通过计算数据的最短程序的概念，支持对给定数据进行最简单的解释。 这个概念有许多可计算的、有时间限制的版本，[AIT7][AIT5][AIT12-13][AIT16-17] 以及神经网络的应用。[KO2][CO1-3]&lt;/p&gt;

&lt;p&gt;在 2000 年代初期，Marcus Hutter（在我的瑞士国家科学基金会资助 [UNI] 下工作时）通过最佳动作选择器（通用 AI）增强了 Solomonoff 的通用预测器 [AIT1][AIT10]，用于强化学习代理，这些代理最初未知（ 但至少是可计算的）环境。[AIT20,22] 他还推导出了所有明确定义的计算问题的渐近最快算法，[AIT21] 解决任何问题的速度与此类问题的未知最快求解器一样快，除了加法常数 不依赖于问题的大小。&lt;/p&gt;

&lt;p&gt;自参考 2003 哥德尔机 [GM3-9] 的更一般的最优性不限于渐近最优性。&lt;/p&gt;

&lt;p&gt;然而，由于各种原因，这种数学上最优的 AI 在实践中尚不可行。 相反，实用的现代 AI 是基于次优的、有限的，但还不是很容易理解的技术，例如神经网络和深度学习，这是本文的重点。 但谁知道 20 年后会出现什么样的 AI 历史呢？&lt;/p&gt;

&lt;h2 id=&quot;从大爆炸到遥远的未来的更广泛的历史背景&quot;&gt;从大爆炸到遥远的未来的更广泛的历史背景&lt;/h2&gt;

&lt;p&gt;信用分配是关于在历史数据中寻找模式，并弄清楚以前的事件是如何促成某些事件的。 历史学家这样做。 物理学家这样做。 AI 也会这样做。 让我们退后一步，在最广泛的历史背景下审视人工智能：自大爆炸以来的所有时间。 2014 年，我在其中发现了一个美丽的指数加速模式，[OMG] 从那以后我在许多演讲中都提出了它，它也被写进了 Sibylle Berg 的获奖书籍“GRM：Brainfuck”。[OMG2] 以前出版 这种模式跨越的时间间隔要短得多：只有几十年或几个世纪或最多几千年。[OMG1]&lt;/p&gt;

&lt;p&gt;事实证明，从人类的角度来看，自宇宙诞生以来最重要的事件都整齐地排列在指数加速的时间轴上（误差线大多低于 10%）。 事实上，历史似乎在 2040 年左右汇聚在一个欧米茄点。 我喜欢叫它Omega，因为一个世纪前，Teilhard de Chardin称Omega是人类将达到下一个层次的点。[OMG0]另外，Omega听起来比“Singularity”[SING1-2]好听多了——听起来有点 就像“哦，我的上帝。”[OMG]&lt;/p&gt;

&lt;p&gt;让我们从138亿年前的大爆炸说起。 我们将这个时间除以 4 得到大约 35 亿年。 欧米茄是2040年左右。 在欧米茄负 35 亿年时，发生了一件非常重要的事情：生命出现在这个星球上。&lt;/p&gt;

&lt;p&gt;我们再次花费四分之一的时间。 我们在 9 亿年前出现，当时发生了一件非常重要的事情：类似动物的移动生命出现了。&lt;/p&gt;

&lt;p&gt;我们再除以 4。我们在 2.2 亿年前，当哺乳动物被发明时，我们就出来了，我们的祖先。&lt;/p&gt;

&lt;p&gt;我们再次除以 4。5500 万年前，第一批灵长类动物出现了，我们的祖先。&lt;/p&gt;

&lt;p&gt;自宇宙诞生以来最重要的事件似乎整齐地排列在 2040 年左右收敛于 Omega 点的指数加速时间线上（J Schmidhuber，2014 年）&lt;/p&gt;

&lt;p&gt;我们再次除以 4。1300 万年前，第一批原始人出现了，我们的祖先。 我不知道为什么所有这些除以 4 的除法总是在历史上出现这些决定性的时刻。 但他们确实如此。 我也试过三度、五度和谐波比例，但似乎只有四分之一奏效。&lt;/p&gt;

&lt;p&gt;我们再次除以 4。350 万年前发生了一件非常重要的事情：技术的黎明，正如大自然所说：第一批石器。&lt;/p&gt;

&lt;p&gt;我们除以 4。80 万年前，下一个伟大的技术突破发生了：可控火力。&lt;/p&gt;

&lt;p&gt;我们除以 4。 20 万年前，解剖学上的现代人变得突出，我们的祖先。&lt;/p&gt;

&lt;p&gt;我们除以 4. 5 万年前，出现了行为上现代的人，我们的祖先，并开始在世界上殖民。&lt;/p&gt;

&lt;p&gt;我们再次除以 4。我们在 13000 年前出现，当时发生了一件非常重要的事情：动物的驯化、农业、第一批定居点——文明的开始。 现在我们看到，所有的文明只是世界历史上的一瞬间，只是大爆炸以来时间的百万分之一。 农业和航天器几乎是同时发明的。&lt;/p&gt;

&lt;p&gt;我们除以 4。 3300 年前，铁器时代出现了第一次人口爆炸。&lt;/p&gt;

&lt;p&gt;我们除以 4。请记住，收敛点 Omega 是 2040 年左右。 欧米茄负 800 年——那是在 13 世纪，在中国，铁和火以枪炮、大炮和火箭的形式结合在一起。 从那时起，这就定义了世界，西方仍然远远落后于欠中国的许可费。&lt;/p&gt;

&lt;p&gt;我们再次除以 4。 欧米茄减去 200 年——我们来到了 19 世纪中叶，当时铁和火以越来越复杂的形式结合在一起，通过改进的蒸汽机为工业革命提供动力，基于博蒙特、帕潘、纽科门的工作 、瓦特和其他人（1600 年代至 1700 年代，超越了 1 世纪亚历山大港的 Heron [RAU1] 的第一台简单蒸汽机）。 电话（例如 Meucci 1857、Reis 1860、Bell 1876）[NASC3] 开始彻底改变通信方式。 疾病的细菌理论（巴斯德和科赫，1800 年代后期）彻底改变了医疗保健并使人们的平均寿命更长。 大约在 1850 年，以化肥为基础的农业革命（Sprengel &amp;amp; von Liebig，1800 年代初期）帮助引发了第二次人口爆炸，并在 20 世纪达到顶峰，当时世界人口翻了两番，让 20 世纪在所有世纪中脱颖而出 人类的历史，由制造人造肥料的 Haber-Bosch 工艺驱动，如果没有人造肥料，世界最多只能养活 40 亿人。[HAB1-2]&lt;/p&gt;

&lt;p&gt;我们再除以 4。 欧米茄减去 50 年——差不多是 1990 年，20 世纪 3 场大战的结束：第一次世界大战、第二次世界大战和冷战。 最有价值的 7 家上市公司都是日本公司（如今大多数都在美国）； 然而，中国和美国西海岸都开始迅速崛起，为 21 世纪奠定了基础。 通过手机和无线革命（基于 1800 年代发现的无线电波）以及面向所有人的廉价个人电脑，数字神经系统开始席卷全球。 WWW 是由 Tim Berners-Lee 在瑞士的欧洲粒子对撞机上创建的。 现代人工智能也大约在这个时候开始：第一辆真正的自动驾驶汽车于 1980 年代由 Ernst Dickmanns 团队在慕尼黑制造（到 1994 年，他们的机器人汽车以最高 180 公里/小时的速度在高速公路上行驶）。 [AUT] 那时候，我在写我 1987 年的毕业论文 [META1]，它介绍了不仅用于学习而且用于元学习或学习学习的算法，[META] 通过经验学习更好的学习算法（现在很流行 主题 [DEC])。 然后是我们在 TU Munich 的奇迹年 1990-91[MIR]，这是当今被引用最多的神经网络 [MOST] 和通过自我监督/无监督学习（见上文）进行现代深度学习的根源，[UN][UN0-3 ] LSTM/Highway Net/ResNet 原理（现在放在你智能手机的口袋里——见上文），[DL4][DEC][MOST] 人工好奇心和针对发明自己问题的代理的生成对抗性神经网络（见上文），[ AC90-AC20][PP-PP2][SA17] 具有线性化自注意力的变压器（见上文），[FWP0-6][TR5-6] 将教师 NN 提取为学生 NN（见上文），[UN][UN0- 3] 在多个抽象层次和多个时间尺度上学习行动计划（见上文），[HRL0-2][LEC] 和其他令人兴奋的东西。 其中大部分已经变得非常流行，并改善了数十亿人的生活。[DL4][DEC][MOST]&lt;/p&gt;

&lt;p&gt;我们再次除以 4。Omega 减去 13 年——这是不久的将来的一个时间点，大约在 2030 年，届时许多人预测廉价的 AI 将具有人类的脑力。 然后是最后 13 年左右，直到 Omega，那时不可思议的事情将会发生（尽管对这一切持保留态度 [OMG1]）。&lt;/p&gt;

&lt;p&gt;但当然，时间不会因欧米茄而停止。 也许只有人类主导的历史才会结束。 在 Omega 之后，许多好奇的元学习 AI 发明了自己的目标（这些目标已经在我的实验室中存在了几十年[AC][AC90,AC90b]）将迅速改进自己，仅受限于可计算性和物理学的基本限制。&lt;/p&gt;

&lt;p&gt;超级智能人工智能会做什么？ 太空对人类充满敌意，但对设计合理的机器人友好，它提供的资源比我们的生物圈薄膜要多得多，后者吸收的太阳能量不到太阳能的十亿分之一。 虽然一些好奇的 AI 会继续对生命着迷，至少只要他们还没有完全理解生命，[ACM16][FA15][SP16][SA17] 大多数人会对机器人和软件生命的令人难以置信的新机会更感兴趣 在太空中。 通过小行星带及更远地区无数的自我复制机器人工厂，它们将改造太阳系，然后在几十万年内改造整个银河系，并在数百亿年内改造可及宇宙的其余部分。 尽管存在光速限制，但不断扩大的 AI 领域将有足够的时间来殖民和塑造整个可见宇宙。&lt;/p&gt;

&lt;p&gt;让我稍微扩展一下你的想法。 宇宙还很年轻，只有 138 亿岁。 还记得我们一直除以 4 吗？ 现在让我们乘以 4！ 让我们展望未来，宇宙的年龄将是现在的 4 倍：大约 550 亿年。 届时，可见的宇宙将充满智慧。 因为在 Omega 之后，大多数 AI 将不得不去大多数物理资源所在的地方，以制造更多更大的 AI。 那些没有的不会有影响。[ACM16][FA15][SP16]&lt;/p&gt;

&lt;p&gt;计算所有可能的超宇宙或可计算宇宙的最简单和最快的方法。 于尔根·施密德胡贝尔，1997 年&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-17-juergen-deep-learning-history-31.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;致谢&quot;&gt;致谢&lt;/h2&gt;

&lt;p&gt;Creative Commons License 以上部分材料取自以前的 AI 博客文章。[MIR] [DEC] [GOD21] [ZUS21] [LEI21] [AUT] [HAB2] [ARC06] [AC] [ATT] [DAN] [DAN1 ] [DL4] [GPUCNN5,8] [DLC] [FDL] [FWP] [LEC] [META] [MLP2] [MOST] [PLAN] [UN] [LSTMPG] [BP4] [DL6a] [HIN] [T22 ] 感谢许多专家审稿人（包括几位著名的神经网络先驱）提出的有益意见。 由于科学是关于自我纠正的，如果您能发现任何剩余的错误，请通过 juergen@idsia.ch 告诉我。 在我的出版物页面和我的 arXiv 页面中可以找到许多其他相关出版物。 本作品根据 Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License 获得许可。&lt;/p&gt;

&lt;h2 id=&quot;555-参考文献调查-dl1-中还有更多参考文献&quot;&gt;555+ 参考文献（调查 [DL1] 中还有更多参考文献）&lt;/h2&gt;</content><author><name>Jürgen Schmidhuber | [译] AI &amp; 麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="深度学习" /><category term="Deep Learning" /><category term="神经网络" /><category term="Artificial Neural Network" /><category term="机器学习" /><category term="Machine Learning" /><category term="ML" /><category term="ANN" /><category term="Transformer" /><category term="CNN" /><category term="RNN" /><category term="循环神经网络" /><category term="神经网络" /><category term="人工神经网络" /><category term="Artificial Intelligence" /><category term="LSTM" /><category term="长短时记忆" /><summary type="html">本文译自 LSTM 作者 Jürgen Schmidhuber，全文主要由 AI 翻译生成，麦克船长进行部分校对，这篇超长文章为了串联起了深度学习领域的大事件，以及那些引领我们的优秀科学家们。</summary></entry><entry><title type="html">当下生成式 AI（AIGC）领域的应用图景</title><link href="https://www.mikecaptain.com/2023/01/13/antler-generative-ai/" rel="alternate" type="text/html" title="当下生成式 AI（AIGC）领域的应用图景" /><published>2023-01-13T18:09:43+00:00</published><updated>2023-01-13T18:09:43+00:00</updated><id>https://www.mikecaptain.com/2023/01/13/antler-generative-ai</id><content type="html" xml:base="https://www.mikecaptain.com/2023/01/13/antler-generative-ai/">&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-15-antler-generative-ai-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本文译自 Antler Blog，原作者 Ollie Forsyth，中文译文由 AI 及麦克船长完成翻译。&lt;/p&gt;

&lt;p&gt;随着 ChatGPT 和 DALL-E 的发布，2022 年社交媒体平台上最热门的话题之一在最近几周爆发，引发了关于其对全球人员、职业和行业影响的激烈辩论。 争议的核心是什么？ 生成式 AI (Gen-AI)——可以快速创建新内容的系统，例如大学论文、歌曲和数字艺术作品。 这些能力令人印象深刻，但它们也引发了关于工作的未来以及人类在 AI 主导的世界中的作用的重要问题。 随着生成式人工智能的不断发展，考虑伦理意义和对社会的潜在影响将变得至关重要。 如果创造性工作在很大程度上被人工智能机器取代，会发生什么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#什么是-gen-ai&quot; id=&quot;markdown-toc-什么是-gen-ai&quot;&gt;什么是 Gen-AI？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#人工智能与生成人工智能&quot; id=&quot;markdown-toc-人工智能与生成人工智能&quot;&gt;人工智能与生成人工智能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#广阔的机遇正在展开&quot; id=&quot;markdown-toc-广阔的机遇正在展开&quot;&gt;广阔的机遇正在展开&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gen-ai的影响&quot; id=&quot;markdown-toc-gen-ai的影响&quot;&gt;Gen-AI的影响&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#培训模型在实践中如何运作&quot; id=&quot;markdown-toc-培训模型在实践中如何运作&quot;&gt;培训模型在实践中如何运作？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#语言模型是如何创建的&quot; id=&quot;markdown-toc-语言模型是如何创建的&quot;&gt;语言模型是如何创建的？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么-gen-ai-存在&quot; id=&quot;markdown-toc-为什么-gen-ai-存在&quot;&gt;为什么 Gen-AI 存在？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#展望未来gen-ai收入模式&quot; id=&quot;markdown-toc-展望未来gen-ai收入模式&quot;&gt;展望未来——Gen-AI收入模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么现在&quot; id=&quot;markdown-toc-为什么现在&quot;&gt;为什么现在？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gen-ai筹款格局&quot; id=&quot;markdown-toc-gen-ai筹款格局&quot;&gt;Gen-AI筹款格局&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gen-ai独角兽格局&quot; id=&quot;markdown-toc-gen-ai独角兽格局&quot;&gt;Gen-AI独角兽格局&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#趋势&quot; id=&quot;markdown-toc-趋势&quot;&gt;趋势：&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#gen-ai-如何用于艺术和音乐&quot; id=&quot;markdown-toc-gen-ai-如何用于艺术和音乐&quot;&gt;Gen-AI 如何用于艺术和音乐？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gen-ai-如何用于游戏&quot; id=&quot;markdown-toc-gen-ai-如何用于游戏&quot;&gt;Gen-AI 如何用于游戏？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#生成式-ai-将会如何影响创作者经济&quot; id=&quot;markdown-toc-生成式-ai-将会如何影响创作者经济&quot;&gt;生成式 AI 将会如何影响创作者经济？&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#这个空间的未来是什么它可能面临什么挑战&quot; id=&quot;markdown-toc-这个空间的未来是什么它可能面临什么挑战&quot;&gt;这个空间的未来是什么，它可能面临什么挑战？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gen-ai-将影响元宇宙具体如何影响还有待观察&quot; id=&quot;markdown-toc-gen-ai-将影响元宇宙具体如何影响还有待观察&quot;&gt;Gen-AI 将影响元宇宙——具体如何影响还有待观察。&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#让我们一起塑造未来&quot; id=&quot;markdown-toc-让我们一起塑造未来&quot;&gt;让我们一起塑造未来&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考链接&quot; id=&quot;markdown-toc-参考链接&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这份报告深入探讨了 Gen-AI 的世界，并且是第一份面向所有人的综合市场地图。 我们概述了该领域的 160 多个平台及其投资者，以及领先思想领袖对这项技术潜力的见解。 这为读者提供了一个独特的机会，可以全面了解生成人工智能市场以及新玩家挑战谷歌等老牌玩家的潜力。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“生成式 AI 是一项基础技术，并且与这些新平台一样，它带来的机会很多——我们已经过了‘如果’的阶段，我们正处于‘何时’和‘如何’的阶段。” 随着 LLM 开源，我们看到基础设施层日趋成熟和民主化，这加速了应用层。”——Irina Elena Haivas，Atomico 的投资者和合伙人&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;请注意：本文提供的信息基于 Antler 的零投资日方法和我们为全球创始人提供的支持。 我们行业地图中的特色平台来自 Crunchbase。 值得注意的是，其中一些平台可能与 AI 和 Gen-AI 相交。 如果您认为您的平台应该包含在我们未来的映射中，请通过 Ollie.Forsyth@antler.co 与我们联系。&lt;/p&gt;

&lt;h2 id=&quot;什么是-gen-ai&quot;&gt;什么是 Gen-AI？&lt;/h2&gt;

&lt;p&gt;想象这样一个世界，您可以使用生成式辅助工具在几分钟内完成您的项目，而不是花几天时间写一篇博客文章、一周时间创建演示文稿或几个月时间写一篇学术论文。 这些工具不仅帮助我们完成项目，还支持我们做出更好的决策。&lt;/p&gt;

&lt;p&gt;以下是 Gen-AI 平台可能变得多么强大的一个例子：对于那些熟悉我们关于创作者经济的报告的人来说，想象一个世界，在这个世界里，创作者可以将他们的内容上传到任何语言，并用他们自己的声音作为画外音，而不是依赖 在机器人或本地翻译器上。 这是一个美丽的新世界，在这里我们可以获得强大的工具，可以节省我们无数的时间并提高我们的工作效率。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“我们正处于生成人工智能的转折点，原因有二：计算机可以比以往任何时候都更好地创造，而且人们与它们的互动从未如此简单。”——Molly Welch，Radical Ventures 的投资者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-15-antler-generative-ai-2.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“在 Media Monks，我们相信生成式 AI 将对我们的行业产生重大影响，尽管很难想象这项惊人技术的真正范围。 我们研究生成式人工智能已有大约五年时间，创新速度呈指数级增长。 技术的进步发生在我们的生产时间表内，范围从 1 到 6 个月不等。 这意味着我们在项目开始时使用的工具在我们上线时已经过时了。” — Media Monks 的创意 AI 设计师兼工程师 Samuel Snider Held。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;人工智能与生成人工智能&quot;&gt;人工智能与生成人工智能&lt;/h2&gt;

&lt;p&gt;人工智能 (AI) 是一个广义术语，指的是任何能够实现智能行为的技术。 这可能包括范围广泛的技术，从可以对数据进行排序的简单算法，到可以模仿类人思维过程的更先进的系统。&lt;/p&gt;

&lt;p&gt;另一方面，生成式人工智能 (Gen-AI) 是一种特定类型的人工智能，专注于生成新内容，例如文本、图像或音乐。 这些系统在大型数据集上进行训练，并使用机器学习算法生成与训练数据相似的新内容。 这在各种应用程序中都很有用，例如创作艺术、音乐，甚至为聊天机器人生成文本。&lt;/p&gt;

&lt;p&gt;从本质上讲，人工智能是一个广义的术语，涵盖了许多不同的技术，而生成人工智能是一种专注于创造新内容的特定类型的人工智能。&lt;/p&gt;

&lt;h2 id=&quot;广阔的机遇正在展开&quot;&gt;广阔的机遇正在展开&lt;/h2&gt;

&lt;p&gt;未来，Gen-AI 很可能会对创意产业产生重大影响。 虽然一些创意可能会被 Gen-AI 系统取代，但其他创意可能会找到新的机会来使用这些系统或创建由 Gen-AI 支持的内容。 在许多情况下，它实际上可以增强创意人员的工作，使他们能够创建更加个性化或独特的内容，或者产生新的想法和概念，如果不使用 AI，这些想法和概念可能是不可能的。&lt;/p&gt;

&lt;p&gt;Gen-AI 对创意人员的一个潜在好处是，它可以使他们能够更快、更高效地创建内容。 例如，作家可以使用 Gen-AI 系统生成文章或故事的草稿，然后他们可以对其进行编辑和完善。 这可以节省时间并让创意人员专注于工作中最重要的方面。&lt;/p&gt;

&lt;p&gt;“生成式 AI 是一股巨大的浪潮，它将在几乎所有行业中产生不可避免的涟漪，对于其中的绝大多数，我们认为这将带来难以置信的增值。我们看到了最大的机会，因为平台是建立在基础之上的 模型，其中用户体验、可访问性和嵌入性将成为这场比赛的关键差异化因素。所有这些都需要由杀手级的上市战略提供动力，最重要的是，速度！下半年将是关键。” ——Stephanie Chan，Samaipata Ventures 投资人。&lt;/p&gt;

&lt;h2 id=&quot;gen-ai的影响&quot;&gt;Gen-AI的影响&lt;/h2&gt;

&lt;p&gt;根据使用方式的不同，这项技术可能会产生许多不同的影响。 例如，Gen-AI 可用于创建新的内容，如音乐或图像，这些内容可用于多种用途，例如为创意者提供更多的灵活性和想象力。 它还可用于通过生成新的训练数据来改进机器学习算法。 总的来说，Gen-AI 的影响肯定是巨大的，因为它有潜力创造新的有用内容并提高机器学习系统的性能。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“我们正在走向人工智能广泛应用的时代。 但广泛可用和实际可用于实现业务成果是两件截然不同的事情。” —Dave Rogenmoser，Jasper 的首席执行官兼联合创始人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;培训模型在实践中如何运作&quot;&gt;培训模型在实践中如何运作？&lt;/h2&gt;

&lt;p&gt;Gen-AI 训练模型通过从大量示例数据集中学习并使用该知识生成与训练数据集中示例相似的新数据来工作。 这通常是使用一种称为生成模型的机器学习算法来完成的。有许多不同类型的生成模型，每种模型都使用不同的方法来生成新数据。 一些常见类型的生成模型包括生成对抗网络 (GAN)、变分自动编码器 (VAE) 和自回归模型。&lt;/p&gt;

&lt;p&gt;例如，在人脸图像数据集上训练的生成模型可能会学习人脸的一般结构和外观，然后使用这些知识生成新的、以前未见过的看起来真实可信的人脸。&lt;/p&gt;

&lt;p&gt;生成模型用于各种应用程序，包括图像生成、自然语言处理和音乐生成。 它们对于手动生成新数据困难或昂贵的任务特别有用，例如在为产品创建新设计或生成逼真的语音的情况下。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“这些新的基础模型以及建立在其上的应用程序加快了许多行业的步伐：为游戏和社交媒体公司生成创意内容，自动化企业内部的手动流程，帮助扩大以前无法想象的业务，如电影、音乐和漫画制作—— 可能性是无限的。”——Manjot Pahwa，Lightspeed Venture Partners 的投资者&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;语言模型是如何创建的&quot;&gt;语言模型是如何创建的？&lt;/h2&gt;

&lt;p&gt;创建语言模型的方法有多种，但最常见的方法是使用机器学习算法在现有文本的大型数据集上训练模型。 此过程通常包括以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;收集现有文本的大型数据集。 此数据集应代表您希望模型能够生成的语言或文本样式。&lt;/li&gt;
  &lt;li&gt;预处理文本数据以清理并准备训练。 这通常涉及将文本标记为单个单词或短语，并将所有单词转换为小写。&lt;/li&gt;
  &lt;li&gt;在预处理的文本数据上训练机器学习算法。 这可以使用多种算法来完成，包括递归神经网络 (RNN) 和长短期记忆 (LSTM) 网络。&lt;/li&gt;
  &lt;li&gt;通过调整模型的参数和超参数以及在必要时使用额外的训练数据来微调训练模型。&lt;/li&gt;
  &lt;li&gt;通过使用经过训练的模型生成示例文本并评估结果来测试模型。 这可以通过将生成的文本与原始训练数据进行比较，或使用其他指标（例如困惑度或 BLEU 分数）来完成。&lt;/li&gt;
  &lt;li&gt;通过重复步骤 4 和 5 来优化模型，直到生成的文本具有高质量并匹配所需的语言或样式。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“重要的是要注意，创建语言模型需要大量的计算资源和机器学习方面的专业知识——尽管这个空间还很早，但平台正在花费数百万美元来微调他们的产品和服务。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;生成式 AI 类别的创始人当前面临的挑战不仅是要构建产品，还要构建具有持久能力的可防御商业模型。 任何有能力的开发人员都可以围绕这些底层生成引擎包装应用程序皮肤。 解决方案是通过嵌入网络效应、提高转换成本、根深蒂固的产品合作伙伴关系等策略，整合可持续的竞争差异化。”——David Beisel，NextView Ventures 合伙人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;为什么-gen-ai-存在&quot;&gt;为什么 Gen-AI 存在？&lt;/h2&gt;

&lt;p&gt;Gen-AI 的存在是因为它有可能解决许多重要问题，并为广泛领域的无数新机遇打开大门。 Gen-AI 成为一个不断发展的研发领域的一些关键原因包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gen-AI 可以创造新的内容。 Gen-AI 的主要优势之一是它能够生成新内容，例如文本、图像或音乐。 这可用于创造新的艺术、音乐和其他形式的创造性表达，并生成用于训练机器学习模型的数据。&lt;/li&gt;
  &lt;li&gt;Gen-AI 可以提高效率和生产力。 通过自动生成内容，Gen-AI 可以帮助节省时间并减少人工劳动。 这可以提高各个领域的效率和生产力，从新闻和内容创建到数据注释和分析。&lt;/li&gt;
  &lt;li&gt;Gen-AI 可以提高生成内容的质量。 随着机器学习和自然语言处理的进步，Gen-AI 变得越来越复杂，能够生成人类难以与真实内容区分开来的高质量内容。&lt;/li&gt;
  &lt;li&gt;Gen-AI 可以启用新的应用程序和用途。 Gen-AI 创造新内容的能力为新的应用和用途开辟了许多可能性。 例如，它可用于创建个性化体验，例如个性化新闻文章或个性化音乐推荐。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“这并不广为人知。 我的观点是，生成式 AI 模型现在很神奇，因为它们已经能够通过语言接收人们的输入。因为它们能够代表如此多的不同概念——并将它们结合起来——它们可以产生美丽、狂野和创造性的结果。 这令人兴奋、激动，也许还有点可怕。 对于创意人员来说，这意味着通过灵感来寻找灵感，更快地创建原型，并结合模型 (Photoshop++) 的技能来完善作品。’’——Sharon Zhou。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;展望未来gen-ai收入模式&quot;&gt;展望未来——Gen-AI收入模式&lt;/h2&gt;

&lt;p&gt;使用 Gen-AI 技术的公司有几种潜在的收入模式。 一些可能的收入来源包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将技术许可给可以使用它来改进其产品或服务的其他公司或组织。&lt;/li&gt;
  &lt;li&gt;将 AI 系统的输出（例如生成的图像、视频或文本）出售给可以将它们用于各种目的的客户。&lt;/li&gt;
  &lt;li&gt;提供对人工智能系统的访问作为订阅服务，客户可以使用它来生成自己的输出&lt;/li&gt;
  &lt;li&gt;使用 AI 系统提高公司现有产品或服务的效率或有效性，然后向客户收取这些增强产品的费用。&lt;/li&gt;
  &lt;li&gt;创建利用 AI 系统功能的新产品或服务，并将其直接销售给客户。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;为什么现在&quot;&gt;为什么现在？&lt;/h2&gt;

&lt;p&gt;现在是 Gen-AI 时代的几个原因。 首先，机器学习和自然语言处理的进步使人工智能系统能够生成高质量的、类似人类的内容。 其次，艺术、营销和娱乐等领域对个性化和独特内容的需求不断增长，增加了对 Gen-AI 平台的需求。 第三，大量数据和强大计算资源的可用性使得大规模训练和部署这些类型的模型成为可能。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“人们曾承诺人工智能将改变世界，自 2012 年以来我们一直在等待。在过去的两三年里，终于发生了一些变化。 虽然最近围绕生成 AI 的兴奋一直是文本到图像，但我相信 AI 驱动的文本生成将被证明更具变革性。 现在，随着越来越多地使用尖端语言模型，我们看到这项技术扩散到日常产品中——彻底改变了公司开展业务的方式，并重新构想了人类体验技术的方式。”——Aidan Gomez，Cohere 联合创始人兼首席执行官。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-15-antler-generative-ai-3.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;阅读我们的 Gen-AI 初创公司完整列表（定期更新）&lt;/p&gt;

&lt;p&gt;Gen-AI 类别说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文本：总结或自动化内容。&lt;/li&gt;
  &lt;li&gt;图像：生成图像。&lt;/li&gt;
  &lt;li&gt;音频：总结、生成或转换音频中的文本。&lt;/li&gt;
  &lt;li&gt;视频：生成或编辑视频。&lt;/li&gt;
  &lt;li&gt;代码：生成代码。&lt;/li&gt;
  &lt;li&gt;聊天机器人：自动化客户服务等。&lt;/li&gt;
  &lt;li&gt;机器学习平台：应用程序/机器学习平台。&lt;/li&gt;
  &lt;li&gt;搜索：人工智能驱动的洞察力。&lt;/li&gt;
  &lt;li&gt;游戏：Gen-AI 游戏工作室或应用程序。&lt;/li&gt;
  &lt;li&gt;数据：设计、收集或总结数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gen-ai筹款格局&quot;&gt;Gen-AI筹款格局&lt;/h2&gt;

&lt;p&gt;由于许多投资者专注于 Gen-AI 领域，我们列出了最活跃的投资者：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-15-antler-generative-ai-4.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;少数投资于 Gen-AI 领域的投资者。 这些投资者也可能投资于后期或早期阶段的公司。&lt;/p&gt;

&lt;h2 id=&quot;gen-ai独角兽格局&quot;&gt;Gen-AI独角兽格局&lt;/h2&gt;

&lt;p&gt;尽管该行业仍在兴起，但一些独角兽已经出现。 到目前为止，2019 年生产了两只独角兽，2020 年生产了一只，2022 年生产了四只。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-15-antler-generative-ai-5.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;趋势&quot;&gt;趋势：&lt;/h2&gt;

&lt;h3 id=&quot;gen-ai-如何用于艺术和音乐&quot;&gt;Gen-AI 如何用于艺术和音乐？&lt;/h3&gt;

&lt;p&gt;Gen-AI 正以几种不同的方式用于艺术和音乐。 一个常见的应用是使用生成模型来创造新的艺术和音乐，方法是从头开始生成全新的作品，或者以现有作品为起点并向其中添加新元素。 例如，生成模型可能会在大型绘画数据集上进行训练，然后用于生成与数据集中的作品相似但又独特且原创的新绘画。&lt;/p&gt;

&lt;h3 id=&quot;gen-ai-如何用于游戏&quot;&gt;Gen-AI 如何用于游戏？&lt;/h3&gt;

&lt;p&gt;Gen-AI 正以多种方式用于游戏，包括创建新的关卡或地图、生成新的对话或故事情节，以及创建新的虚拟环境。 例如，游戏可能会使用 Gen-AI 模型来创建一个新的、独特的关卡，供玩家在每次玩游戏时探索，或者根据玩家的动作为非玩家角色生成新的对话选项。 此外，Gen-AI 可用于创建新的、逼真的虚拟环境供玩家探索，例如城市、森林或行星。 总的来说，它可以用来为游戏体验增加一定程度的活力和多样性，使它们对玩家来说更具吸引力和身临其境。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘“一般而言，短期的创新领域会非常积极。 众所周知，游戏和在线 3D 体验难以构建——生成式 AI 将彻底颠覆这一现状，让游戏资产的创建变得更加容易。 在游戏中应用生成式 AI 的潜在缺点，或者更确切地说是后果，更为现实。 虽然像 AI 生成的文案或图像创建这样的单维应用程序只是我们执行的现有任务的放大器，但仍然允许我们控制输出的应用程序（即，我们可以决定接受/拒绝一份副本并决定在哪里 使用副本），我们在游戏中与 AI 的交互将更加多维。 随着时间的推移，AI（无论是环境、行为还是 NPC 角色）将进化并适应人类的注意，同样，人类将习惯于在这些 AI 生成的领域中进行社交和定期互动。”——Roblox 的 Annie Zhang。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;生成式-ai-将会如何影响创作者经济&quot;&gt;生成式 AI 将会如何影响创作者经济？&lt;/h3&gt;

&lt;p&gt;创作者经济已经是一个价值 1000 亿美元的行业，正准备持续颠覆，Gen-AI 可能会对创意产生重大影响，尤其是那些创作音乐、艺术或写作的人。 然而，它确实为创作者提供了从第一天起就走向全球的机会，允许他们的内容使用创作者的声音转化为任何语言，或者将他们的创造力转化为更具吸引力的内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“生成式 AI 会将创作者变成超级英雄，并扩大他们不那么强大的领域。更多地将其视为创作者的副驾驶，而不是创作者的替代者。” ——Jim Louderback，Inside The Creator Economy 的作者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了让创作者经济取得成功，平台需要适应创作者的个性，以便在内容可能主要由 AI 平台支持时，创作者与他们的粉丝建立某种形式的联系。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“我认为人的因素对于艺术具有价值是必不可少的。 当 AI 生成的艺术是由算法和机器创造的，而不是由具有自己的经验、情感和观点的个人创造时，它可以被视为缺乏通常被视为伟大艺术必不可少的真实性和人性。 这可能会使一些观众难以在情感层面上与 AI 生成的艺术产生联系，从而降低其影响力和重要性。”——创作者 Ivona Tau。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然而，当我们问创作者 Gen-AI 将对他们产生什么影响时，一位创作者说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“不多。 也就是说，我正怀着极大的兴趣关注正在发生的事情。 其他人在生成模型的帮助下获得的结果让我深受启发。 你经常听到艺术家将 AI 图像模型称为“工具”，但 AI 不仅仅是一种工具。 它是创意伙伴、合成精灵或鼓舞人心的盟友。”——艺术家詹姆斯·格尼 (James Gurney)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;这个空间的未来是什么它可能面临什么挑战&quot;&gt;这个空间的未来是什么，它可能面临什么挑战？&lt;/h2&gt;

&lt;p&gt;Gen-AI 面临许多挑战，包括提高这些模型产生的输出的质量和多样性，提高它们生成输出的速度，并使它们更加健壮和可靠。 另一个主要挑战是开发生成式 Gen-AI 模型，这些模型能够更好地理解和整合他们正在处理的数据的底层结构和上下文，以便产生更准确和连贯的输出。 此外，对于生成式人工智能的伦理和社会影响，以及如何确保以负责任和有益的方式使用这些技术，也存在持续的担忧。&lt;/p&gt;

&lt;p&gt;让我们仔细看看其中的一些问题：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;版权&lt;/strong&gt;。 截至今天，要了解这些平台如何识别真实的原始来源或艺术作品的来源是一项挑战——这些模型是由数亿个数据点训练的。 创作者担心这些平台将如何减轻对创作者作品的版权侵权。 正如我们在 Lauryn Ipsum 发布的最近一个案例中看到的那样，Lensa 应用程序中使用的图像具有原始艺术家签名的背景。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“目前生成人工智能中最紧迫的问题之一是系统可信度。 像 OpenAI 的 ChatGPT 这样的大型语言模型很容易分享不正确或错误的响应。 在图像生成中，系统已经接受了大量图像的训练，系统输出存在版权和知识产权问题，使企业用户不确定将它们集成到产品或工作流程中。”——Molly Welch，Radical Ventures 的投资者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;学生写论文&lt;/strong&gt;。 随着这些平台变得更加智能，精明的年轻学生将在日常生活中采用它们。 这将如何影响他们的学术工作，他们的教授将如何确定这是否真的是他们的工作？ Gen-AI 将对教育领域产生巨大影响，这还有待观察。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“假设 ChatGPT 模型不断改进，学生使用 chatGPT 来补充学习的机会是无穷无尽的。 学生可以使用它来生成测验和抽认卡的内容，以帮助他们学习、优化现有代码，甚至为学习指南编写摘要。 这里的关键词是补充。 除了他们自己已经投入的原创作品之外，学生还应该使用 ChatGPT。当学生使用 ChatGPT 内容代替他们的作品，甚至提交 ChatGPT 内容作为他们自己的原创想法时，ChatGPT 可能会出现问题。 大学行政部门和学生需要共同努力制定政策，明确说明这个新世界可以接受的内容。 上周我参加了一次开卷考试，明确禁止使用 ChatGPT 或任何其他人工智能支持。” —Cherie Lou，斯坦福大学的创作者和学生。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;虚假信息与错误信息&lt;/strong&gt;。尽管这些系统非常聪明，但有时它们不可避免地会提供错误信息。 例如，最近在英国第 4 频道的一次采访中，主持人向 Open AI 询问他的职业道路，聊天机器人助手给出了不准确的信息。 随着训练模型变得更具适应性并更多地了解我们，最终算法中的错误将会减少。&lt;/p&gt;

&lt;p&gt;Gen-AI 的缺点包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果训练数据不够多样化或不够具有代表性，则生成的数据存在偏差风险。&lt;/li&gt;
  &lt;li&gt;对生成人工智能在某些行业取代人类劳动的潜力的担忧，导致失业。&lt;/li&gt;
  &lt;li&gt;Gen-AI 被用于恶意目的的可能性，例如制造假新闻或冒充个人。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gen-AI 有可能取代从设计师到制作人再到艺术家的数百万个工作岗位； 但是，创意总是会在某些方面存在。&lt;/p&gt;

&lt;h2 id=&quot;gen-ai-将影响元宇宙具体如何影响还有待观察&quot;&gt;Gen-AI 将影响元宇宙——具体如何影响还有待观察。&lt;/h2&gt;

&lt;p&gt;很难准确预测生成式 AI 将如何影响元宇宙，因为后者在很大程度上仍是一个理论概念，并且对于它的外观或功能尚无共识。 然而，Gen-AI 将在其创造和发展中发挥重要作用，因为它将允许在虚拟世界中自动生成内容和体验。 这可能会导致更加身临其境和动态的元宇宙，几乎可以无限地提供新的和独特的体验供用户享受。 Gen-AI 也有可能用于在元宇宙中自动执行各种任务，例如管理虚拟经济并确保虚拟世界保持稳定和正常运行。 总体而言，Gen-AI 对元宇宙的影响可能是重大而广泛的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“人工智能堆栈的不同层级将存在商机，我们已经看到一些商业模式正在出现。 显然，生产像 GPT-3 这样的基础模型非常昂贵和复杂，少数能够做到这一点的公司将获得丰厚的报酬。 但是，有无数机会开发更专业的模型并将通用功能捆绑到特定目标市场需要的东西中。 这相当于垂直SaaS，应用于AI。 我们可能会看到许多支持 AI 的 SaaS 游戏，它们为特定市场提供具有出色 UX 的整体解决方案。在堆栈的更下方，提供正确类型的训练数据，使 ML 工程师能够快速构建专业模型并 确保模型的稳健性都是非常可行的业务。”—Andreas Goeldi，BTOV Ventures 的合伙人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;让我们一起塑造未来&quot;&gt;让我们一起塑造未来&lt;/h2&gt;

&lt;p&gt;准备好迎接将彻底改变未来工作方式的技术转变！ 我们正处在一个新时代的边缘，成千上万的工作岗位将被改变，新的工作岗位将被创造出来。 这些尖端的 Gen-AI 平台无疑将支持和改善我们的日常生活，但我们需要时间才能完全适应它们。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“这种前所未有的人机协作水平正在如火如荼地进行，无论你身处哪个行业，无论你身处哪个行业，无论谁率先全面整合生成式 AI 方法，游戏现在都向他们开放。”——Gabrielle Chou，副教授 上海纽约大学。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.antler.co/blog/generative-ai&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ollie Forsyth | [译] AI &amp; 麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="生成式AI" /><category term="Generative AI" /><category term="游戏" /><category term="game" /><category term="Gen-AI" /><category term="AIGC" /><summary type="html">随着 ChatGPT 和 DALL-E 的发布，2022 年社交媒体平台上最热门的话题之一在最近几周爆发，引发了关于其对全球人员、职业和行业影响的激烈辩论。 争议的核心是什么？ 生成式 AI (Gen-AI)——可以快速创建新内容的系统，例如大学论文、歌曲和数字艺术作品。 这些能力令人印象深刻，但它们也引发了关于工作的未来以及人类在 AI 主导的世界中的作用的重要问题。 随着生成式人工智能的不断发展，考虑伦理意义和对社会的潜在影响将变得至关重要。 如果创造性工作在很大程度上被人工智能机器取代，会发生什么？</summary></entry><entry><title type="html">游戏生产力革命：生成式 AI（AIGC）正在深度变革游戏领域</title><link href="https://www.mikecaptain.com/2023/01/11/generative-ai-revolution-in-games/" rel="alternate" type="text/html" title="游戏生产力革命：生成式 AI（AIGC）正在深度变革游戏领域" /><published>2023-01-11T18:33:49+00:00</published><updated>2023-01-11T18:33:49+00:00</updated><id>https://www.mikecaptain.com/2023/01/11/generative-ai-revolution-in-games</id><content type="html" xml:base="https://www.mikecaptain.com/2023/01/11/generative-ai-revolution-in-games/">&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作者 James Gwertzman and Jack Soslow&lt;/li&gt;
  &lt;li&gt;[译] AI &amp;amp; 麦克船长&lt;/li&gt;
  &lt;li&gt;本文授权首发媒体「锐察力」，微信公众号 ID @ruichali&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#什么是生成式人工智能&quot; id=&quot;markdown-toc-什么是生成式人工智能&quot;&gt;什么是生成式人工智能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part-1观察和预测&quot; id=&quot;markdown-toc-part-1观察和预测&quot;&gt;Part 1、观察和预测&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一假设&quot; id=&quot;markdown-toc-一假设&quot;&gt;一、假设&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1通用人工智能的研究量将继续增长创造出更有效的技术&quot; id=&quot;markdown-toc-1通用人工智能的研究量将继续增长创造出更有效的技术&quot;&gt;1、通用人工智能的研究量将继续增长，创造出更有效的技术&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2在所有娱乐中游戏将受生成人工智能的影响最大&quot; id=&quot;markdown-toc-2在所有娱乐中游戏将受生成人工智能的影响最大&quot;&gt;2、在所有娱乐中，游戏将受生成人工智能的影响最大&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3游戏制作中涉及的每一项资产都会有一个生成式ai模型&quot; id=&quot;markdown-toc-3游戏制作中涉及的每一项资产都会有一个生成式ai模型&quot;&gt;3、游戏制作中涉及的每一项资产都会有一个生成式AI模型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4内容价格将大幅下降在某些情况下实际上会降为零&quot; id=&quot;markdown-toc-4内容价格将大幅下降在某些情况下实际上会降为零&quot;&gt;4、内容价格将大幅下降，在某些情况下实际上会降为零。&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5我们还处于这场革命的初级阶段很多实践还需要完善&quot; id=&quot;markdown-toc-5我们还处于这场革命的初级阶段很多实践还需要完善&quot;&gt;5、我们还处于这场革命的初级阶段，很多实践还需要完善&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二预测&quot; id=&quot;markdown-toc-二预测&quot;&gt;二、预测&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1学习如何有效地使用生成式人工智能将成为一种有市场价值的技能&quot; id=&quot;markdown-toc-1学习如何有效地使用生成式人工智能将成为一种有市场价值的技能&quot;&gt;1、学习如何有效地使用生成式人工智能将成为一种有市场价值的技能&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2降低壁垒将带来更多的冒险精神和创造性探索&quot; id=&quot;markdown-toc-2降低壁垒将带来更多的冒险精神和创造性探索&quot;&gt;2、降低壁垒将带来更多的冒险精神和创造性探索&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3人工智能辅助的微游戏工作室兴起&quot; id=&quot;markdown-toc-3人工智能辅助的微游戏工作室兴起&quot;&gt;3、人工智能辅助的「微游戏工作室」兴起&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4每年发行的游戏数量增加&quot; id=&quot;markdown-toc-4每年发行的游戏数量增加&quot;&gt;4、每年发行的游戏数量增加&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5生成式-ai-之前不可能创建的新游戏类型&quot; id=&quot;markdown-toc-5生成式-ai-之前不可能创建的新游戏类型&quot;&gt;5、生成式 AI 之前不可能创建的新游戏类型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6价值将归于行业特定的人工智能工具而不仅仅是基础模型&quot; id=&quot;markdown-toc-6价值将归于行业特定的人工智能工具而不仅仅是基础模型&quot;&gt;6、价值将归于行业特定的人工智能工具，而不仅仅是基础模型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#7法律挑战来了&quot; id=&quot;markdown-toc-7法律挑战来了&quot;&gt;7、法律挑战来了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#8节目不会像艺术内容那样受到严重破坏至少现在还没有&quot; id=&quot;markdown-toc-8节目不会像艺术内容那样受到严重破坏至少现在还没有&quot;&gt;8、节目不会像艺术内容那样受到严重破坏——至少现在还没有&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#三建议&quot; id=&quot;markdown-toc-三建议&quot;&gt;三、建议&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1现在开始探索生成式-ai&quot; id=&quot;markdown-toc-1现在开始探索生成式-ai&quot;&gt;1、现在开始探索生成式 AI&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2寻找市场地图机会&quot; id=&quot;markdown-toc-2寻找市场地图机会&quot;&gt;2、寻找市场地图机会&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part-2市场地图&quot; id=&quot;markdown-toc-part-2市场地图&quot;&gt;Part 2、市场地图&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一市场现状&quot; id=&quot;markdown-toc-一市场现状&quot;&gt;一、市场现状&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二2d-图像&quot; id=&quot;markdown-toc-二2d-图像&quot;&gt;二、2D 图像&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1概念艺术&quot; id=&quot;markdown-toc-1概念艺术&quot;&gt;1、概念艺术&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2二维制作艺术&quot; id=&quot;markdown-toc-2二维制作艺术&quot;&gt;2、二维制作艺术&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#三3d-图稿&quot; id=&quot;markdown-toc-三3d-图稿&quot;&gt;三、3D 图稿&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#13d资产&quot; id=&quot;markdown-toc-13d资产&quot;&gt;1、3D资产&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#23d-纹理&quot; id=&quot;markdown-toc-23d-纹理&quot;&gt;2、3D 纹理&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3动画&quot; id=&quot;markdown-toc-3动画&quot;&gt;3、动画&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4关卡设计和世界建设&quot; id=&quot;markdown-toc-4关卡设计和世界建设&quot;&gt;4、关卡设计和世界建设&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#四声音&quot; id=&quot;markdown-toc-四声音&quot;&gt;四、声音&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1声音特效&quot; id=&quot;markdown-toc-1声音特效&quot;&gt;1、声音特效&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2音乐&quot; id=&quot;markdown-toc-2音乐&quot;&gt;2、音乐&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3语音和对话&quot; id=&quot;markdown-toc-3语音和对话&quot;&gt;3、语音和对话&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#五npc-或玩家角色&quot; id=&quot;markdown-toc-五npc-或玩家角色&quot;&gt;五、NPC 或玩家角色&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#六多合一平台&quot; id=&quot;markdown-toc-六多合一平台&quot;&gt;六、多合一平台&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#七结论&quot; id=&quot;markdown-toc-七结论&quot;&gt;七、结论&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要了解生成式 AI 将如何彻底改变游戏，只需看看 &lt;a href=&quot;https://twitter.com/emmanuel_2m&quot;&gt;@emmanuel_2m&lt;/a&gt; 最近发布的这篇 &lt;a href=&quot;https://twitter.com/emmanuel_2m/status/1589995198289182720&quot;&gt;Twitter 帖子&lt;/a&gt;。 在这篇文章中，他探讨了使用 Stable Diffusion + Dreambooth（流行的 2D 生成 AI 模型）为假设的游戏生成药水图像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这项工作的变革性不仅在于它节省了时间和金钱，同时还提供了质量——从而打破了经典的“成本、质量或速度只能有两个”的三角关系。艺术家们现在可以在几个小时内创作出高质量的图像，否则手工生成这些图像需要数周时间。 真正具有变革性的是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;现在，任何可以学习一些简单工具的人都可以获得这种创造力。&lt;/li&gt;
  &lt;li&gt;这些工具可以以高度迭代的方式创建无数的变体。&lt;/li&gt;
  &lt;li&gt;一旦经过训练，这个过程就是实时的——结果几乎是即时可用的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自实时 3D 以来，还没有出现过对游戏具有如此革命性意义的技术。 花任何时间与游戏创作者交谈，兴奋和惊奇的感觉是显而易见的。 那么这项技术将走向何方？ 它将如何改变游戏？ 不过，首先，让我们回顾一下什么是生成式人工智能？&lt;/p&gt;

&lt;h4 id=&quot;什么是生成式人工智能&quot;&gt;什么是生成式人工智能&lt;/h4&gt;

&lt;p&gt;生成式 AI 是机器学习的一种，计算机可以根据用户的提示生成原创的新内容。 今天，文本和图像是这项技术最成熟的应用，但几乎每个创意领域都在开展工作，从动画到音效，再到音乐，甚至创建具有完全充实个性的虚拟角色。&lt;/p&gt;

&lt;p&gt;当然，人工智能在游戏中并不是什么新鲜事。 即使是早期的游戏，如 Atari 的 Pong，也有计算机控制的对手来挑战玩家。 然而，这些虚拟敌人并没有像我们今天所知道的那样运行人工智能。 它们只是游戏设计师编写的脚本程序。 他们模拟了一个人工智能对手，但他们无法学习，他们只能和建造他们的程序员一样好。&lt;/p&gt;

&lt;p&gt;由于更快的微处理器和云，现在的不同之处在于可用的计算能力。 有了这种能力，就可以构建大型神经网络来识别高度复杂领域中的模式和表征。&lt;/p&gt;

&lt;p&gt;这篇博文分为两部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一部分包含我们对游戏生成 AI 领域的观察和预测。&lt;/li&gt;
  &lt;li&gt;第二部分是我们的空间市场地图，概述了各个细分市场并确定了每个细分市场中的关键公司。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-1观察和预测&quot;&gt;Part 1、观察和预测&lt;/h3&gt;

&lt;h4 id=&quot;一假设&quot;&gt;一、假设&lt;/h4&gt;

&lt;p&gt;首先，让我们探讨一下这篇博文其余部分的一些假设：&lt;/p&gt;

&lt;h5 id=&quot;1通用人工智能的研究量将继续增长创造出更有效的技术&quot;&gt;1、通用人工智能的研究量将继续增长，创造出更有效的技术&lt;/h5&gt;

&lt;p&gt;考虑一下 arXiv 档案中每月发表的关于机器学习或人工智能的学术论文数量图表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-2.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如您所见，论文数量呈指数级增长，丝毫没有放缓的迹象。 这仅包括已发表的论文——许多研究甚至从未发表过，直接用于开源模型或产品研发。 结果是兴趣和创新的爆炸式增长。&lt;/p&gt;

&lt;h5 id=&quot;2在所有娱乐中游戏将受生成人工智能的影响最大&quot;&gt;2、在所有娱乐中，游戏将受生成人工智能的影响最大&lt;/h5&gt;

&lt;p&gt;就涉及的资产类型（2D 艺术、3D 艺术、音效、音乐、对话等）的数量而言，游戏是最复杂的娱乐形式。 游戏也是最具互动性的，非常强调实时体验。 这为新游戏开发者创造了一个陡峭的进入壁垒，同时也为制作一款现代的、排行榜首的游戏付出了高昂的成本。 它还为生成式 AI 的颠覆创造了巨大的机会。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-3.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想想像 Red Dead Redemption 2 这样的游戏，它是有史以来最昂贵的游戏之一，制作成本接近 5 亿美元。 原因很容易理解——它拥有市场上所有游戏中最美丽、最真实的虚拟世界之一。 它还花费了将近 8 年的时间打造，拥有超过 1,000 个不可玩的角色（每个角色都有自己的个性、艺术作品和配音演员），一个近 30 平方英里的世界，超过 100 个任务分为 6 个章节，以及 由 100 多位音乐家创作的近 60 小时的音乐。 这个游戏的一切都很大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-4.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在将 Red Dead Redemption 2 与 Microsoft Flight Simulator 进行比较，后者不仅大，而且非常庞大。 Microsoft Flight Simulator 使玩家能够在整个地球上飞行，包括 1.97 亿平方英里的地球。 微软是如何打造如此庞大的游戏的？ 通过让人工智能来做。 微软与 blackshark.ai 合作，训练人工智能从 2D 卫星图像生成逼真的 3D 世界。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-5.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个游戏的例子，如果不使用 AI，实际上是不可能构建的，而且，从这些模型可以随着时间的推移不断改进这一事实中获益。 例如，他们可以增强“高速公路三叶草立交桥”模型，重新运行整个构建过程，并突然之间，整个星球上的所有高速公路立交桥都得到了改善。&lt;/p&gt;

&lt;h5 id=&quot;3游戏制作中涉及的每一项资产都会有一个生成式ai模型&quot;&gt;3、游戏制作中涉及的每一项资产都会有一个生成式AI模型&lt;/h5&gt;

&lt;p&gt;到目前为止，像 Stable Diffusion 或 MidJourney 这样的 2D 图像生成器已经获得了生成式 AI 的大部分流行兴奋，因为它们可以生成图像的引人注目的特性。 但是，已经存在适用于游戏中几乎所有资产的生成式 AI 模型，从 3D 模型到角色动画，再到对话和音乐。 这篇博文的后半部分包括一张市场地图，突出显示了一些专注于每种类型内容的公司。&lt;/p&gt;

&lt;h5 id=&quot;4内容价格将大幅下降在某些情况下实际上会降为零&quot;&gt;4、内容价格将大幅下降，在某些情况下实际上会降为零。&lt;/h5&gt;

&lt;p&gt;在与正在尝试将生成式 AI 集成到他们的生产流程中的游戏开发人员交谈时，最令人兴奋的是时间和成本的大幅减少。 一位开发人员告诉我们，他们为单个图像生成概念艺术的时间从开始到完成已从 3 周减少到一个小时：减少了 120 比 1。 我们相信在整个生产流程中也可能实现类似的节省。&lt;/p&gt;

&lt;p&gt;需要明确的是，艺术家没有被取代的危险。 这确实意味着艺术家不再需要自己完成所有工作：他们现在可以设定最初的创意方向，然后将大部分耗时和技术执行交给人工智能。 在这方面，他们就像手绘动画早期的赛璐珞画家，技艺高超的“墨水工”画出动画的轮廓，然后成本较低的“画家”大军会完成耗时的绘画工作。 动画 cels，填充线条。 它是游戏创建的“自动完成”。&lt;/p&gt;

&lt;h5 id=&quot;5我们还处于这场革命的初级阶段很多实践还需要完善&quot;&gt;5、我们还处于这场革命的初级阶段，很多实践还需要完善&lt;/h5&gt;

&lt;p&gt;尽管最近很兴奋，但我们仍处于起跑线上。 在我们弄清楚如何将这项新技术用于游戏的过程中，还有大量的工作要做，并且将为迅速进入这一新领域的公司创造巨大的机会。&lt;/p&gt;

&lt;h4 id=&quot;二预测&quot;&gt;二、预测&lt;/h4&gt;

&lt;p&gt;鉴于这些假设，以下是对游戏行业如何转变的一些预测：&lt;/p&gt;

&lt;h5 id=&quot;1学习如何有效地使用生成式人工智能将成为一种有市场价值的技能&quot;&gt;1、学习如何有效地使用生成式人工智能将成为一种有市场价值的技能&lt;/h5&gt;

&lt;p&gt;我们已经看到一些实验者比其他人更有效地使用生成式人工智能。 要充分利用这项新技术，需要使用各种工具和技术，并了解如何在它们之间灵活运用。 我们预测这将成为一种适销对路的技能，将艺术家的创意视野与程序员的技术技能相结合。&lt;/p&gt;

&lt;p&gt;克里斯·安德森 (Chris Anderson) 有句名言：“每一次富足都会造成新的稀缺。” 随着内容变得丰富，我们相信最短缺的是知道如何使用 AI 工具最有效地协作和工作的艺术家。&lt;/p&gt;

&lt;p&gt;例如，将生成式 AI 用于制作艺术品面临着特殊的挑战，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;连贯性。 对于任何生产资产，您都需要能够在以后对资产进行更改或编辑。 使用 AI 工具，这意味着需要能够使用相同的提示重现资产，这样您就可以进行更改。这可能很棘手，因为相同的提示可能会产生截然不同的结果。&lt;/li&gt;
  &lt;li&gt;风格。 给定游戏中的所有艺术都具有一致的风格很重要——这意味着您的工具需要根据您给定的风格进行培训或以其他方式绑定。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2降低壁垒将带来更多的冒险精神和创造性探索&quot;&gt;2、降低壁垒将带来更多的冒险精神和创造性探索&lt;/h5&gt;

&lt;p&gt;我们可能很快就会进入游戏开发的新“黄金时代”，在这个时代，较低的进入门槛会导致更多创新和创意游戏的爆发。 不仅因为较低的制作成本导致较低的风险，还因为这些工具释放了为更广泛的受众创建高质量内容的能力。 这导致下一个预测……&lt;/p&gt;

&lt;h5 id=&quot;3人工智能辅助的微游戏工作室兴起&quot;&gt;3、人工智能辅助的「微游戏工作室」兴起&lt;/h5&gt;

&lt;p&gt;借助生成式 AI 工具和服务，我们将开始看到由只有 1 或 2 名员工的微型“微型工作室”制作出更多可行的商业游戏。 成立小型独立游戏工作室的想法并不新鲜——热门游戏 Among Us 是由只有 5 名员工的 Innersloth 工作室开发的——但这些小型工作室可以开发的游戏的规模和规模将会增长。 这将导致……&lt;/p&gt;

&lt;h5 id=&quot;4每年发行的游戏数量增加&quot;&gt;4、每年发行的游戏数量增加&lt;/h5&gt;

&lt;p&gt;Unity 和 Roblox 的成功表明，提供强大的创意工具可以打造更多游戏。 生成式 AI 将进一步降低门槛，创造更多的游戏。 该行业已经面临发现挑战——仅去年一年就有超过 10,000 款游戏被添加到 Steam——这将给发现带来更大的压力。 然而，我们也会看到……&lt;/p&gt;

&lt;h5 id=&quot;5生成式-ai-之前不可能创建的新游戏类型&quot;&gt;5、生成式 AI 之前不可能创建的新游戏类型&lt;/h5&gt;

&lt;p&gt;我们将看到新的游戏类型的发明，如果没有生成式 AI，这些游戏类型根本不可能实现。 我们已经谈过麦克风rosoft 的飞行模拟器，但将会有依赖于实时生成新内容的全新类型的发明。&lt;/p&gt;

&lt;p&gt;考虑一下 Spellbrush 的 Arrowmancer。 这是一款角色扮演游戏，以 AI 创建的角色为特色，提供几乎无限的新游戏玩法。&lt;/p&gt;

&lt;p&gt;我们还知道另一家游戏开发商正在使用 AI 让玩家创建自己的游戏内头像。 以前他们有一组手绘的头像图像，玩家可以混合搭配这些图像来创建他们的头像——现在他们完全抛弃了这一点，只是简单地根据玩家的描述生成头像图像。 让玩家通过 AI 生成内容比让玩家从头开始上传自己的内容更安全，因为可以训练 AI 避免创建令人反感的内容，同时仍然给玩家更大的主人翁感。&lt;/p&gt;

&lt;h5 id=&quot;6价值将归于行业特定的人工智能工具而不仅仅是基础模型&quot;&gt;6、价值将归于行业特定的人工智能工具，而不仅仅是基础模型&lt;/h5&gt;

&lt;p&gt;围绕 Stable Diffusion 和 Midjourney 等基础模型的兴奋和热议正在产生令人瞠目结舌的估值，但新研究的持续涌入确保了随着新技术的改进，新模型将会出现和消失。 考虑 3 种流行的生成式 AI 模型的网站搜索流量：Dall-E、Midjourney 和 Stable Diffusion。 每个新模型都会成为人们关注的焦点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-6.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一种方法可能是构建行业一致的工具套件，专注于特定行业的生成 AI 需求，深入了解特定受众，并充分集成到现有的生产管道（例如 Unity 或 Unreal 游戏）。&lt;/p&gt;

&lt;p&gt;一个很好的例子是 Runway，它通过视频编辑、绿屏移除、修复和运动跟踪等人工智能辅助工具来满足视频创作者的需求。 像这样的工具可以建立特定的受众并从中获利，随着时间的推移添加新的模型。 我们还没有看到像 Runway 这样的游戏套件出现，但我们知道这是一个积极发展的空间。&lt;/p&gt;

&lt;h5 id=&quot;7法律挑战来了&quot;&gt;7、法律挑战来了&lt;/h5&gt;

&lt;p&gt;所有这些生成式 AI 模型的共同点是它们是使用海量内容数据集进行训练的，这些数据集通常是通过抓取互联网本身创建的。 例如，Stable Diffusion 接受了超过 50 亿个图像/标题对的训练，这些图像/标题对是从网络上抓取的。&lt;/p&gt;

&lt;p&gt;目前这些模型声称在“合理使用”版权原则下运作，但这一论点尚未在法庭上得到明确检验。 很明显，法律挑战即将到来，这可能会改变生成人工智能的格局。&lt;/p&gt;

&lt;p&gt;大型工作室可能会通过建立基于他们拥有明确权利和所有权的内部内容的专有模型来寻求竞争优势。 例如，微软在这方面的地位尤其有利，目前拥有 23 个第一方工作室，在收购 Activision 后还有 7 个。&lt;/p&gt;

&lt;h5 id=&quot;8节目不会像艺术内容那样受到严重破坏至少现在还没有&quot;&gt;8、节目不会像艺术内容那样受到严重破坏——至少现在还没有&lt;/h5&gt;

&lt;p&gt;软件工程是游戏开发的另一项主要成本，但正如我们 a16z Enterprise 团队的同事在他们最近的博客文章中分享的那样，艺术并没有死，它只是机器生成的，使用 AI 模型生成代码需要更多测试和 验证，因此与生成创意资产相比，生产力的提高较小。 像 Copilot 这样的编码工具可能会为工程师提供适度的性能改进，但不会产生同样的影响……至少在短期内不会。&lt;/p&gt;

&lt;h4 id=&quot;三建议&quot;&gt;三、建议&lt;/h4&gt;

&lt;p&gt;基于这些预测，我们提出以下建议：&lt;/p&gt;

&lt;h5 id=&quot;1现在开始探索生成式-ai&quot;&gt;1、现在开始探索生成式 AI&lt;/h5&gt;

&lt;p&gt;需要一段时间才能弄清楚如何充分利用即将到来的生成式 AI 革命的力量。 现在开始的公司以后会有优势。 我们知道有几家工作室正在进行内部实验项目，以探索这些技术如何影响制作。&lt;/p&gt;

&lt;h5 id=&quot;2寻找市场地图机会&quot;&gt;2、寻找市场地图机会&lt;/h5&gt;

&lt;p&gt;我们市场地图的某些部分已经非常拥挤，例如动画或语音与对话，但其他领域则非常开放。 我们鼓励对这一领域感兴趣的企业家将精力集中在尚未探索的领域，例如“游戏跑道”。&lt;/p&gt;

&lt;h3 id=&quot;part-2市场地图&quot;&gt;Part 2、市场地图&lt;/h3&gt;

&lt;h4 id=&quot;一市场现状&quot;&gt;一、市场现状&lt;/h4&gt;

&lt;p&gt;我们已经创建了一个市场地图来捕获我们在每个类别中发现的公司列表，我们在这些类别中看到生成 AI 影响游戏。 这篇博文逐一介绍了这些类别，对其进行了更详细的解释，并重点介绍了每个类别中最令人兴奋的公司。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-7.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;二2d-图像&quot;&gt;二、2D 图像&lt;/h4&gt;

&lt;p&gt;根据文本提示生成二维图像已经是生成式人工智能应用最广泛的领域之一。 Midjourney、Stable Diffusion 和 Dall-E 2 等工具可以从文本生成高质量的 2D 图像，并且已经在游戏生命周期的多个阶段进入游戏制作。&lt;/p&gt;

&lt;h5 id=&quot;1概念艺术&quot;&gt;1、概念艺术&lt;/h5&gt;

&lt;p&gt;生成式 AI 工具非常擅长“构思”或帮助非艺术家（如游戏设计师）快速探索概念和想法以生成概念图，这是一个关键部分的生产过程。 例如，一个工作室（保持匿名）正在使用其中的几个工具来从根本上加快他们的概念艺术过程，只需要一天就可以创建一个图像，而以前需要长达 3 周的时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先，他们的游戏设计师使用 Midjourney 探索不同的想法并生成他们觉得鼓舞人心的图像。&lt;/li&gt;
  &lt;li&gt;这些被移交给专业的概念艺术家，他们将它们组装在一起并在结果上绘画以创建一个单一的连贯图像 - 然后将其输入到 Stable Diffusion 中以创建一系列变化。&lt;/li&gt;
  &lt;li&gt;他们讨论这些变化，选择一个，手动绘制一些编辑——然后重复这个过程，直到他们对结果满意为止。&lt;/li&gt;
  &lt;li&gt;在那个阶段，最后一次将此图像传回 Stable Diffusion 以“升级”它以创建最终的艺术作品。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2二维制作艺术&quot;&gt;2、二维制作艺术&lt;/h5&gt;

&lt;p&gt;一些工作室已经在尝试使用相同的工具来制作游戏中的艺术品。 例如，这里有一篇来自 Albert Bozesan 的精彩教程，介绍如何使用 Stable Diffusion 创建游戏中的 2D 资产。&lt;/p&gt;

&lt;h4 id=&quot;三3d-图稿&quot;&gt;三、3D 图稿&lt;/h4&gt;

&lt;p&gt;3D 资产是所有现代游戏以及即将到来的元宇宙的基石。 虚拟世界或游戏关卡本质上只是 3D 资产的集合，经过放置和修改以填充环境。 然而，创建 3D 资产比创建 2D 图像更复杂，并且涉及多个步骤，包括创建 3D 模型和添加纹理和效果。 对于动画角色，它还涉及创建内部“骨架”，然后在该骨架之上创建动画。&lt;/p&gt;

&lt;p&gt;我们看到几家不同的初创公司在这个 3D 资产创建过程的每个阶段都在努力，包括模型创建、角色动画和关卡构建。 然而，这还不是一个已解决的问题——还没有任何解决方案准备好完全集成到生产中。&lt;/p&gt;

&lt;h5 id=&quot;13d资产&quot;&gt;1、3D资产&lt;/h5&gt;

&lt;p&gt;试图解决 3D 模型创建问题的初创公司包括 Kaedim、Mirage 和 Hypothetic。 更大的公司也在关注这个问题，包括 Nvidia 的 Get3D 和 Autodesk 的 ClipForge。 Kaedim 和 Get3d 专注于图像到 3D； ClipForge 和 Mirage 专注于文本到 3D，而 Hypothetic 对文本到 3D 搜索以及图像到 3D 都感兴趣。&lt;/p&gt;

&lt;h5 id=&quot;23d-纹理&quot;&gt;2、3D 纹理&lt;/h5&gt;

&lt;p&gt;3D 模型的逼真度取决于应用于网格的纹理或材料。 决定将哪种长满苔藓、风化的石头纹理应用于中世纪城堡模型可以完全改变场景的外观和感觉。 纹理包含关于光如何对材料做出反应的元数据（即粗糙度、光泽度等）。 允许艺术家根据文本或图像提示轻松生成纹理对于提高创作过程中的迭代速度非常有价值。 几个团队正在寻求这个机会，包括 BariumAI、Ponzu 和 ArmorLab。&lt;/p&gt;

&lt;h5 id=&quot;3动画&quot;&gt;3、动画&lt;/h5&gt;

&lt;p&gt;创建出色的动画是游戏创建过程中最耗时、最昂贵且最需要技巧的部分之一。 一种降低成本并创建更逼真的动画的方法是使用动作捕捉，您可以让演员或舞者穿上动作捕捉服，并记录他们在配备特殊仪器的动作捕捉舞台上的移动。&lt;/p&gt;

&lt;p&gt;我们现在看到了可以直接从视频中捕捉动画的生成式 AI 模型。 这样效率更高，因为它不再需要昂贵的动作捕捉装置，还因为这意味着您可以从现有视频中捕捉动画。 这些模型的另一个令人兴奋的方面是，它们还可以用于对现有动画应用过滤器，例如让它们看起来喝醉了、老了或开心了。 进入这一领域的公司包括 Kinetix、DeepMotion、RADiCAL、Move Ai 和 Plask。&lt;/p&gt;

&lt;h5 id=&quot;4关卡设计和世界建设&quot;&gt;4、关卡设计和世界建设&lt;/h5&gt;

&lt;p&gt;游戏创作中最耗时的一个方面是构建游戏世界，生成式 AI 应该非常适合这项任务。 Minecraft、No Man’s Sky 和 Diablo 等游戏已经以使用程序技术生成关卡而闻名，其中关卡是随机创建的，每次都不同，但遵循关卡设计师制定的规则。 新的 Unreal 5 游戏引擎的一大卖点是其用于开放世界设计的程序工具集，例如植被放置。&lt;/p&gt;

&lt;p&gt;我们已经看到该领域的一些举措，例如 Promethean、MLXAR 或 Meta 的 Builder Bot，并且认为生成技术在很大程度上取代程序技术只是时间问题。 该领域的学术研究已经有一段时间了，包括 Minecraft 的生成技术或 Doom 的关卡设计。&lt;/p&gt;

&lt;p&gt;期待用于关卡设计的生成式 AI 工具的另一个令人信服的理由是能够创建不同风格的关卡和世界。 你可以想象在 1920 年的纽约拍板时代要求工具生成一个世界，对比反乌托邦的银翼杀手式未来，对比托尔金式的幻想世界。&lt;/p&gt;

&lt;p&gt;以下概念是由 Midjourney 使用提示“a game level in the st是的……”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023-01-12-generative-ai-revolution-in-games-8.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;四声音&quot;&gt;四、声音&lt;/h4&gt;

&lt;p&gt;声音和音乐是游戏体验的重要组成部分。 我们开始看到公司使用 Generative AI 来生成音频，以补充图形方面已经发生的工作。&lt;/p&gt;

&lt;h5 id=&quot;1声音特效&quot;&gt;1、声音特效&lt;/h5&gt;

&lt;p&gt;音效是 AI 有吸引力的开放领域。 已有学术论文探索使用 AI 在电影中生成「foley」（例如脚步声）的想法，但游戏中的商业产品还很少。&lt;/p&gt;

&lt;p&gt;我们认为这只是时间问题，因为游戏的交互性使其成为生成式 AI 的明显应用，既可以在制作过程中创建静态音效（「激光枪声，星球大战风格」），又 在运行时创建实时交互式音效。&lt;/p&gt;

&lt;p&gt;考虑为玩家角色生成脚步声这样简单的事情。 大多数游戏通过包含少量预先录制的脚步声来解决这个问题：在草地上行走、在砾石上行走、在草地上奔跑、在砾石上奔跑等。生成和管理这些声音很乏味，并且在运行时听起来重复且不真实。&lt;/p&gt;

&lt;p&gt;更好的方法是实时生成拟音效果的 AI 模型，它可以动态生成适当的音效，每次都略有不同，对游戏中的参数（如地面、角色重量、 步态、鞋类等&lt;/p&gt;

&lt;h5 id=&quot;2音乐&quot;&gt;2、音乐&lt;/h5&gt;

&lt;p&gt;音乐一直是游戏的挑战。 这很重要，因为它可以帮助设定情绪基调，就像在电影或电视中一样，但由于游戏可以持续数百甚至数千小时，它很快就会变得重复或烦人。 此外，由于游戏的互动性，音乐可能很难在任何给定时间精确匹配屏幕上发生的事情。&lt;/p&gt;

&lt;p&gt;二十多年来，自适应音乐一直是游戏音频领域的一个话题，一直追溯到微软用于创建互动音乐的「DirectMusic」系统。 DirectMusic 从未被广泛采用，主要是因为以这种格式进行创作很困难。 只有少数游戏，如 Monolith 的 No One Lives Forever，创造了真正的互动配乐。&lt;/p&gt;

&lt;p&gt;现在我们看到许多公司正在尝试创建 AI 生成的音乐，例如 Soundful、Musico、Harmonai、Infinite Album 和 Aiva。 虽然今天的一些工具，如 Open AI 的 Jukebox，计算密集度很高，不能实时运行，但大多数工具都可以在初始模型构建后实时运行。&lt;/p&gt;

&lt;h5 id=&quot;3语音和对话&quot;&gt;3、语音和对话&lt;/h5&gt;

&lt;p&gt;有大量公司试图为游戏中的角色创造逼真的声音。 考虑到尝试通过语音合成为计算机提供声音的悠久历史，这并不奇怪。 公司包括 Sonantic、Coqui、Replica Studios、Resemble.ai、Readspeaker.ai 等等。&lt;/p&gt;

&lt;p&gt;使用生成式 AI 进行语音有多种优势，这在一定程度上解释了为什么这个领域如此拥挤。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;即时生成对话。 通常游戏中的语音是由配音演员预先录制的，但这些仅限于预先录制的录音语音。 通过生成式 AI 对话，角色可以说任何话——这意味着他们可以对玩家的行为做出充分的反应。 结合用于 NPC 的更智能的 AI 模型（不在本博客的范围内，但现在是一个同样令人兴奋的创新领域），对玩家完全反应的游戏的承诺即将到来。&lt;/li&gt;
  &lt;li&gt;角色扮演。 许多玩家想扮演与他们在现实世界中的身份几乎没有相似之处的奇幻角色。 然而，一旦玩家用自己的声音说话，这种幻想就会破灭。 使用与玩家头像相匹配的生成声音可以保持这种错觉。&lt;/li&gt;
  &lt;li&gt;控制。 生成语音时，您可以控制声音的细微差别，如音色、音调变化、情感共鸣、音素长度、重音等。&lt;/li&gt;
  &lt;li&gt;本土化。 允许将对话翻译成任何语言并以相同的声音说出来。 像 Deepdub 这样的公司专门专注于这个利基市场。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;五npc-或玩家角色&quot;&gt;五、NPC 或玩家角色&lt;/h4&gt;

&lt;p&gt;许多初创公司正在考虑使用生成式 AI 来创建可以与之互动的可信角色，部分原因是这是一个在游戏之外具有如此广泛适用性的市场，例如虚拟助理或接待员。&lt;/p&gt;

&lt;p&gt;创造可信角色的努力可以追溯到 AI 研究的开端。 事实上，经典的人工智能“图灵测试”的定义是，人类应该无法区分与人工智能和人类的聊天对话。&lt;/p&gt;

&lt;p&gt;目前，有数百家公司在构建通用聊天机器人，其中许多由类似 GPT-3 的语言模型提供支持。 少数人专门尝试构建以娱乐为目的的聊天机器人，例如试图构建虚拟朋友的 Replika 和 Anima。 正如电影《她》中探讨的那样，与虚拟女友约会的概念可能比您想象的更接近。&lt;/p&gt;

&lt;p&gt;我们现在看到了这些聊天机器人平台的下一次迭代，例如 Charisma.ai、Convai.com 或 Inworld.ai，旨在为完全撕裂提供动力创建具有情感和代理的 3D 角色，以及允许创作者为这些角色设定目标的工具。 如果他们要融入游戏或在推动情节发展方面有一个叙事位置，而不是纯粹的门面装饰，这一点就很重要。&lt;/p&gt;

&lt;h4 id=&quot;六多合一平台&quot;&gt;六、多合一平台&lt;/h4&gt;

&lt;p&gt;Runwayml.com 是最成功的生成式 AI 工具之一，因为它在一个软件包中汇集了广泛的创作者工具套件。 目前还没有这样的视频游戏平台，我们认为这是一个被忽视的机会。 我们很乐意投资具有以下特点的解决方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;涵盖整个生产过程的全套人工智能生成工具。 （代码、资产生成、纹理、音频、描述等）&lt;/li&gt;
  &lt;li&gt;与 Unreal 和 Unity 等流行游戏引擎紧密集成。&lt;/li&gt;
  &lt;li&gt;旨在适应典型的游戏制作流程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;七结论&quot;&gt;七、结论&lt;/h4&gt;

&lt;p&gt;对于游戏创作者来说，这是一个不可思议的时刻！ 部分归功于这篇博文中描述的工具，生成构建游戏所需的内容从未如此简单——即使您的游戏与整个地球一样大！&lt;/p&gt;

&lt;p&gt;甚至有一天可以想象一款完全个性化的游戏，完全根据玩家的需求为玩家打造。 这在科幻小说中已经存在很长时间了——比如《安德的游戏》中的「AI 智力游戏」，或者《星际迷航》中的全息甲板。 但是随着这篇博文中描述的工具发展得如此之快，不难想象这一现实指日可待。&lt;/p&gt;</content><author><name>James Gwertzman and Jack Soslow | [译] AI &amp; 麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="生成式AI" /><category term="Generative AI" /><category term="游戏" /><category term="game" /><category term="Gen-AI" /><category term="AIGC" /><summary type="html">2022 年是生成式 AI（Gen-AI）的元年，而游戏领域也正在被生成式 AI 进行着生产力革命。当下游戏 2D 素材、3D 建模、音频内容、实时生成智能语音交互 …… 等等一系列技术在游戏世界里率先应用，正在推动一个让玩家更可以全方位实时交互的游戏世界的诞生，而不再像以前一样只能依赖以往设定好的游戏交互内容，这令人感到无比兴奋。而这些技术在虚拟世界成熟后，将会逐渐渗透回现实世界中的各项应用，尤其是创作者生态的生产力变革，更进一步地影响普通人日常的内容获取与 AI 交互。</summary></entry><entry><title type="html">通向 AGI 之路：大型语言模型（LLM）技术精要</title><link href="https://www.mikecaptain.com/2023/01/08/agi-llm-tech/" rel="alternate" type="text/html" title="通向 AGI 之路：大型语言模型（LLM）技术精要" /><published>2023-01-08T18:13:09+00:00</published><updated>2023-01-08T18:13:09+00:00</updated><id>https://www.mikecaptain.com/2023/01/08/agi-llm-tech</id><content type="html" xml:base="https://www.mikecaptain.com/2023/01/08/agi-llm-tech/">&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-1.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/597586623&quot;&gt;https://zhuanlan.zhihu.com/p/597586623&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一潮流之巅nlp-研究范式的转换&quot; id=&quot;markdown-toc-一潮流之巅nlp-研究范式的转换&quot;&gt;一、潮流之巅：NLP 研究范式的转换&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1范式转换-10从深度学习到两阶段预训练模型&quot; id=&quot;markdown-toc-1范式转换-10从深度学习到两阶段预训练模型&quot;&gt;1、范式转换 1.0：从深度学习到两阶段预训练模型&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#11影响一中间任务的消亡&quot; id=&quot;markdown-toc-11影响一中间任务的消亡&quot;&gt;1.1、影响一：中间任务的消亡&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#12影响二不同研究方向技术路线的统一&quot; id=&quot;markdown-toc-12影响二不同研究方向技术路线的统一&quot;&gt;1.2、影响二：不同研究方向技术路线的统一&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2范式转换-20-从预训练模型走向通用人工智能-agiartificial-general-intelligence&quot; id=&quot;markdown-toc-2范式转换-20-从预训练模型走向通用人工智能-agiartificial-general-intelligence&quot;&gt;2、范式转换 2.0: 从预训练模型走向通用人工智能 （AGI，Artificial General Intelligence）&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#21过渡期以-gpt-30-为代表的自回归语言模型--prompting模式占据统治地位&quot; id=&quot;markdown-toc-21过渡期以-gpt-30-为代表的自回归语言模型--prompting模式占据统治地位&quot;&gt;2.1、过渡期：以 GPT 3.0 为代表的「自回归语言模型 + Prompting」模式占据统治地位&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#影响一让-llm-适配人的新型交互接口&quot; id=&quot;markdown-toc-影响一让-llm-适配人的新型交互接口&quot;&gt;影响一：让 LLM 适配人的新型交互接口&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#影响二很多-nlp-子领域不再具备独立研究价值&quot; id=&quot;markdown-toc-影响二很多-nlp-子领域不再具备独立研究价值&quot;&gt;影响二：很多 NLP 子领域不再具备独立研究价值&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#影响三更多-nlp-之外的研究领域将被纳入-llm-技术体系&quot; id=&quot;markdown-toc-影响三更多-nlp-之外的研究领域将被纳入-llm-技术体系&quot;&gt;影响三：更多 NLP 之外的研究领域将被纳入 LLM 技术体系&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二学习者从无尽数据到海量知识&quot; id=&quot;markdown-toc-二学习者从无尽数据到海量知识&quot;&gt;二、学习者：从无尽数据到海量知识&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1求知之路llm-学到了什么知识&quot; id=&quot;markdown-toc-1求知之路llm-学到了什么知识&quot;&gt;1、求知之路：LLM 学到了什么知识&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2记忆之地llm-如何存取知识&quot; id=&quot;markdown-toc-2记忆之地llm-如何存取知识&quot;&gt;2、记忆之地：LLM 如何存取知识&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3知识涂改液如何修正-llm-里存储的知识&quot; id=&quot;markdown-toc-3知识涂改液如何修正-llm-里存储的知识&quot;&gt;3、知识涂改液：如何修正 LLM 里存储的知识&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三规模效应当-llm-越来越大时会发生什么&quot; id=&quot;markdown-toc-三规模效应当-llm-越来越大时会发生什么&quot;&gt;三、规模效应：当 LLM 越来越大时会发生什么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四人机接口从-in-context-learning-到-instruct-理解&quot; id=&quot;markdown-toc-四人机接口从-in-context-learning-到-instruct-理解&quot;&gt;四、人机接口：从 In Context Learning 到 Instruct 理解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1神秘的-in-context-learning&quot; id=&quot;markdown-toc-1神秘的-in-context-learning&quot;&gt;1、神秘的 In Context Learning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2神奇的-instruct-理解&quot; id=&quot;markdown-toc-2神奇的-instruct-理解&quot;&gt;2、神奇的 Instruct 理解&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3in-context-learning-和-instruct-的联系&quot; id=&quot;markdown-toc-3in-context-learning-和-instruct-的联系&quot;&gt;3、In Context Learning 和 Instruct 的联系&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五智慧之光如何增强-llm-的推理能力&quot; id=&quot;markdown-toc-五智慧之光如何增强-llm-的推理能力&quot;&gt;五、智慧之光：如何增强 LLM 的推理能力&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1基于-prompt-的方法&quot; id=&quot;markdown-toc-1基于-prompt-的方法&quot;&gt;1、基于 Prompt 的方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2代码预训练增强-llm-推理能力&quot; id=&quot;markdown-toc-2代码预训练增强-llm-推理能力&quot;&gt;2、代码预训练增强 LLM 推理能力&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3关于-llm-推理能力的思考&quot; id=&quot;markdown-toc-3关于-llm-推理能力的思考&quot;&gt;3、关于 LLM 推理能力的思考&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#六未来之路llm-研究趋势及值得研究的重点方向&quot; id=&quot;markdown-toc-六未来之路llm-研究趋势及值得研究的重点方向&quot;&gt;六、未来之路：LLM 研究趋势及值得研究的重点方向&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#探索-llm-模型的规模天花板&quot; id=&quot;markdown-toc-探索-llm-模型的规模天花板&quot;&gt;探索 LLM 模型的规模天花板&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#增强-llm-的复杂推理能力&quot; id=&quot;markdown-toc-增强-llm-的复杂推理能力&quot;&gt;增强 LLM 的复杂推理能力&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#llm-纳入-nlp-之外更多其它研究领域&quot; id=&quot;markdown-toc-llm-纳入-nlp-之外更多其它研究领域&quot;&gt;LLM 纳入 NLP 之外更多其它研究领域&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#更易用的人和-llm-的交互接口&quot; id=&quot;markdown-toc-更易用的人和-llm-的交互接口&quot;&gt;更易用的人和 LLM 的交互接口&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#建设高难度的综合任务评测数据集&quot; id=&quot;markdown-toc-建设高难度的综合任务评测数据集&quot;&gt;建设高难度的综合任务评测数据集&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#高质量数据工程&quot; id=&quot;markdown-toc-高质量数据工程&quot;&gt;高质量数据工程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#超大-llm-模型-transformer-的稀疏化&quot; id=&quot;markdown-toc-超大-llm-模型-transformer-的稀疏化&quot;&gt;超大 LLM 模型 Transformer 的稀疏化&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#七取经之路复刻-chatgpt-时要注意些什么&quot; id=&quot;markdown-toc-七取经之路复刻-chatgpt-时要注意些什么&quot;&gt;七、取经之路：复刻 ChatGPT 时要注意些什么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#八chatgpt为什么是-openai&quot; id=&quot;markdown-toc-八chatgpt为什么是-openai&quot;&gt;八、ChatGPT：为什么是 OpenAI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ChatGPT 出现后惊喜或惊醒了很多人。惊喜是因为没想到大型语言模型（LLM，Large Language Model）效果能好成这样；惊醒是顿悟到我们对LLM的认知及发展理念，距离世界最先进的想法，差得有点远。我属于既惊喜又惊醒的那一批，也是典型的中国人，中国人善于自我反思，于是开始反思，而这篇文章正是反思的结果。&lt;/p&gt;

&lt;p&gt;实话实说，国内在 LLM 模型相关技术方面，此刻，距离最先进技术的差距进一步加大了。技术领先或技术差距这事情，我觉得要动态地以发展的眼光来看。在 Bert 出现之后的一到两年间，其实国内在这块的技术追赶速度还是很快的，也提出了一些很好的改进模型，差距拉开的分水岭应该是在 GPT 3.0 出来之后，也就是 2020 年年中左右。在当时，其实只有很少的人觉察到：GPT 3.0 它不仅仅是一项具体的技术，其实体现的是LLM应该往何处去的一个发展理念。自此之后，差距拉得越来越远，ChatGPT 只是这种发展理念差异的一个自然结果。所以，我个人认为，抛开是否有财力做超大型 LLM 这个因素，如果单从技术角度看，差距主要来自于对 LLM 的认知以及未来应往何处去的发展理念的不同。&lt;/p&gt;

&lt;p&gt;国内被国外技术甩得越来越远，这个是事实，不承认也不行。前阵子网上很多人担忧说国内 AI 现在处于「危急存亡之秋」，我觉得倒也不至于这么严重。君不见，这个世界上，具备这么超前眼光的只有 OpenAI 一家吗？包括 Google 在内，其实对于 LLM 发展理念的理解，明显都落后 OpenAI 一个身位。现实是 OpenAI 表现过于优秀，把所有人都甩开了，不仅仅是国内。&lt;/p&gt;

&lt;p&gt;我觉得，OpenAI 对 LLM 在理念及相关技术方面，领先国外的 Google、DeepMind 大约半年到一年的时间，领先国内大概两年左右的时间。在 LLM 这个事情上，感觉梯队很明显，Google 应该是排在第二位，最能体现 Google 技术眼光的是 PaLM 和 Pathways，推出时间大概在 22 年 2 月到 4 月间，同一时期，OpenAI 推出的却是 InstructGPT，从这里就可以看出 Google 和 OpenAI 的差距了，至于为何这么说，你看了我后面的正文后大概能理解。DeepMind 之前的重心一直在强化学习攻克游戏和 AI for science 这些方面，切入LLM 其实很晚，应该是21 年才开始重视这个方向，目前也处于追赶状态。Meta 就更不用说了，重心一直不在 LLM 上，目前感觉也发力开始追赶。这还是目前做得最好的一批机构，尚且如此，更何况国内呢？我觉得情有可原。至于 OpenAI 关于 LLM 的理念是什么，我在本文的最后一部分，会谈谈我的认知。&lt;/p&gt;

&lt;p&gt;本文梳理自 GPT 3.0 出现之后的主流 LLM 技术，能够让您对LLM领域的技术脉络，LLM 技术发展过程中出现过的不同发展理念，乃至未来可能的发展趋势，有比较清晰的认知。当然，很多地方讲的内容是我个人看法，有很大的主观性，错漏难免，所以还请谨慎参考。&lt;/p&gt;

&lt;p&gt;本文试图回答下面一些问题：ChatGPT 是否带来了 NLP 乃至 AI 领域的研究范式转换？如果是，那会带来怎样的影响？LLM 从海量数据中学到了什么知识？LLM 又是如何存取这些知识的？随着LLM规模逐步增大，会带来什么影响？什么是 In Context Learning？为什么它是一项很神秘的技术？它和 Instruct 又是什么关系？LLM 具备推理能力吗？思维链 CoT 又是怎么做的？等等，相信看完，能让您对这些问题有一个答案。&lt;/p&gt;

&lt;p&gt;首先，在谈LLM技术现状前，先宏观地谈下我心目中的研究范式转换问题。这样，我们才能「先见森林，再见树木」，对具体技术为何会是如此变化有个更清晰的认知。&lt;/p&gt;

&lt;h2 id=&quot;一潮流之巅nlp-研究范式的转换&quot;&gt;一、潮流之巅：NLP 研究范式的转换&lt;/h2&gt;

&lt;p&gt;如果我们把时间线往前拉得更长一些，回到 NLP 领域的深度学习时代，在更长时间窗口内观察技术变迁及其影响，可能会更容易看清其中的一些关键节点。我个人认为，在最近 10 年来NLP领域的技术发展过程中，可能存在两次大的研究范型转换。&lt;/p&gt;

&lt;h3 id=&quot;1范式转换-10从深度学习到两阶段预训练模型&quot;&gt;1、范式转换 1.0：从深度学习到两阶段预训练模型&lt;/h3&gt;

&lt;p&gt;这个范式转换所涵盖的时间范围，大致在深度学习引入 NLP 领域（2013 年左右），到 GPT 3.0 出现之前（2020 年 5 月左右）。&lt;/p&gt;

&lt;p&gt;在 Bert 和 GPT 模型出现之前，NLP 领域流行的技术是深度学习模型，而 NLP 领域的深度学习，主要依托于以下几项关键技术：以大量的改进 LSTM 模型及少量的改进 CNN 模型作为典型的特征抽取器；以 Sequence to Sequence（或叫 encoder-decoder 亦可）+Attention作为各种具体任务典型的总体技术框架。&lt;/p&gt;

&lt;p&gt;在这些核心技术加持下，NLP领域深度学习的主要研究目标，如果归纳一下，是如何有效增加模型层深或模型参数容量。就是说，怎么才能往encoder和decoder里不断叠加更深的LSTM或CNN层，来达成增加层深和模型容量的目标。这种努力，尽管确实不断增加了模型层深，但是从解决具体任务的效果角度看，总体而言，不算很成功，或者说和非深度学习方法相对，带来的优势不算大。&lt;/p&gt;

&lt;p&gt;深度学习之所以不够成功，我认为主要原因来自于两个方面：一方面是某个具体任务有限的训练数据总量。随着模型容量的增加，需要靠更大量的训练数据来支撑，否则即使你能把深度做起来，任务效果也做不上去。而在预训练模型出现之前，很明显这是NLP研究领域一个严重问题；另外一个方面是 LSTM／CNN 特征抽取器，表达能力不够强。意思是就算给你再多的数据也没用，因为你不能有效地吸收数据里蕴含的知识。主要应该是这两个原因，阻碍了深度学习在NLP领域的成功突围。&lt;/p&gt;

&lt;p&gt;Bert/GPT这两个预训练模型的出现，无论在学术研究角度看，还是工业应用角度来看，都代表了 NLP 领域的一个技术飞跃，并带来了整个领域研究范式的转换。这种范式转换带来的影响，体现在两个方面：首先，是部分NLP研究子领域的衰退乃至逐步消亡；其次，NLP 不同子领域的技术方法和技术框架日趋统一，在Bert出现后一年左右，技术栈基本收敛到两种技术模式中。关于这两点，我们分头来谈。&lt;/p&gt;

&lt;h4 id=&quot;11影响一中间任务的消亡&quot;&gt;1.1、影响一：中间任务的消亡&lt;/h4&gt;

&lt;p&gt;NLP 是一个宏观研究领域的统称，里面有五花八门具体的子领域与子方向，如果仔细分析，从任务的性质角度，可以把这些任务分成两大类：一类可以叫做「中间任务」，一类可以称为「最终任务」。&lt;/p&gt;

&lt;p&gt;典型的中间任务包括：中文分词、词性标注、NER、句法分析、指代消解、语义 Parser 等，这类任务一般并不解决应用中的实际需求，大多数是作为那些解决实际需求任务的中间阶段或者辅助阶段存在的，比如几乎没有需求说，我要一个句法 Parser，把这个句子的句法分析树给用户看看，用户不需要看到这些NLP的中间阶段处理结果，他只关心某个具体任务你有没有干好。「最终任务」包括比如文本分类、文本相似性计算、机器翻译、文本摘要等等，有很多。这类任务的特点是每个子领域都解决某个实际需求，任务结果基本能直接呈现给用户，比如用户确实存在给你一句英文，告诉他中文是什么的需求。&lt;/p&gt;

&lt;p&gt;按理说，「中间任务」就不应该出现，而之所以会存在，这是 NLP 技术发展水平不够高的一种体现。在技术发展早期阶段，因为当时的技术相对落后，很难一步做好有难度的最终任务。比如机器翻译，早期技术要做好机器翻译是很困难的，于是科研人员就把难题分而治之，分解成分词、词性标注、句法分析等各种中间阶段，先把每个中间阶段做好，然后再拼起来完成最终任务，这也是没办法的事情。&lt;/p&gt;

&lt;p&gt;但是自从 Bert／GPT 出现之后，其实就没有必要做这些中间任务了，因为通过大量数据的预训练，Bert／GPT 已经把这些中间任务作为语言学特征，吸收到了 Transformer 的参数里，此时我们完全可以端到端地直接解决那些最终任务，而无须对这种中间过程专门建模。这里可能争议最大的是中文分词，其实道理也是一样的，哪些字应该组成一个词，这个其实你不用管，让 LLM 自己当特征去学就行了，只要对于解决任务有帮助，它自然会去学该学的合理分词方式，也未必一定要和我们人类理解的分词规则相同。&lt;/p&gt;

&lt;p&gt;基于以上认知，其实在Bert/GPT一出现，你就应该得出这类NLP的中间阶段的任务，会逐步退出历史舞台这个结论。&lt;/p&gt;

&lt;h4 id=&quot;12影响二不同研究方向技术路线的统一&quot;&gt;1.2、影响二：不同研究方向技术路线的统一&lt;/h4&gt;

&lt;p&gt;在说明具体影响前，我们先讨论下另外一种 NLP 任务划分方式，这对于理解后面内容有帮助。如果对「最终任务」进一步进行分类，又大致可以分为两大不同类型的任务：自然语言理解类任务和自然语言生成类任务。如果排除掉「中间任务」的话，典型的自然语言理解类任务包括文本分类、句子关系判断、情感倾向判断等，这种任务本质上都是分类任务，就是说输入一个句子（文章），或者两个句子，模型参考所有输入内容，最后给出属于哪个类别的判断。自然语言生成也包含很多 NLP 研究子方向，比如聊天机器人、机器翻译、文本摘要、问答系统等。生成类任务的特点是给定输入文本，对应地，模型要生成一串输出文本。这两者的差异主要体现在输入输出形式上。&lt;/p&gt;

&lt;p&gt;自从 Bert/GPT 模型诞生后，出现了明显的技术统一趋向。首先，NLP 中不同的子领域，其特征抽取器都逐渐从 LSTM/CNN 统一到 Transformer 上。其实，自Bert公开后不久，就应该意识到，这必然会成为技术趋势。而且，目前 Transformer 不仅统一了 NLP 诸多领域，也正在逐步地替换图像处理各种任务中被广泛使用的 CNN 等其它模型的进程之中，类似的，多模态模型目前也基本都采用了 Transformer 模型。这种Transformer从NLP出发，攻城略地逐步统一AI越来越多领域的趋势，起始于 2020 年底出现的 Vision Transformer (ViT) ，之后蓬勃发展，到目前已大获成功，且其继续向更多领域拓展的势头会越来越迅猛。&lt;/p&gt;

&lt;p&gt;其次，大多数 NLP 子领域的研发模式切换到了两阶段模式：模型预训练阶段 + 应用微调（Fine-tuning）或应用 Zero／Few Shot Prompt 模式。更准确地说，NLP 各种任务其实收敛到了两个不同的预训练模型框架里：对于自然语言理解类任务，其技术体系统一到了以 Bert 为代表的「双向语言模型预训练 + 应用 Fine-tuning」模式；而对于自然语言生成类任务，其技术体系则统一到了以GPT 2.0 为代表的「自回归语言模型（即从左到右单向语言模型）+ Zero/Few Shot Prompt」模式。至于为何会分化成两条技术路线，有其必然性，关于这点我们放在后面解释。&lt;/p&gt;

&lt;p&gt;这两种模式，看似比较相像，但其背后蕴含了迥异的发展思路，也会导向不同的未来发展方向。不过遗憾的是，我们中的绝大多数人，在当时都低估了GPT 这条发展路线的潜力，而把视觉中心聚焦到了Bert这种模式上。&lt;/p&gt;

&lt;h3 id=&quot;2范式转换-20-从预训练模型走向通用人工智能-agiartificial-general-intelligence&quot;&gt;2、范式转换 2.0: 从预训练模型走向通用人工智能 （AGI，Artificial General Intelligence）&lt;/h3&gt;

&lt;p&gt;这个范式转换所涵盖的时间范围，大致在 GPT 3.0 出现之后（20 年 6 月左右），一直到目前为止，我们应该正处于这个范式转换过程中。&lt;/p&gt;

&lt;p&gt;ChatGPT 是触发这次范型转换的关键节点，但是在 InstructGPT 出现之前，其实 LLM 处于这次范式转换前的一个过渡期。&lt;/p&gt;

&lt;h4 id=&quot;21过渡期以-gpt-30-为代表的自回归语言模型--prompting模式占据统治地位&quot;&gt;2.1、过渡期：以 GPT 3.0 为代表的「自回归语言模型 + Prompting」模式占据统治地位&lt;/h4&gt;

&lt;p&gt;前面说过，在预训练模型发展的早期，技术框架收敛到了 Bert 模式和 GPT 模式这两种不同的技术范型，而且人们普遍更看好 Bert 模式一些，相当多数的后续技术改进，都是沿着 Bert 那条路走的。但是，随着技术的继续发展，你会发现，目前规模最大的LLM模型，几乎清一色都是类似 GPT 3.0 这种「自回归语言模型 + Prompting」模式的，比如 GPT-3、PaLM、GLaM、Gopher、Chinchilla、MT-NLG、LaMDA 等，没有例外。为什么会这样呢？背后一定有其必然性，我认为可能主要源于两个原因。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-2.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，Google 的 T5 模型，在形式上统一了自然语言理解和自然语言生成任务的外在表现形式。如上图所示，标为红色的是个文本分类问题，黄色的是判断句子相似性的回归或分类问题，这都是典型的自然语言理解问题。在 T5 模型里，这些自然语言理解问题在输入输出形式上和生成问题保持了一致，也就是说，可以把分类问题转换成让 LLM 模型生成对应类别的字符串，这样理解和生成任务在表现形式就实现了完全的统一。&lt;/p&gt;

&lt;p&gt;这说明自然语言生成任务，在表现形式上可以兼容自然语言理解任务，若反过来，则很难做到这一点。这样的好处是：同一个LLM生成模型，可以解决几乎所有NLP问题。而如果仍然采取Bert模式，则这个 LLM 模型无法很好处理生成任务。既然这样，我们当然倾向于使用生成模型，这是一个原因。&lt;/p&gt;

&lt;p&gt;第二个原因，如果想要以零示例提示语（zero shot prompting）或少数示例提示语（few shot prompting）的方式做好任务，则必须要采取 GPT 模式。现在已有研究（参考：On the Role of Bidirectionality in Language Model Pre-Training）证明：如果是以 fine-tuning 方式解决下游任务，Bert模式的效果优于GPT模式；若是以zero shot/few shot prompting 这种模式解决下游任务，则GPT模式效果要优于 Bert 模式。这说明了，生成模型更容易做好zero shot/few shot prompting 方式的任务，而Bert模式以这种方式做任务，是天然有劣势的。这是第二个原因。&lt;/p&gt;

&lt;p&gt;但是问题来了：为什么我们要追求 zero shot/few shot prompting这种方式来做任务呢？要解释清楚这个问题，我们首先需要搞清楚另外一个问题：什么样的LLM模型，对我们是最理想的？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-3.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图展示了一个理想的LLM该有的样子。首先，LLM 应该具备强大的自主学习能力。假设我们把世界上能获得的所有文本或者图片等不同类型的数据喂给它，它应该能够自动从中学习到里面包含的所有知识点，学习过程不需要人的介入，并且能灵活应用所学知识，来解决实际问题。因为数据是海量的，要吸收所有知识，就要非常多的模型参数来存储知识，所以这个模型必然会是一个巨无霸模型。&lt;/p&gt;

&lt;p&gt;其次，LLM 应该能解决NLP任何子领域的问题，而不仅支持有限领域，甚至它应该可以响应 NLP 之外其它领域的问题，最好是任意领域的问题都能得到很好地回答。&lt;/p&gt;

&lt;p&gt;再者，当我们使用 LLM 解决某个具体领域问题的时候，应该用我们人类习惯的表达方式，就是说LLM应该理解人类的命令。这体现出让LLM适配人，而不是反过来，让人去适配 LLM 模型。人适配 LLM 的典型例子，比如绞尽脑汁去尝试各种不同的 prompt，以试图找到好的提示语，才能很好地解决手头问题。关于这点，上图在人类和LLM交互的接口层，举了几个例子，说明什么是好的人使用 LLM 模型的接口形式。&lt;/p&gt;

&lt;p&gt;看完这个理想中的LLM，我们再回头解释上面遗留的问题：为什么我们要追求zero shot/few shot prompting这种方式来做任务呢？有两个原因。&lt;/p&gt;

&lt;p&gt;第一，这个 LLM 模型规模必然非常巨大，有能力作出这个模型，或改动这个模型参数的机构必然很少。而任务需求方是千千万万的中小机构甚至是个人，就算你把模型开源出来，他们也无力部署这个模型，更不用说再用 Fine-tuning 这种模式去修改模型参数了。所以，我们应该追求不修正模型参数，就能让任务需求方完成任务的方式，也就是应该采取 prompt 模式完成任务，而非 Fine-tuning 模式（由此可看出，soft prompting 技术方向是违背这个发展趋势的）。模型制作方则将 LLM 作成公用服务，以LLM as Service 的模式运行。作为服务支持方，考虑到千变万化的用户需求，所以LLM模型制作方更要追求让 LLM 能完成尽可能多类型的任务，这是附带的影响，也是为何超级大模型一定会追求走向AGI的现实因素。&lt;/p&gt;

&lt;p&gt;第二，zero shot prompting 也好，few shot prompting 也好，甚至促进LLM推理能力的思维链（CoT,Chain of Thought）Prompting也好，就是上图中接口层中的现有技术。具体而言，zero shot prompting的初衷，其实就是人类和LLM的理想接口，直接用人类所习惯的任务表述方式让LLM做事情，但是发现 LLM 并不能很好地理解，效果也不好。经过继续研究，转而发现：对于某项任务，如果给 LLM 几个示例，用这些示例来代表任务描述，效果会比zero shot prompting好，于是大家都去研究更好的few shot prompting技术。可以理解为，本来我们希望LLM能够用人类常用的命令方式来执行某个任务，但是目前技术还做不到，所以退而求其次，用这些替代技术来表达人类的任务需求。&lt;/p&gt;

&lt;p&gt;如果理解了上述逻辑，很容易得出如下结论：few shot prompting（也被称为In Context Learning）只是一种过渡时期的技术。如果我们能够更自然地去描述一个任务，而且 LLM 可以理解，那么，我们肯定会毫不犹豫地抛弃这些过渡期的技术，原因很明显，用这些方法来描述任务需求，并不符合人类的使用习惯。&lt;/p&gt;

&lt;p&gt;这也是为何我将 GPT 3.0 + Prompting 列为过渡期技术的原因，ChatGPT 的出现，改变了这个现状，用 Instruct 取代了 Prompting，由此带来新的技术范式转换，并产生若干后续影响。&lt;/p&gt;

&lt;h3 id=&quot;影响一让-llm-适配人的新型交互接口&quot;&gt;影响一：让 LLM 适配人的新型交互接口&lt;/h3&gt;

&lt;p&gt;在理想 LLM 的背景下，我们再来看 ChatGPT，能更好理解它的技术贡献。ChatGPT 应该是目前所有的现有技术里，最接近理想 LLM 的技术方法。如果归纳下 ChatGPT 最突出特点的话，我会用下面八个字：「能力强大，善解人意」。&lt;/p&gt;

&lt;p&gt;「能力强大」这一点，我相信应该主要归功于 ChatGPT 所依托的基础 LLM GPT-3.5。因为 ChatGPT  尽管加入了人工标注数据，但是量级只有数万，这个规模的数据量，和训练 GPT 3.5 模型使用的几千亿 token 级别的数据量相比，包含的世界知识（数据中包含的事实与常识）可谓沧海一粟，几可忽略，基本不会对增强 GPT 3.5 的基础能力发挥什么作用。所以它的强大功能，应该主要来自于隐藏在背后的 GPT 3.5。GPT 3.5 对标理想 LLM 模型中的那个巨无霸模型。&lt;/p&gt;

&lt;p&gt;那么，ChatGPT 向 GPT 3.5 模型注入新知识了吗？应该是注入了，这些知识就包含在几万人工标注数据里，不过注入的不是世界知识，而是人类偏好知识。所谓“人类偏好”，包含几方面的含义：首先，是人类表达一个任务的习惯说法。比如，人习惯说：“把下面句子从中文翻译成英文”，以此表达一个“机器翻译”的需求，但是 LLM 又不是人，它怎么会理解这句话到底是什么意思呢？你得想办法让 LLM 理解这句命令的含义，并正确执行。所以，ChatGPT 通过人工标注数据，向GPT 3.5 注入了这类知识，方便 LLM 理解人的命令，这是它“善解人意”的关键。其次，对于什么是好的回答，什么是不好的回答，人类有自己的标准，例如比较详细的回答是好的，带有歧视内容的回答是不好的，诸如此类。这是人类自身对回答质量好坏的偏好。人通过 Reward Model 反馈给 LLM 的数据里，包含这类信息。总体而言，ChatGPT 把人类偏好知识注入 GPT 3.5，以此来获得一个听得懂人话、也比较礼貌的LLM。&lt;/p&gt;

&lt;p&gt;可以看出，ChatGPT 的最大贡献在于：基本实现了理想LLM的接口层，让 LLM 适配人的习惯命令表达方式，而不是反过来让人去适配LLM，绞尽脑汁地想出一个能 Work 的命令（这就是 instruct 技术出来之前，prompt 技术在做的事情），而这增加了 LLM 的易用性和用户体验。是 InstructGPT/ChatGPT  首先意识到这个问题，并给出了很好的解决方案，这也是它最大的技术贡献。相对之前的 few shot prompting，它是一种更符合人类表达习惯的人和 LLM 进行交互的人机接口技术。&lt;/p&gt;

&lt;p&gt;而这必将启发后续的 LLM 模型，继续在易用人机接口方面做进一步的工作，让 LLM 更听话。&lt;/p&gt;

&lt;h3 id=&quot;影响二很多-nlp-子领域不再具备独立研究价值&quot;&gt;影响二：很多 NLP 子领域不再具备独立研究价值&lt;/h3&gt;

&lt;p&gt;就 NLP 领域而言，这次范式转换，意味着很多目前独立存在的 NLP 研究领域，将被纳入 LLM 的技术体系，进而不再独立存在，逐步消失。经过第一次范式转换，尽管 NLP 中很多「中间任务」，继续作为独立研究领域存在不再必要，但是大多数「最终任务」，仍然是以独立研究领域存在的，只是切换成在「预训练 + fine-tuning」框架下，面对领域独有问题，陆续提出新的改进方案。&lt;/p&gt;

&lt;p&gt;目前研究表明，很多 NLP 任务，随着 LLM 模型规模增长，效果会大幅提升。据此，我觉得可得到如下推论：大多数某领域所谓「独有」的问题，大概率只是缺乏领域知识导致的一种外在表象，只要领域知识足够多，这个所谓领域独有的问题，就可以被很好地解决掉，其实并不需要专门针对某个具体领域问题，冥思苦想去提出专用解决方案。也许 AGI 的真相超乎意料地简单：你只要把这个领域更多的数据交给 LLM，让它自己学习更多知识即可。&lt;/p&gt;

&lt;p&gt;在这个背景下，同时，ChatGPT 证明了我们现在是可以直接去追求理想LLM模型的，那么，未来的技术发展趋势应该是：追求规模越来越大的LLM模型，通过增加预训练数据的多样性，来涵盖越来越多的领域，LLM 自主从领域数据中通过预训练过程学习领域知识，随着模型规模不断增大，很多问题随之得到解决。研究重心会投入到如何构建这个理想LLM模型，而非去解决某个领域的具体问题。这样，越来越多NLP的子领域会被纳入LLM的技术体系，进而逐步消失。&lt;/p&gt;

&lt;p&gt;我认为，判断某个具体领域是否该立即停止独立研究，其判断标准可采取以下两种方法，占其一即可：第一，判断某个任务，是否 LLM 的研究效果超过人类表现，对于那些 LLM 效果超过人类的研究领域，已无独立研究的必要。举个例子，GLUE 与 SuperGLUE 测试集合里的很多任务，目前LLM效果已超过人类表现，与这个数据集合密切相关的研究领域，其实就没有继续独立存在的必要。第二，对比两种模式的任务效果，第一种模式是用较大的领域专用数据进行 Fine-tuning，第二种是 few-shot prompting 或 instruct-based 方法。如果第二种方法效果达到或超过第一种方法，则意味着这个领域没有继续独立存在的必要性。如果用这个标准来看，其实很多研究领域，目前 fine-tuning 效果还是占优的（因为这种模式领域训练数据量大），看似还可独立存在。但是考虑到很多任务随着模型规模增大，few shot prompting 效果持续增长，随着更大模型的出现，这个拐点很可能短期就会达到。&lt;/p&gt;

&lt;p&gt;如果上述猜测成立，将意味着如下残酷事实：对于很多 NLP 领域的研究人员，将面临往何处去的选择，是继续做领域独有问题呢？还是放弃这种看似前途不大的方式，转而去建设更好的LLM？如果选择转向去建设 LLM，又有哪些机构有能力、有条件去做这个事情呢？你对这个问题的回答会是什么呢？&lt;/p&gt;

&lt;h3 id=&quot;影响三更多-nlp-之外的研究领域将被纳入-llm-技术体系&quot;&gt;影响三：更多 NLP 之外的研究领域将被纳入 LLM 技术体系&lt;/h3&gt;

&lt;p&gt;如果站在 AGI 的视角，参照之前描述的理想LLM模型，它所能完成的任务，不应局限于 NLP 领域，或某一两个学科领域，理想中的 LLM 应该是领域无关的通用人工智能模型，它现在在某一两个领域做得好，不代表只能做这些任务。ChatGPT 的出现，证明了现在这个时期，我们去追求AGI是有可行性的，而现在是抛开「领域学科」这个思维束缚的时候了。&lt;/p&gt;

&lt;p&gt;ChatGPT 除了展示出以流畅的对话形式解决各种NLP任务外，也具备强大的代码能力。很自然的，之后越来越多其它的研究领域，也会被逐步纳入 LLM 体系中，成为通用人工智能的一部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-4.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LLM 从 NLP 向外进行领域拓展，一个自然的选择就是图像处理及多模态相关任务。目前已经有些工作在尝试把多模态融入，让LLM成为一个支持多模态输入输出的通用人机接口，典型的例子包括 DeepMind 的 Flamingo 和微软的&lt;a href=&quot;https://arxiv.org/pdf/2206.06336.pdf&quot;&gt;《Language Models are General-Purpose Interfaces》&lt;/a&gt;，上图展示了这种方式的概念结构。&lt;/p&gt;

&lt;p&gt;我的判断是无论是图像还是多模态，未来被融入 LLM 成为好用的功能，可能比我们想象的进度要慢。主要原因在于：尽管图像领域最近两年也一直在模仿 Bert 预训练的路子，尝试引入自监督学习，释放模型自主从图像数据中学习知识的能力，典型技术就是“对比学习”和 MAE，这是两条不同的技术路线。然而，从目前效果来看，尽管取得了很大的技术进步，但貌似这条路尚未走通，这体现在图像领域预训练模型应用到下游任务，带来的效果收益，远不如 Bert 或 GPT 应用在 NLP 下游任务那样显著。所以，图像预处理模型仍需深入探索，以释放图像数据的潜力，而这会迟滞它们被统一到 LLM 大模型的时间。当然，如果哪天这条路被趟通，大概率会复现NLP领域目前的局面，就是图像处理各个研究子领域可能会逐步消失，被融入到大型 LLM 中来，直接完成终端任务。&lt;/p&gt;

&lt;p&gt;除了图像与多模态，很明显，其它领域也会逐渐被纳入到理想 LLM 中来，这个方向方兴未艾，是具备高价值的研究主题。&lt;/p&gt;

&lt;p&gt;以上是我对范式转换的个人思考，接下来，我们来梳理下 GPT 3.0 之后 LLM 模型的主流技术进展。如理想 LLM 模型所示，相关的技术其实可以分为两大类；一类是关于 LLM 模型如何从数据中吸收知识，也包括模型规模增长对 LLM 吸收知识能力带来的影响；第二类是关于人如何使用 LLM 内在能力来解决任务的人机接口，包括In Context Learning 和 Instruct 两种模式。思维链（CoT）prompting 这种 LLM 推理技术，本质上也属于 In Context Learning，因为比较重要，我就把它们单独拎出来讲一下。&lt;/p&gt;

&lt;h2 id=&quot;二学习者从无尽数据到海量知识&quot;&gt;二、学习者：从无尽数据到海量知识&lt;/h2&gt;

&lt;p&gt;从目前研究结果看，Transformer 是足够强大的特征抽取器，尚不需要做特别的改进。那么通过预训练过程，Transformer 学到了什么？知识是如何存取的？我们又如何修正错误知识？本节讲述这方面的研究进展。&lt;/p&gt;

&lt;h3 id=&quot;1求知之路llm-学到了什么知识&quot;&gt;1、求知之路：LLM 学到了什么知识&lt;/h3&gt;

&lt;p&gt;LLM 从海量自由文本中学习了大量知识，如果把这些知识做粗略分类的话，可以分为语言类知识和世界知识两大类。&lt;/p&gt;

&lt;p&gt;语言类知识指的是词法、词性、句法、语义等有助于人类或机器理解自然语言的知识。关于 LLM 能否捕获语言知识有较长研究历史，自从 Bert 出现以来就不断有相关研究，很早就有结论，各种实验充分证明 LLM 可以学习各种层次类型的语言学知识，这也是为何使用预训练模型后，各种语言理解类自然语言任务获得大幅效果提升的最重要原因之一。另外，各种研究也证明了浅层语言知识比如词法、词性、句法等知识存储在 Transformer 的低层和中层，而抽象的语言知识比如语义类知识，广泛分布在 Transformer 的中层和高层结构中。&lt;/p&gt;

&lt;p&gt;世界知识指的是在这个世界上发生的一些真实事件（事实型知识，Factual Knowledge），以及一些常识性知识（Common Sense Knowledge）。比如「拜登是现任美国总统」、「拜登是美国人」、「乌克兰总统泽连斯基与美国总统拜登举行会晤」，这些都是和拜登相关的事实类知识；而「人有两只眼睛」、「太阳从东方升起」这些属于常识性知识。关于 LLM 模型能否学习世界知识的研究也有很多，结论也比较一致：LLM 确实从训练数据中吸收了大量世界知识，而这类知识主要分布在 Transformer 的中层和高层，尤其聚集在中层。而且，随着 Transformer 模型层深增加，能够学习到的知识数量逐渐以指数级增加（可参考&lt;a href=&quot;https://arxiv.org/pdf/2106.02902.pdf&quot;&gt;《BERTnesia: Investigating the capture and forgetting of knowledge in BERT》&lt;/a&gt;）。其实，你把 LLM 看作是一种以模型参数体现的隐式知识图谱，如果这么理解，我认为是一点问题也没有的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2011.04946&quot;&gt;《When Do You Need Billions of Words of Pre-training Data?》&lt;/a&gt;这篇文章研究了预训练模型学习到的知识量与训练数据量的关系，它的结论是：对于 Bert 类型的语言模型来说，只用 1000 万到 1 亿单词的语料，就能学好句法语义等语言学知识，但是要学习事实类知识，则要更多的训练数据。这个结论其实也是在意料中的，毕竟语言学知识相对有限且静态，而事实类知识则数量巨大，且处于不断变化过程中。而目前研究证明了随着增加训练数据量，预训练模型在各种下游任务中效果越好，这说明了从增量的训练数据中学到的更主要是世界知识。&lt;/p&gt;

&lt;h3 id=&quot;2记忆之地llm-如何存取知识&quot;&gt;2、记忆之地：LLM 如何存取知识&lt;/h3&gt;

&lt;p&gt;由上可知，LLM 确实从数据中学到了很多语言类及世界知识。那么，对于某条具体的知识，LLM 把它存储到了哪里？又是如何提取出来的？这也是一个有意思的问题。&lt;/p&gt;

&lt;p&gt;显然，知识一定存储在 Transformer 的模型参数里。从 Transformer 的结构看，模型参数由两部分构成：&lt;strong&gt;多头注意力（MHA）部分占了大约参数总体的三分之一，三分之二的参数集中在 FFN 结构中&lt;/strong&gt;。MHA 主要用于计算单词或知识间的相关强度，并对全局信息进行集成，更可能是在建立知识之间的联系，大概率不会存储具体知识点，那么很容易推论出 LLM 模型的知识主体是存储在 Transformer 的 FFN 结构里。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-5.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但这样的定位，粒度还是太粗，无法很好回答具体某条知识是如何存储与提取的，比如「中国的首都是北京」这条知识，以三元组表达就是&amp;lt;北京，is-capital-of，中国&amp;gt;，其中「is-capital-of」代表实体间关系。&lt;strong&gt;这条知识它存储在 LLM 的哪里呢？&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;2023 年初对于 LLM 的疑问&lt;/strong&gt;：这些知识存哪了？我们现在有以下几点认知：&lt;br /&gt;
1、多头注意力（MHA）部分占了大约参数总体的三分之一，三分之二的参数集中在 FFN 结构中。&lt;br /&gt;
2、MHA 主要用于计算单词或知识间的相关强度，并对全局信息进行集成，更可能是在建立知识之间的联系，大概率不会存储具体知识点。&lt;br /&gt;
3、那么很容易推论出 LLM 模型的知识主体是存储在 Transformer 的 FFN 结构里。&lt;br /&gt;
4、一些研究达成共识：Transformer 低层对句子的表层模式作出反应，高层对语义模式作出反应，比如《Transformer Feed-Forward Layers Are Key-Value Memories》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2012.14913.pdf&quot;&gt;《Transformer Feed-Forward Layers Are Key-Value Memories》&lt;/a&gt;给出了一个比较新颖的观察视角，它把 Transformer 的 FFN 看成存储大量具体知识的 Key-Value 存储器。如上图所示（图左是原始论文图，其实不太好理解，可以看做了注释的图右，更好理解些），FFN 的第一层是个 MLP 宽隐层，这是 Key 层；第二层是 MLP 窄隐层，是 Value 层。FFN 的输入层其实是某个单词对应的 MHA 的输出结果Embedding，也就是通过 Self Attention，将整个句子有关的输入上下文集成到一起的 Embedding，代表了整个输入句子的整体信息。&lt;/p&gt;

&lt;p&gt;Key 层的每个神经元节点，记载了一对信息。比如对于上图中 FFN 第一个隐层的第 i 个节点 ki，也许就是它记载了 &amp;lt;北京，is-capital-of，中国&amp;gt; 这条知识。ki 节点对应的 key 向量，其实指的是节点 ki 和输入层每个节点的权重向量；而对应的 Value 向量，指的是节点 ki 和 FFN 第二层的 Value 层每个节点形成连接的权重向量。每个神经元的 Key 向量，用于识别输入中的某种语言或者知识模式，是一种模式探测器。如果输入中包含它要检测的某种模式，那么输入向量和 ki 节点的 key 权重进行向量内积计算，加上 Relu，形成 ki 的大数值响应，意味着 ki 检测到了这个模式，于是再把这个响应值，通过 ki 节点的 Value 权重向量向 FFN 第二层传播。这等价于将 Value 向量的值，用响应值加权，然后传递并体现到第二层 Value 层每个节点的输出上。如此这般，FFN 的正向传播计算过程，看起来就像是通过 Key 检测到某种知识模式，然后取出对应的 Value，并把 Value 体现在FFN的第二层输出上。当然，FFN 第二层每个节点，会收集 FFN 的 Key 层所有节点信息，所以是一种混合响应，而 Value 层所有节点的混合响应，可以解读为代表输出单词的概率分布信息。&lt;/p&gt;

&lt;p&gt;听着可能还是比较复杂，我们用个极端的例子来说明。我们假设上图的节点 ki就是记载 &amp;lt;北京，is-capital-of，中国&amp;gt;这条知识的 Key-Value 存储器，它的 Key 向量，用于检测「中国的首都是…」这个知识模式，它的 Value 向量，基本存储了与单词「北京」的 Embedding 比较接近的向量。当 Transformer 的输入是「中国的首都是[Mask]」的时候，ki 节点从输入层探测到这个知识模式，所以产生较大的响应输出。我们假设 Key 层其它神经元对这个输入都没有任何响应，那么对应的Value层的节点，其实只会接收到「北京」这个 Value 对应的单词 embedding，并通过 ki的大响应值，进行了进一步的数值放大。于是，Mask 位置对应的输出，就自然会输出「北京」这个单词。基本就是这么个过程，看着很复杂，其实很简单。&lt;/p&gt;

&lt;p&gt;而且这篇文章还指出，Transformer 低层对句子的表层模式作出反应，高层对语义模式作出反应，就是说低层FFN存储词法、句法等表层知识，中层和高层存储语义及事实概念知识，这和其它研究结论是一致的。&lt;/p&gt;

&lt;p&gt;要我猜，把 FFN 看成 Key-Value 存储器这种思路，很可能不是最终的正确答案，但是距离最终正确答案的距离，估计也不太远。&lt;/p&gt;

&lt;h3 id=&quot;3知识涂改液如何修正-llm-里存储的知识&quot;&gt;3、知识涂改液：如何修正 LLM 里存储的知识&lt;/h3&gt;

&lt;p&gt;既然我们已知具体的某条世界知识存储在某个或者某些 FFN 节点的参数里，自然会引发另外一个问题：我们能否修正 LLM 模型里存储的错误或者过时的知识呢？比如对于问题「英国的现任首相是谁？」鉴于近年来英国首相频繁更迭，你猜 LLM 更倾向输出「鲍里斯」还是更青睐「苏纳克」？很明显训练数据中包含“鲍里斯”的数据会更多，这种情况很大可能 LLM 会给出错误回答，于是我们就有修正 LLM 里存储的过时知识的必要性。&lt;/p&gt;

&lt;p&gt;如果归纳下，目前有三类不同方法来修正 LLM 里蕴含的知识：&lt;/p&gt;

&lt;p&gt;第一类方法从训练数据的源头来修正知识。&lt;a href=&quot;https://arxiv.org/pdf/2205.11482.pdf&quot;&gt;《Towards Tracing Factual Knowledge in Language Models Back to the Training Data》&lt;/a&gt;这篇文章的研究目标是：对于指定的某条知识，我们是否可以定位到是哪些训练数据导致 LLM 学会了这条知识？答案是肯定的，这意味着我们可以逆向追踪到某条知识对应的训练数据源头。如果利用这项技术，假设我们想要删除某条知识，则可首先定位到其对应的数据源头，删除数据源，然后重新预训练整个 LLM 模型，这样即可达成删除 LLM 中相关知识的目的。但是这里有个问题，如果修正一小部分知识，我们就需要重新做一次模型预训练，这样做明显成本太高。所以这种方法不会太有发展前景，可能比较适合那种对于某个特定类别数据的一次性大规模删除场合，不适合少量多次的常规知识修正场景，比如可能比较适合用来做去除偏见等去 toxic 内容的处理。&lt;/p&gt;

&lt;p&gt;第二类方法是对 LLM 模型做一次 fine-tuning 来修正知识。一个直观能想到的方法是：我们可以根据要修正成的新知识来构建训练数据，然后让 LLM 模型在这个训练数据上做 fine-tuning，这样指导 LLM 记住新的知识，遗忘旧的知识。这个方法简单直观，但是也有一些问题，首先它会带来灾难遗忘问题，就是说除了忘掉该忘的知识，还忘掉了不该忘的知识，导致这么做了之后有些下游任务效果下降。另外，因为目前的 LLM 模型规模非常大，即使是做 fine-tuning，如果次数频繁，其实成本也相当高。对这种方法感兴趣的可以参考&lt;a href=&quot;https://arxiv.org/pdf/2012.00363.pdf&quot;&gt;《Modifying Memories in Transformer Models》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;另外一类方法直接修改 LLM 里某些知识对应的模型参数来修正知识。假设我们想要把旧知识 &amp;lt;英国，现任首相，鲍里斯&amp;gt;，修正到 &amp;lt;英国，现任首相，苏纳克&amp;gt;。首先我们想办法在 LLM 模型参数中，定位到存储旧知识的 FFN 节点，然后可以强行调整更改 FFN 中对应的模型参数，将旧知识替换成新的知识。可以看出，这种方法涉及到两项关键技术：首先是如何在 LLM 参数空间中定位某条知识的具体存储位置；其次是如何修正模型参数，来实现旧知识到新知识的修正。关于这类技术的细节，可以参考&lt;a href=&quot;https://arxiv.org/pdf/2202.05262&quot;&gt;《Locating and Editing Factual Associations in GPT》&lt;/a&gt;和&lt;a href=&quot;https://arxiv.org/pdf/2210.07229&quot;&gt;《Mass-Editing Memory in a Transformer》&lt;/a&gt;。理解这个修正 LLM 知识的过程，其实对于更深入理解 LLM 的内部运作机制是很有帮助的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;2023 年初对于 LLM 的疑问&lt;/strong&gt;：如何修改已存储的知识？&lt;br /&gt;
首先是如何定位存哪了；其次是如何修正模型参数，来实现旧知识到新知识的修正。关于这类技术的细节，可以参考&lt;a href=&quot;https://arxiv.org/pdf/2202.05262&quot;&gt;《Locating and Editing Factual Associations in GPT》&lt;/a&gt;和&lt;a href=&quot;https://arxiv.org/pdf/2210.07229&quot;&gt;《Mass-Editing Memory in a Transformer》&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;三规模效应当-llm-越来越大时会发生什么&quot;&gt;三、规模效应：当 LLM 越来越大时会发生什么&lt;/h2&gt;

&lt;p&gt;我们知道，近年来，LLM 模型规模在快速增长，目前效果最好的 LLM 模型，其参数规模大都超过了千亿（100B）参数规模。比如，OpenAI 的 GPT 3 的规模为 175B，Google 的 LaMDA 规模为 137B，PaLM 的规模为 540B，DeepMind 的 Gogher 规模为 280B 等，不一而足。国内也有中文巨型模型，比如智源 GLM 规模 130B，华为「盘古」规模 200B，百度「文心」规模 260B，浪潮「源1.0」规模 245B。那么，一个很自然的问题就是：随着 LLM 模型规模不断增长，会发生些什么呢？&lt;/p&gt;

&lt;p&gt;预训练模型的应用往往是两阶段的：预训练阶段，及具体场景应用阶段。在预训练阶段，其优化目标是交叉熵，对 GPT 这种自回归语言模型来说，也就是看 LLM 是否正确预测到了下一个单词；而场景应用阶段，一般要看具体场景的评价指标。一般我们的直觉是：如果 LLM 模型在预训练阶段的指标越好，自然它解决下游任务的能力就越强。然而，事实并非完全如此。现有研究已证明，预训练阶段的优化指标确实和下游任务表现出正相关关系，但是并非完全正相关。也就是说，只看预训练阶段的指标，来判断一个 LLM 模型是否够好，这是不够的。基于此，我们分头来看在这两个不同阶段，随着 LLM 模型增大，有什么影响。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-6.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，我们先看在预训练阶段，随着模型规模逐步增大，会发生什么。OpenAI 在&lt;a href=&quot;https://arxiv.org/pdf/2001.08361&quot;&gt;《Scaling Laws for Neural Language Models》&lt;/a&gt;中专门研究了这个问题，并提出 LLM 模型所遵循的「伸缩法则（scaling law）」。如上图所示，这个研究证明：&lt;strong&gt;当我们独立增加训练数据量、模型参数规模或者延长模型训练时间（比如从 1 个 Epoch 到 2 个 Epoch），预训练模型在测试集上的 Loss 都会单调降低，也就是说模型效果越来越好&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;既然三个因素都重要，那么我们在实际做预训练的时候，就有一个算力如何分配的决策问题：假设用于训练 LLM 的算力总预算（比如多少 GPU 小时或者 GPU 天）给定，那么是应该多增加数据量、减少模型参数呢？还是说数据量和模型规模同时增加，减少训练步数呢？此消彼长，某个要素规模增长，就要降低其它因素的规模，以维持总算力不变，所以这里有各种可能的算力分配方案。最终 OpenAI 选择了同时增加训练数据量和模型参数，但是采用早停策略（early stopping）来减少训练步数的方案。因为它证明了：对于训练数据量和模型参数这两个要素，如果只单独增加其中某一个，这不是最好的选择，最好能按照一定比例同时增加两者，它的结论是优先增加模型参数，然后才是训练数据量。假设用于训练 LLM 的算力总预算增加了 10 倍，那么应该增加 5.5 倍的模型参数量，1.8 倍的训练数据量，此时模型效果最佳。&lt;/p&gt;

&lt;p&gt;DeepMind 的一项研究（参考&lt;a href=&quot;https://arxiv.org/pdf/2203.15556&quot;&gt;《Training Compute-Optimal Large Language Models》&lt;/a&gt;）更深入地探究了这个问题，其基本结论和 OpenAI 的结论差不多，比如确实需要同时增加训练数据量和模型参数，模型效果才会更好。而很多大模型在做预训练的时候，并没有考虑这一点，很多 LLM 大模型只是单调增加模型参数，而固定住了训练数据量，这个做法其实是不对的，限制了 LLM 模型的潜力。但是它修正了两者的比例关系，&lt;strong&gt;认为训练数据量和模型参数是同等重要的，也就是说，假设用于训练 LLM 的算力总预算增加了 10 倍，那么应该增加 3.3 倍的模型参数量，3.3 倍的训练数据量，这样模型效果才最好&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这意味着：增加训练数据量的重要性，比我们之前所认为的，还要重要。基于这个认知，DeepMind 在设计 Chinchilla 模型时，在算力分配上选择了另外一种配置：对标数据量 300B、模型参数量 280B 的 Gopher 模型，Chinchilla 选择增加 4 倍的训练数据，但是将模型参数降低为 Gopher 的四分之一，大约为70B。但是无论预训练指标，还是很多下游任务指标，Chinchilla 效果都要优于规模更大的 Gopher。&lt;/p&gt;

&lt;p&gt;这带给我们如下启示：我们可以选择放大训练数据，并同比例地减少 LLM 模型参数，以达到在不降低模型效果的前提下，极大缩小模型规模的目的。缩小模型规模有很多好处，比如在应用的时候，推理速度会快很多等，无疑这是一个很有前途的 LLM 发展路线。&lt;/p&gt;

&lt;p&gt;以上是从预训练阶段来看模型规模的影响，如果从 LLM 解决下游具体任务效果的角度来看，随着模型规模增大，不同类型的任务有不同的表现，具体而言，有以下三类情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-7.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一类任务完美体现了 LLM 模型的 scaling law，就是说随着模型规模逐步放大，任务的表现越来越好，如上图里的（a）图所示。这类任务通常符合如下共性：它们往往都是知识密集型任务，也就是说如果LLM模型包含的知识量越多，这类任务表现越好。而很多研究已经证明越大的LLM模型学习效率越高，也就是说相同训练数据量，模型越大任务效果越好，说明面对的即使是同样的一批训练数据，更大的 LLM 模型相对规模小一些的模型，从中学到了更多的知识。更何况一般情况下，在增大 LLM 模型参数的时候，往往会同步增加训练数据量，这意味着大模型可以从更多数据中学习更多的知识点。这些研究可以很好地解释上图，为何随着模型规模增大，这些知识密集型的任务效果越来越好。大多数传统的自然语言理解类任务，其实都属于这种知识密集型任务，而很多任务在近两年获得了极大的效果提升，甚至超过了人类表现。很明显，这大概率是 LLM 模型的规模增长带来的，而非归功于某项具体的技术改进。&lt;/p&gt;

&lt;p&gt;第二类任务展现出 LLM 具备某种「&lt;strong&gt;涌现能力（Emergent Ability）&lt;/strong&gt;」，如上图（b）所示。所谓「涌现能力」，指的是当模型参数规模未能达到某个阀值时，模型基本不具备解决此类任务的任何能力，体现为其性能和随机选择答案效果相当，但是当模型规模跨过阀值，LLM 模型对此类任务的效果就出现突然的性能增长。也就是说，模型规模是解锁（unlock）LLM 新能力的关键，随着模型规模越来越大，会逐渐解锁 LLM 越来越多的新能力。这是个很神奇的现象，因为它意味着如下让人对未来可报乐观预期的可能：或许很多任务，目前 LLM 还不能很好地解决，甚至站在现在这个时刻的我们看起来，LLM 完全没有能力解决这类任务，但因 LLM 具备「涌现能力」，所以如果我们继续推大模型，也许某一天它的这项能力就被突然解锁了。LLM 模型的规模增长会给我们带来意想不到的精彩礼物。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2206.04615&quot;&gt;《Beyond the Imitation Game: Quantifying and extrapolating the capabilities of language models》&lt;/a&gt;这篇文章指出，这类&lt;strong&gt;体现出「涌现能力」的任务也有一些共性：这些任务一般由多步骤构成，要解决这些任务，往往需要先解决多个中间步骤，而逻辑推理能力在最终解决这类任务中发挥重要作用&lt;/strong&gt;。思维链（Chain of Thought）Prompting 是典型的增强 LLM 推理能力的技术，能大幅提升此类任务的效果，关于 CoT 技术，在随后小节内容会做解释，此处暂不展开。&lt;/p&gt;

&lt;p&gt;问题是，为何 LLM 会出现这种「涌现能力」现象呢？上述文章以及&lt;a href=&quot;https://arxiv.org/pdf/2206.07682&quot;&gt;《Emergent Abilities of Large Language Models》&lt;/a&gt;给出了几个可能的解释：&lt;/p&gt;

&lt;p&gt;一种可能解释是&lt;strong&gt;有些任务的评价指标不够平滑&lt;/strong&gt;。比如说有些生成任务的判断标准，它要求模型输出的字符串，要和标准答案完全匹配才算对，否则就是 0 分。所以，即使随着模型增大，其效果在逐步变好，体现为输出了更多的正确字符片段，但是因为没有完全对，只要有任何小错误都给 0 分，只有当模型足够大，输出片段全部正确才能得分。也就是说，因为指标不够平滑，所以不能体现 LLM 其实正在逐步改善任务效果这一现实，看起来就是「涌现能力」这种外在表现。&lt;/p&gt;

&lt;p&gt;另外一种可能的解释是：有些任务由若干中间步骤构成，随着模型规模增大，解决每个步骤的能力也在逐步增强，但是只要有一个中间步骤是错的，最终答案就是错的，于是也会导致这种表面的「涌现能力」现象。&lt;/p&gt;

&lt;p&gt;当然，上面的解释目前还都是猜想，至于为何 LLM 会出现这种现象，还需要进一步更深入的研究。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-8.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有少部分任务，随着模型规模增长，任务的效果曲线展现出 U 形特性：随着模型规模逐渐变大，任务效果逐渐变差，但是当模型规模进一步增长，则效果开始越来越好，呈现出 U 形增长趋势，如上图所示的粉红色 PaLM 模型在两个任务上的指标走势。为何这些任务表现得如此特殊呢？&lt;a href=&quot;https://arxiv.org/pdf/2211.02011&quot;&gt;《Inverse scaling can become U-shaped》&lt;/a&gt;这篇文章给出了一种解释：这些任务，内部其实隐含了两种不同类型的子任务，一种是真正的任务，另外一种是「干扰任务（distractor task）」。当模型规模小的时候，无法识别任意一种子任务，所以模型的表现跟随机选择答案差不多，当模型增长到中等规模的时候，主要执行的是干扰任务，所以对真正的任务效果有负面影响，体现为真正任务效果的下降，而当进一步增加模型规模，则 LLM 可以忽略干扰任务，执行真正的任务，体现为效果开始增长。&lt;/p&gt;

&lt;p&gt;对于那些随着模型规模增大，效果一直下降的任务，如果采用思维链（CoT）Prompting，则部分任务的表现转换为遵循 Scaling law，即模型规模越大效果越好，而其它任务则转换为U性增长曲线。这其实侧面说明了：此类任务应属于推理类型的任务，所以加入 CoT 后任务表现会发生质的变化。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;2023 年初对于 LLM 的疑问&lt;/strong&gt;：训练数据规模、模型参数规模和训练时长（步数），与最终 LLM 性能（loss 衡量）之间什么关系？&lt;br /&gt;
1、当我们独立增加训练数据量、模型参数规模或者延长模型训练时间（比如从 1 个 Epoch 到 2 个 Epoch），预训练模型在测试集上的 Loss 都会单调降低，也就是说模型效果越来越好。&lt;br /&gt;
2、训练数据量和模型参数是同等重要的。&lt;br /&gt;
3、我们可以选择放大训练数据，并同比例地减少 LLM 模型参数，以达到在不降低模型效果的前提下，极大缩小模型规模的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;2023 年初对于 LLM 的疑问&lt;/strong&gt;：为什么有些模型不遵循 scaling law？三类任务：&lt;br /&gt;
第一类完美遵循 scaling low。&lt;br /&gt;
第二类过了阈值后涌现。《Beyond the Imitation Game: Quantifying and extrapolating the capabilities of language models》和《Emergent Abilities of Large Language Models》认为是指标不平滑 or 中间步骤是错的。
第三类 U 型，《Inverse scaling can become U-shaped》猜测可能两种不同类型的子任务，一种是真正的任务，另外一种是「干扰任务（distractor task）」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;四人机接口从-in-context-learning-到-instruct-理解&quot;&gt;四、人机接口：从 In Context Learning 到 Instruct 理解&lt;/h2&gt;

&lt;p&gt;一般我们经常提到的人和 LLM 的接口技术包括：zero shot prompting、few shot prompting、In Context Learning，以及 Instruct。这些其实都是表达某个具体任务的描述方式。不过如果你看文献，会发现叫法比较乱。&lt;/p&gt;

&lt;p&gt;其中 Instruct 是 ChatGPT 的接口方式，就是说人以自然语言给出任务的描述，比如「把这个句子从中文翻译成英文」，类似这种。zero shot prompting 我理解其实就是现在的 Instruct 的早期叫法，以前大家习惯叫 zero shot，现在很多改成叫 Instruct。尽管是一个内涵，但是具体做法是两种做法。早期大家做 zero shot prompting，实际上就是不知道怎么表达一个任务才好，于是就换不同的单词或者句子，反复在尝试好的任务表达方式，这种做法目前已经被证明是在拟合训练数据的分布，其实没啥意思。目前 Instruct 的做法则是给定命令表述语句，试图让 LLM 理解它。所以尽管表面都是任务的表述，但是思路是不同的。&lt;/p&gt;

&lt;p&gt;而In Context Learning 和 few shot prompting 意思类似，就是给 LLM 几个示例作为范本，然后让LLM解决新问题。我个人认为 In Context Learning 也可以理解为某项任务的描述，只是 Instruct 是一种抽象的描述方式，In Context Learning 是一种例子示范的例子说明法。当然，鉴于目前这几个叫法用的有点乱，所以上述理解仅代表个人看法。&lt;/p&gt;

&lt;p&gt;所以我们此处只对 In Context Learning 和 Instruct 进行介绍，不再提 zero shot 和 few shot 了。&lt;/p&gt;

&lt;h3 id=&quot;1神秘的-in-context-learning&quot;&gt;1、神秘的 In Context Learning&lt;/h3&gt;

&lt;p&gt;如果你细想，会发现 In Context Learning 是个很神奇的技术。它神奇在哪里呢？神奇在你提供给 LLM 几个样本示例,….，然后给它 x(n+1)，LLM 竟然能够成功预测对应的 y(n+1)。听到这你会反问：这有什么神奇的呢？Fine-tuning 不就是这样工作的吗？你要这么问的话，说明你对这个问题想得还不够深入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-9.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fine-tuning 和 In Context Learning 表面看似都提供了一些例子给 LLM，但两者有质的不同（参考上图示意）：Fine-tuning 拿这些例子当作训练数据，利用反向传播去修正 LLM 的模型参数，而修正模型参数这个动作，确实体现了 LLM 从这些例子学习的过程。但是，In Context Learning 只是拿出例子让 LLM 看了一眼，并没有根据例子，用反向传播去修正 LLM 模型参数的动作，就要求它去预测新例子。既然没有修正模型参数，这意味着貌似 LLM 并未经历一个学习过程，如果没有经历学习过程，那它为何能够做到仅看一眼，就能预测对新例子呢？这正是 In Context Learning 的神奇之处。这是否让你想起了一句歌词「只是因为在人群中多看了你一眼 再也没能忘掉你容颜」，而这首歌名叫「传奇」。你说传奇不传奇？&lt;/p&gt;

&lt;p&gt;看似 In Context Learning 没从例子里学习知识，实际上，难道 LLM 通过一种奇怪的方式去学习？还是说，它确实也没学啥？关于这个问题的答案，目前仍是未解之谜。现有一些研究各有各的说法，五花八门，很难判断哪个讲述的是事实的真相，甚至有些研究结论还相互矛盾。这里提供几个目前的说法，至于谁对谁错，只能你自己把握了。当然，我认为追求这个神奇现象背后的真相，是一个好的研究课题。&lt;/p&gt;

&lt;p&gt;试图证明 In Context Learning 没有从例子中学习的工作是&lt;a href=&quot;https://arxiv.org/pdf/2202.12837&quot;&gt;《Rethinking the Role of Demonstrations: What Makes In-Context Learning Work?》&lt;/a&gt;。它发现了：在提供给 LLM 的样本示例中，yi 是否 xi 对应的正确答案，其实并不重要，如果我们把正确答案 yi 替换成随机的另外一个答案 yj ，这并不影响 In Context Learning 的效果。这起码说明了一点：In Context Learning 并没有提供给 LLM 那个从 x 映射到 y 的映射函数信息：y=f(x)，否则的话你乱换正确标签，肯定会扰乱这个 y=f(x) 映射函数。也就是说，In Context Learning 并未学习这个输入空间到输出空间的映射过程。&lt;/p&gt;

&lt;p&gt;真正对 In Context Learning 影响比较大的是：x 和 y 的分布，也就是输入文本 x 的分布和候选答案 y 有哪些，如果你改变这两个分布，比如把 y 替换成候选答案之外的内容，则 In Context Learning 效果急剧下降。&lt;/p&gt;

&lt;p&gt;总之，这个工作证明了 In Context Learning 并未学习映射函数，但是输入和输出的分布很重要，这两个不能乱改。&lt;/p&gt;

&lt;p&gt;有些工作认为 LLM 还是从给出的示例学习了这个映射函数 y=f(x)，不过是种隐式地学习。比如&lt;a href=&quot;https://arxiv.org/pdf/2211.15661.pdf&quot;&gt;《What learning algorithm is in-context learning? Investigations with linear models》&lt;/a&gt;认为 Transformer 能够隐式地从示例中学习 x 到 y 的映射过程，它的激活函数中包含了一些简单映射函数，而 LLM 通过示例能够激发对应的那一个。而&lt;a href=&quot;https://arxiv.org/pdf/2212.10559&quot;&gt;《Why Can GPT Learn In-Context? Language Models Secretly Perform Gradient Descent as Meta-Optimizers》&lt;/a&gt;这篇文章则将 ICL 看作是一种隐式的 Fine-tuning。&lt;/p&gt;

&lt;p&gt;总而言之，目前这还是一个未解之谜。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;LLM 技术增量重点&lt;/strong&gt;：In Context Learning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;2023 年初对于 LLM 的疑问&lt;/strong&gt;：为什么 In Context Learning 有效？&lt;br /&gt;
1、《Rethinking the Role of Demonstrations: What Makes In-Context Learning Work?》认为 ICL 没有从例子里学习 x 到 y 的映射关系，而只是学习了分布与分布的对应。&lt;br /&gt;
2、《What learning algorithm is in-context learning? Investigations with linear models》认为 ICL 隐式地学习了 x 到 y 的映射关系。&lt;br /&gt;
3、《Why Can GPT Learn In-Context? Language Models Secretly Perform Gradient Descent as Meta-Optimizers》认为 ICL 是隐式的 fine-tuning。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2神奇的-instruct-理解&quot;&gt;2、神奇的 Instruct 理解&lt;/h3&gt;

&lt;p&gt;我们可以把 Instruct 当作一种方便人类理解的任务表述，在这个前提下，目前关于 Instruct 的研究可以分成两种：偏学术研究的 Instruct，以及关于人类真实需求描述的 Instruct。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-10.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们先来看第一种：偏学术研究的 Instruct。它的核心研究主题是多任务场景下，LLM 模型对 Instruct 理解的泛化能力。如上图中 FLAN 模型所示，就是说有很多 NLP 任务，对于每个任务，研究人员构造一个或者多个 Prompt 模版作为任务的 Instruct，然后用训练例子对 LLM 模型进行微调，让 LLM 以同时学习多个任务。训练好模型后，给 LLM 模型一个它没见过的全新任务的 Instruct，然后让 LLM 解决 zero shot任务，从任务解决得是否足够好，来判断 LLM 模型是否有对 Instruct 理解的泛化能力。&lt;/p&gt;

&lt;p&gt;如果归纳下目前的研究结论（可参考&lt;a href=&quot;https://arxiv.org/pdf/2210.11416&quot;&gt;《Scaling Instruction-Finetuned Language Models》&lt;/a&gt;／&lt;a href=&quot;https://arxiv.org/pdf/2204.07705&quot;&gt;《Super-Natural Instructions: Generalization via Declarative Instructions on 1600+ NLP Tasks》&lt;/a&gt;），能够有效增加 LLM 模型 Instruct 泛化能力的因素包括：增加多任务的任务数量、增加 LLM 模型大小、提供 CoT Prompting， 以及增加任务的多样性。如果采取任意一项措施，都可以增加 LLM 模型的 Instruct理解能力。&lt;/p&gt;

&lt;p&gt;第二种是人类真实需求下的 Instruct，这类研究以 InstructGPT 和 ChatGPT 为代表。这类工作也是基于多任务的，但是和偏向学术研究类工作最大的不同，在于它是面向人类用户真实需求的。为什么这么说呢？因为它们用于 LLM 多任务训练的任务描述 Prompt，是从大量用户提交的真实请求中抽样而来的，而不是固定好研究任务的范围，然后让研究人员来写任务描述 prompt。这里所谓的「真实需求」，体现在两个方面：首先，因为是从用户提交的任务描述里随机抽取的，所以涵盖的任务类型更多样化，也更符合用户的真实需求；其次，某个任务的 prompt 描述，是用户提交的，体现了一般用户在表达任务需求时会怎么说，而不是你认为用户会怎么说。很明显，这类工作改出来的 LLM 模型，用户体验会更好。&lt;/p&gt;

&lt;p&gt;InstructGPT 论文里，也拿这种方法和 FLAN 那种 Instruct based 方法做了比较。首先在 GPT3 上用FLAN提到的任务、数据以及 Prompt 模版进行微调，来在 GPT 3 上复现 FLAN 方法，然后和 InstructGPT 进行比较，因为 InstructGPT 的基础模型也是 GPT3，所以只有数据和方法的差别，两者可比，结果发现 FLAN 方法的效果，距离 InstructGPT 有很大的差距。那么背后的原因是什么呢？论文分析数据后认为，FLAN 方法涉及到的任务领域相对少，是 InstructGPT 涉及领域的子集，所以效果不好。也就是说，FLAN 论文里涉及到的任务和用户真实需求是不符的，而这导致在真实场景下效果不够好。而这对我们的启示是：从用户数据中收集真实需求，这事情是很重要的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;LLM 技术增量重点&lt;/strong&gt;：Instruct&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3in-context-learning-和-instruct-的联系&quot;&gt;3、In Context Learning 和 Instruct 的联系&lt;/h3&gt;

&lt;p&gt;如果我们假设 In Context Learning 是用一些例子来具象地表达任务命令，Instruct 是一种更符合人类习惯的抽象任务描述。那么，一个很自然的问题是：它们之间有什么联系吗？比如，我们是否能够提供给 LLM 完成某个任务的若干具体示例，让 LLM 找出其对应的自然语言描述的 Instruct 命令？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-11.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前有零星的工作在探索这个问题，我认为这个方向是很有研究价值的。先说答案，答案是：Yes，LLM Can。&lt;a href=&quot;https://arxiv.org/pdf/2211.01910&quot;&gt;《Large Language Models Are Human-Level Prompt Engineers》&lt;/a&gt;是做这个方向很有趣的工作，如上图所示，对于某项任务，给 LLM 一些示例，让 LLM 自动生成能够描述这项任务的自然语言命令，然后它再用 LLM 生成的任务描述去测试任务效果。它使用的基础模型是 GPT 3 和 InstructGPT，经过这项技术加持后，LLM 生成的 Instruct 的效果相比未采用这项技术的 GPT 3 以及 InstuctGPT 来说，指标有极大地提升，而且在一些任务上超过人类的表现。&lt;/p&gt;

&lt;p&gt;这说明了：具象的任务示例和任务的自然语言描述之间，有种神秘的内在联系。至于这种联系到底是什么？我们目前对此还一无所知。&lt;/p&gt;

&lt;h2 id=&quot;五智慧之光如何增强-llm-的推理能力&quot;&gt;五、智慧之光：如何增强 LLM 的推理能力&lt;/h2&gt;

&lt;p&gt;目前很多研究已证明 LLM 对于知识具有强大的记忆能力，但是，一般我们不会因为一个人记忆能力强，就说这人很聪明，是否具有强大的推理能力，往往是我们判断一个人是否聪明的重要标准。类似的，如果 LLM 的效果想让人觉得很惊艳，强大的推理能力是必备的。推理能力本质上是综合运用很多相关知识点，去推导出新知识或新结论。关于 LLM的 推理能力，是最近一年来 LLM 里最重要和热门的研究领域之一。于是，我们关心的问题就是：LLM 具备推理能力吗？如果具备，那么它的推理能力够强吗？&lt;/p&gt;

&lt;p&gt;这两个问题目前的答案似乎应该是：当模型规模足够大的时候，LLM 本身是具备推理能力的，在简单推理问题上，LLM 已经达到了很好的能力，但是复杂推理问题上，还需要更多深入的研究。&lt;/p&gt;

&lt;p&gt;如果梳理现有 LLM 推理相关工作的话，我把它们归到两大类，体现出挖掘或促进 LLM 推理能力不同的技术思路：第一类研究比较多，可以统称为基于 Prompt 的方法，核心思想是通过合适的提示语或提示样本，更好地激发出 LLM 本身就具备的推理能力，Google 在这个方向做了大量很有成效的工作。第二类做法是在预训练过程中引入程序代码，和文本一起参与预训练，以此进一步增强 LLM 的推理能力，这应该是 OpenAI 实践出的思路。比如 ChatGPT 肯定具备很强的推理能力，但它并不要求用户必须提供一些推理示例，所以 ChatGPT 强大的推理能力，大概率来源于使用代码参与 GPT 3.5 的预训练。&lt;/p&gt;

&lt;p&gt;这两种思路其实大方向是迥异的：利用代码增强 LLM 推理能力，这体现出一种通过增加多样性的训练数据，来直接增强 LLM 推理能力的思路；而基于 Prompt 的方法，它并不会促进 LLM 本身的推理能力，只是让 LLM 在解决问题过程中更好地展示出这种能力的技术方法。可以看出，前者（代码方法）治本，后者治标。当然，两者其实也是互补的，但从长远看，治本的方法更重要。&lt;/p&gt;

&lt;h3 id=&quot;1基于-prompt-的方法&quot;&gt;1、基于 Prompt 的方法&lt;/h3&gt;

&lt;p&gt;这方面工作非常多，如果归纳一下的话，大致可以分为三条技术路线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-12.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一种思路是直接在问题上追加辅助推理 Prompt。这种方法简单直接，但在众多领域都很有效。这个做法是由&lt;a href=&quot;https://arxiv.org/pdf/2205.11916&quot;&gt;《Large language models are zero-shot reasoners》&lt;/a&gt;提出的，也被称为 zero-shot CoT。具体而言，分为两个阶段（如上图所示），第一阶段在提问的问题上追加「Let’s think step by step」这句提示语，LLM 会输出具体的推理过程；第二阶段，在第一阶段的问题后，拼接 LLM 输出的具体推理过程，并再追加 Prompt=“Therefore, the answer (arabic numerals) is”，此时 LLM 会给出答案。如此简单的操作，却可以大幅增加 LLM 在各项推理任务中的效果，比如在数学推理测试集 GSM8K 上，加上提示语后，推理准确率直接从原先的 10.4% 提升到了 40.4%，可谓神奇。&lt;/p&gt;

&lt;p&gt;为什么LLM会具备给一句「Let’s think step by step」提示语，就能列出详细的推理步骤并算出答案呢？其原因目前尚无定论，我的猜测是：很可能因为预训练数据里面存在大量的此种数据，就是以「Let’s think step by step」开头，然后后面是详细的推理步骤，最后给出答案，而 LLM 在预训练的时候记住了这些模式。而当我们输入这个提示语的时候，激发 LLM 模糊得“回忆”起某些例子的推导步骤，于是即可模仿这些例子进行步骤推理并给出答案。当然这只是我的无依据推论，若事实真的如此，如果你看过后面介绍的标准 CoT 做法，会发现 Zero-shot CoT 本质上和标准 CoT 很可能没什么区别，只是标准 CoT 由人工来写推理步骤的示例，而 Zero-shot CoT 大概率是通过提示语，激活了记忆中的某些包含推理步骤的示例，很可能是如此区别。而标准 CoT 效果比 Zero-Shot CoT 效果好也完全可以理解，因为毕竟靠 LLM 回忆示例，精准性估计不会太高，而人工给出的示例，准确性是有保障的，所以自然标准CoT效果会更好。&lt;/p&gt;

&lt;p&gt;这侧面说明了一个道理，就是 LLM 本身是具备推理能力的，只是我们没有办法把它的这种能力激发出来而已，通过合适的提示语来进行两步提示，就在一定程度上可以释放出它的这种潜力。另外，对于中文，很可能存在另外一个黄金提示语，比如「详细解题思路如下」，类似这种，因为中文语料在讲解推理步骤的时候，经常用的引导句和「让我们一步一步来思考」应该是不同的，这是明显的西方说法，而探索出这个中文黄金提示语，其实也是很有必要的。&lt;/p&gt;

&lt;p&gt;第二种思路一般被称为基于示例的思维链（few-shot CoT,Chain of Thought）Prompting。这个方向目前是LLM推理研究的主方向，很多工作都是在这个思路上做的，我们简单介绍几个效果显著的代表性工作，基本能代表 CoT 的技术发展方向。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-13.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CoT 的主体思想其实很直白；为了教会 LLM 模型学会推理，给出一些人工写好的推理示例，示例里把得到最终答案前，一步步的具体推理步骤说清楚，而这些人工写的详细推理过程，就是思维链 Prompting，具体例子可参照上图中蓝色文字部分。CoT 的意思是让 LLM 模型明白一个道理；就是在推理过程中，步子不要迈得太大，否则很容易出错，改变思维模式，化大问题为小问题，步步为营，积小胜为大胜。最早明确提出 CoT 这个概念的文章是“Chain of thought prompting elicits reasoning in large language models”，论文发布于22年1月份，虽然做法很简单，但是应用 CoT 后 LLM 模型的推理能力得到了巨大提升，GSM8K数学推理测试集准确率提高到60.1%左右。当然，这种给出详细推理步骤和中间过程的思想，并非 CoT 最早提出的，更早一些的「scratchpad」技术（可参考：Show Your Work: Scratchpads for Intermediate Computation with Language Models）首先采用了类似的思路。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-14.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CoT 提出不久，很快在 22 年 3 月份，一项被称为「Self-Consistency」的改进技术就将 GSM8K 测试集准确率提高到 74.4%，提出这项改进的论文是“Self-Consistency Improves Chain of Thought Reasoning in Language Models”。“Self-Consistency”的思路也很直观（参考上图）：首先可以利用CoT给出几个写了推理过程的示例，然后要求 LLM 对给定的问题进行推理，如果是 CoT，直接输出一个推理过程和答案，整个过程就结束了。「Self-Consistency」则不然，它要求 LLM 输出多个不同的推理过程和答案，然后采用投票的方式选出最佳答案，思路非常简单直接，但是效果也确实好。「Self-Consistency」其实是教导 LLM 学会这么一个道理：孔乙己说过茴香豆的「茴」字有四种写法，类似的，一个数学题的正确解法也可以有很多种，每个不同的推导过程都指向最终的答案。条条大路通罗马，虽说也有个别迷路走到北京的，但是迷路的毕竟是少数，看看大多数人走到哪里，哪里就是正确答案。简单的方法往往蕴含着深刻的哲学含义，是不是这道理？&lt;/p&gt;

&lt;p&gt;再往后，“On the Advance of Making Language Models Better Reasoners”这个工作在「Self-Consistency」基础上，进一步集成了「从一个Prompt问题拓展到多个 Prompt 问题、检查推理中间步骤的正确性以及对多个输出的回答加权投票」这三个改进点，将 GSM8K 测试集准确率提高到 83% 左右。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-15.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三种思路体现了一种分治算法的思想。当然这个所谓「分治」是我归纳的，别人没这么说。这种思路的核心思想是：对于一个复杂的推理问题，我们把它分解成若干容易解决的子问题，一一解决掉子问题后，我们再从子问题的答案推导复杂问题的答案。你看这确实比较类似分治算法的思想吧。我个人觉得，这种思路可能才是揭示问题本质、最终解决 LLM 复杂推理问题正宗的道路。我们以「Least-to-most prompting」技术为例来说明这种思路的一种具体实现方式，如上图所示：它分为两个阶段，第一个阶段，从原始问题我们可以得知最终要问的问题是什么，我们假设最终问题是Final Q，然后从原始问题填充 Prompt 模版：“如果要解决Final Q问题，那么我需要先解决”，然后把原始问题和这个 Prompt 交给 LLM，让 LLM 模型给出答案，等于让 LLM 给出最终问题的前置子问题 Sub Q；接下来我们进入第二个阶段，让 LLM 先回答刚才拿到的子问题Sub Q，并拿到对应的答案，然后原始问题拼接子问题 Sub Q 及对应答案，再去问 LLM 最终那个问题 Final Q，此时LLM会给出最后的答案。如此这般，体现出拆解子问题，并从子问题的答案逐步找出最终答案的思路。&lt;/p&gt;

&lt;h3 id=&quot;2代码预训练增强-llm-推理能力&quot;&gt;2、代码预训练增强 LLM 推理能力&lt;/h3&gt;

&lt;p&gt;以上是目前利用 Prompt 激发 LLM 模型推理能力的三种主流做法，而关于 LLM 的推理能力，目前还观察到一个有趣且费解的现象：除了文本外，如果能够加入程序代码一起参与模型预训练，则能大幅提升 LLM 模型的推理能力。这个结论从不少论文的实验部分都可以得出（可以参考：AUTOMATIC CHAIN OF THOUGHT PROMPTING IN LARGE LANGUAGE MODELS／Challenging BIG-Bench tasks and whether chain-of-thought can solve them等论文的实验部分）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-16.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图给出了一份实验数据，来自于论文“On the Advance of Making Language Models Better Reasoners”，其中 GPT3 davinci 就是标准的 GPT 3 模型，基于纯文本训练；code-davinci-002（OpenAI 内部称为 Codex）是同时在 Code 和 NLP 数据上训练的模型。如果比较两者效果，可以看出，不论采用具体哪种推理方法，仅仅是从纯文本预训练模型切换到文本和 Code 混合预训练模型，在几乎所有测试数据集合上，模型推理能力都得到了巨大的效果提升，比如我们以「Self Consistency」方法为例，在大多数据集合上的性能提升，都直接超过了 20 到 50 个百分点，这是很恐怖的性能提升，而其实在具体推理模型层面，我们什么也没做，仅仅是预训练的时候除了文本，额外加入了程序代码而已。&lt;/p&gt;

&lt;p&gt;除了这个现象，从上图数据中，我们还可以得出其它一些结论，比如 GPT 3这种纯文本预训练模型，其实是具备相当程度的推理能力的，除了在 GSM8K 这种数学推理上效果比较差外，其它推理数据数据集合表现也还可以，前提你需要采用合适的方法，来激发出它本身就具备的这种能力；再比如，text-davinci-002，也就是在 code-davinci-002 基础上加入 instruct fine-tuning 后的模型（就是加入 InstructGPT 或 ChatGPT 模型的第一步），其推理能力要弱于 Codex，但是有其它研究表明它在自然语言处理任务又要强于 Codex。而这貌似说明了，加入 instruct fine-tuning，会损害 LLM 模型的推理能力，但是会在一定程度上提升自然语言理解能力。而这些结论其实都是很有意思的，也能启发后续进一步的思考和探索。&lt;/p&gt;

&lt;p&gt;那么，一个自然的疑问是：为何预训练模型可以从代码的预训练中获得额外的推理能力？确切原因目前未知，值得深入探索。我猜测可能是因为原始版本的 Codex（只使用代码训练，可参考文献：Evaluating Large Language Models Trained on Code）的代码训练是从文本生成代码，而且代码中往往包含很多文本注释，本质上这类似于预训练模型做了 &amp;lt;文本,Code&amp;gt; 两种数据的多模态对齐工作。而数据中必然包含相当比例的数学或逻辑问题的代码、描述和注释，很明显这些数学类或逻辑推理类的数据，对于解决下游数学推理问题是有帮助的，我猜大概率原因在此。&lt;/p&gt;

&lt;h3 id=&quot;3关于-llm-推理能力的思考&quot;&gt;3、关于 LLM 推理能力的思考&lt;/h3&gt;

&lt;p&gt;上面介绍了 LLM 推理的主流技术思路和现有的一些结论，接下来谈谈我对 LLM 模型推理技术的思考，以下内容纯个人推断，没有太多证据，还请谨慎参考。我的判断是：虽然最近一年来，关于激发 LLM 的推理能力，这方面的技术进展很快，也取得了很大的技术进步，但是总体感觉是，我们可能走在正确的方向上，但是距离接触到真正的问题本质还有一段距离，对此要有更深入的思考和探索。&lt;/p&gt;

&lt;p&gt;首先，我比较赞同上述分治算法的主体思路，对于复杂的推理问题，我们应该把它拆解成若干简单的子问题，因为子问题对于 LLM 来说回答正确的概率就大很多，让 LLM 一一 回答子问题后，再逐步推导出最终答案。受到「Least-to-most prompting」技术的启发，如果进一步思考，我觉得LLM推理本质上很可能会是如下两种可能的其中之一：不断和 LLM 进行交互的图上推理问题，抑或是不断和LLM进行交互的程序流程图执行问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-17.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先说图上推理问题，如上图所示，假设我们有办法能够把复杂问题拆解成由子问题或者子步骤构成的图结构，图中的节点是子问题或者子步骤，图中的边代表了子问题之间的依赖关系，就是说只有回答好子问题 A，才能回答子问题 B，而且图中大概率存在循环结构，就是反复做某几个子步骤。假设我们能够得到上述的子问题拆解图，那么可以根据依赖关系，引导 LLM 一步一步按照图结构，回答必须首先回答的子问题，直到推导出最终答案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backup/2023-01-09-agi-llm-tech-18.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再说程序流程图问题，参考上图，假设我们有办法把复杂问题拆解成子问题或子步骤，并产生一个由子步骤构成的类似程序流程图的结构，在这个结构里，有些步骤会反复执行多次（循环结构），有些步骤的执行需要进行条件判断（条件分支）。总而言之，在执行每个子步骤的时候和 LLM 进行交互，得到子步骤的答案，然后按照流程不断执行，直到输出最终答案。类似这种模式。假设这个思路大致正确的话，也许可以从这个角度来解释为何加入代码会增强预训练模型的推理能力：大概率因为&amp;lt;文本，代码&amp;gt;的多模态预训练模型，在模型内部是通过类似这种隐含的程序流程图作为两个模态的桥梁，将两者联系起来的，即由文本描述到隐含的流程图，再映射到由流程图产生具体的代码。也就是说，这种多模态预训练，可以增强 LLM 模型从文本构建出隐含的流程图并按照流程图执行的能力，也就是加强了它的推理能力。&lt;/p&gt;

&lt;p&gt;当然，上述思路最大的问题是，我们如何根据文本描述的问题，能够靠LLM模型，或者其它模型，得到图结构或者流程图结构？这个可能是其中的难点。一种可能的思路就类似继续增强文本和更高质量的代码预训练，走隐式学习内部隐含结构的方法。而目前的 CoT 技术，如果套到上述思路来思考的话，可以这么理解：标准 CoT，其实就是靠自然语言文本来描述图结构或者程序流程图的；而「Least-to-most prompting」技术，则是试图根据最后一个图节点，靠倒推来试图推导出其中的图结构，但是很明显，目前的方法限制了它倒推的深度，也就是说它只能推导出非常简单的图结构，这正是限制它能力的所在。&lt;/p&gt;

&lt;h2 id=&quot;六未来之路llm-研究趋势及值得研究的重点方向&quot;&gt;六、未来之路：LLM 研究趋势及值得研究的重点方向&lt;/h2&gt;

&lt;p&gt;这里列出一些我个人认为比较重要的LLM研究领域，或值得深入探索的研究方向。&lt;/p&gt;

&lt;h4 id=&quot;探索-llm-模型的规模天花板&quot;&gt;探索 LLM 模型的规模天花板&lt;/h4&gt;

&lt;p&gt;尽管继续推大 LLM 模型的规模，这事看似没有技术含量，但是其实这个事情异常重要。我个人判断，自从Bert出现以来，到GPT 3，再到 ChatGPT，大概率这些给人印象深刻的关键技术突破，核心贡献都来自于 LLM 模型规模的增长，而非某项具体技术。说不定，揭开 AGI 真正的钥匙就是：超大规模及足够多样性的数据、超大规模的模型，以及充分的训练过程。再者，做超大规模的LLM模型，对技术团队的工程实现能力要求是非常高的，也不能认为这事情缺乏技术含量。&lt;/p&gt;

&lt;p&gt;那么继续推大 LLM 模型规模，有什么研究意义呢？我觉得有两方面的价值。首先，如上所述，我们已知，对于知识密集型的任务，随着模型规模越大，各种任务的效果会越来越好；而对很多推理类型的有难度的任务，加上 CoT Prompting 后，其效果也呈现出遵循 Scaling law 的趋向。那么，很自然的一个问题就是：对于这些任务，LLM 的规模效应，能将这些任务解决到何种程度？这是包括我在内，很多人关心的问题。其次，考虑到 LLM 具备的神奇的“涌现能力”，如果我们继续增加模型规模，它会解锁哪些让我们意想不到的新能力呢？这也是很有意思的问题。考虑到以上两点，我们仍然需要不断增大模型规模，看看模型规模对解决各类任务的天花板在哪里。&lt;/p&gt;

&lt;p&gt;当然，这种事情也就只能说说，对 99.99% 的从业者来说，是没有机会和能力做这个事情的。要做这个事情，对研究机构的财力及投入意愿、工程能力、技术热情，都有极高的要求，缺一不可。能做这事情的机构，粗估下来，国外不超过 5 家，国内不超过 3 家。当然，考虑到成本问题，未来也许会出现“股份制大模型”，就是有能力的几家机构合作，群策群力，一起来共建超级大模型的现象。&lt;/p&gt;

&lt;h4 id=&quot;增强-llm-的复杂推理能力&quot;&gt;增强 LLM 的复杂推理能力&lt;/h4&gt;

&lt;p&gt;正如之前对LLM推理能力的叙述，尽管LLM在最近一年推理能力得到了很大的提升，但是很多研究（参考：Limitations of Language Models in Arithmetic and Symbolic Induction／Large Language Models Still Can’t Plan）表明，目前LLM能够解决得比较好的推理问题，往往都相对简单，LLM 的复杂推理能力仍然薄弱，比如即使是简单的字符拷贝推理或者加减乘除运算，当字符串或者数字非常长的时候，LLM 推理能力会极速下降，再比如行为规划能力等复杂推理能力很弱。总而言之，加强LLM的复杂推理能力，应该是LLM未来研究中最重要的环节之一。&lt;/p&gt;

&lt;p&gt;前文有述，加入代码加入预训练，这是一种直接增强LLM推理能力的方向。这个方向目前研究尚显不足，更像是实践经验的总结，探索背后的原理，并进而引入更多类型除代码外的新型数据来增强LLM的推理能力，这可能是更本质提升推理能力的方向。&lt;/p&gt;

&lt;h4 id=&quot;llm-纳入-nlp-之外更多其它研究领域&quot;&gt;LLM 纳入 NLP 之外更多其它研究领域&lt;/h4&gt;

&lt;p&gt;目前的 ChatGPT 擅长 NLP 和 Code 任务，作为通向AGI的重要种子选手，将图像、视频、音频等图像与多模态集成进入 LLM，乃至 AI for Science、机器人控制等更多、差异化更明显的其它领域逐步纳入 LLM，是 LLM 通往AGI的必经之路。而这个方向才刚刚开始，因此具备很高的研究价值。&lt;/p&gt;

&lt;h4 id=&quot;更易用的人和-llm-的交互接口&quot;&gt;更易用的人和 LLM 的交互接口&lt;/h4&gt;

&lt;p&gt;如前所述，ChatGPT 的最大技术贡献即在此。但是很明显，目前的技术并不完美，肯定还有很多命令 LLM 理解不了。所以，沿着这个方向，寻找更好的技术，来让人类使用自己习惯的命令表达方式，而 LLM 又能听懂，这是个新的，且非常有前景的技术方向。&lt;/p&gt;

&lt;h4 id=&quot;建设高难度的综合任务评测数据集&quot;&gt;建设高难度的综合任务评测数据集&lt;/h4&gt;

&lt;p&gt;好的评测数据集，是引导技术不断进步的基石。随着 LLM 模型逐步增大，任务效果快速提升，导致很多标准测试集快速过时。也就是说，这些数据集合相对现有技术来说，太容易了，在没有难度的测试集合下，我们不知道目前技术的缺陷和盲点在哪里。所以构建高难度的测试集合，是促进 LLM 技术进步的关键所在。&lt;/p&gt;

&lt;p&gt;目前行业应出现了一些新的测试集，有代表性的包括 BIGBench、OPT-IML 等。这些测试集合体现出一些特性，比如相对 LLM 现有技术具备一定的难度、综合了各种各样多种类型的任务等。&lt;/p&gt;

&lt;p&gt;受到 ChatGPT 的启发，我觉得除此外应纳入另一考虑因素：体现真实用户需求。就是说，这些任务的表述由用户真实发起，这种方式构建出来的LLM模型，才能解决用户实际需求。&lt;/p&gt;

&lt;p&gt;除此外，相信 LLM 会快速将能力溢出到 NLP 之外的领域，而如何融入更多其它领域的评测数据，也是需要提前去考虑。&lt;/p&gt;

&lt;h4 id=&quot;高质量数据工程&quot;&gt;高质量数据工程&lt;/h4&gt;

&lt;p&gt;对于预训练模型来说，数据是其根本，预训练过程可以理解为从数据中吸取其中所包含知识的过程。因此，我们需要进一步加强对高质量数据的挖掘、收集及清洗等工作。&lt;/p&gt;

&lt;p&gt;关于数据，需要考虑两个方面：数据的质量和数量。而根据T5的对比实验，我们可以得出结论：在数量和质量两个因素里，质量优先，正确的道路应该是在保证数据质量的前提下，再去增大数据规模。&lt;/p&gt;

&lt;p&gt;数据质量，包括数据的信息含量以及数据的多样性等多个衡量标准，比如Wiki明显就属于世界知识密度极高的高质量数据，这是从信息含量来说的；而增加数据类型的多样性，无疑是激发LLM各种新能力的根本，比如加入问答网站的数据，对于LLM的QA能力提升是有直接帮助的。多样化的数据赋予了LLM更好解决更多不同类型任务的能力，所以，这可能是数据质量里最关键的标准。&lt;/p&gt;

&lt;p&gt;关于数据数量，原则上互联网上公开发布的数据都可以纳入LLM模型的预训练过程。那么，它的极限在哪里？“Will we run out of data? An analysis of the limits of scaling datasets in Machine Learning” 对此进行了估算，结论是到 2026 年左右，高质量的NLP数据将会用光，低质量 NLP 数据会在 2030 到 2050 年用光，而低质量图像数据会在 2030 到 2060 年用光。而这意味着：要么到时我们有新类型的数据源，要么我们必须增加 LLM 模型对数据的利用效率。否则，目前这种数据驱动的模型优化方式将会停止进步，或者收益减少。&lt;/p&gt;

&lt;h4 id=&quot;超大-llm-模型-transformer-的稀疏化&quot;&gt;超大 LLM 模型 Transformer 的稀疏化&lt;/h4&gt;

&lt;p&gt;目前规模最大的 LLM 中，有相当比例的模型采取了稀疏（Sparse）结构，比如 GPT 3、PaLM、GLaM 等，GPT 4 大概率也会走稀疏模型路线。之所以采用 Sparse 化的模型，主要好处是它可以极大减少LLM的训练时间和在线推理时间。Switch Transformer 论文里指出：在相同算力预算的前提下，使用稀疏化 Transformer，相对 Dense Transformer，LLM 模型的训练速度可以提升 4 倍到 7 倍。为何 Sparse 模型可以加快训练和推理时间呢？这是因为尽管模型参数巨大，但是对于某个训练实例，Sparse模型通过路由机制，只使用整个参数中的一小部分，参与训练和推理的活跃参数量比较少，所以速度快。&lt;/p&gt;

&lt;p&gt;我认为未来超大的 LLM 模型大概率会收敛到稀疏模型。主要有两个原因：一方面，现有研究表明（参考：Large Models are Parsimonious Learners: Activation Sparsity in Trained Transformers），标准的 Dense Transformer在训练和推理时，它本身也是稀疏激活的，就是说只有部分参数会被激活，大部分参数没有参与训练和推理过程。既然这样，我们不如直接迁移到稀疏模型；另外，毫无疑问 LLM 模型的规模会继续推大，而高昂的训练成本是妨碍其进一步扩大模型的重要阻力，使用稀疏模型可以极大降低超大模型的训练成本，所以随着模型规模越大，稀疏模型带来的收益越明显。考虑到这两个方面，大概率未来更大的 LLM 模型会采用稀疏模型方案。&lt;/p&gt;

&lt;p&gt;那为何目前其它大规模模型不走稀疏模型的路线呢？因为 Sparse 模型存在训练不稳定、容易过拟合等问题，不太容易训练好。所以，如何修正稀疏模型面临的问题，设计出更容易训练的稀疏模型，是很重要的未来研究方向。&lt;/p&gt;

&lt;h2 id=&quot;七取经之路复刻-chatgpt-时要注意些什么&quot;&gt;七、取经之路：复刻 ChatGPT 时要注意些什么&lt;/h2&gt;

&lt;p&gt;如果希望能复刻类似 ChatGPT 这种效果令人惊艳的LLM模型，综合目前的各种研究结论，在做技术选型时需要重点权衡如下问题：&lt;/p&gt;

&lt;p&gt;首先，在预训练模式上，我们有三种选择：GPT 这种自回归语言模型，Bert 这种双向语言模型，以及 T5 这种混合模式（Encoder-Decoder 架构，在 Encoder 采取双向语言模型，Decoder 采取自回归语言模型，所以是一种混合结构，但其本质仍属于 Bert 模式）。我们应选择 GPT 这种自回归语言模型，其原因在本文范式转换部分有做分析。目前看，国内 LLM 在做这方面技术选型的时候，貌似很多都走了 Bert 双向语言模型或 T5 混合语言模型的技术路线，很可能方向走偏了。&lt;/p&gt;

&lt;p&gt;第二，强大的推理能力是让用户认可 LLM 的重要心理基础，而如果希望LLM能够具备强大的推理能力，根据目前经验，最好在做预训练的时候，要引入大量代码和文本一起进行 LLM 训练。至于其中的道理，在本文前面相关部分有对应分析。&lt;/p&gt;

&lt;p&gt;第三，如果希望模型参数规模不要那么巨大，但又希望效果仍然足够好，此时有两个技术选项可做配置：要么增强高质量数据收集、挖掘、清理等方面的工作，意思是我模型参数可以是 ChatGPT / GPT 4 的一半，但是要想达到类似的效果，那么高质量训练数据的数量就需要是 ChatGPT/GPT 4 模型的一倍（Chinchilla 的路子）；另外一个可以有效减小模型规模的路线是采取文本检索（Retrieval based）模型 + LLM 的路线，这样也可以在效果相当的前提下，极大减少 LLM 模型的参数规模。这两个技术选型不互斥，反而是互补的，也即是说，可以同时采取这两个技术，在模型规模相对比较小的前提下，达到超级大模型类似的效果。&lt;/p&gt;

&lt;p&gt;第四，超级大模型因为模型规模大，所以训练成本过高，导致很少有机构有能力去做这件事。而且由上文分析可见，继续不断推大LLM模型规模是肯定会发生、也应该去做的事情。于是，如何通过技术手段降低 LLM 的训练成本就很重要。LLM 的特征抽取器 Sparse 化是有效降低模型训练及推理成本的技术选择。由此可见，随着模型越来越大，LLM模型Sparse化是一个应该考虑的选项。&lt;/p&gt;

&lt;p&gt;第五，ChatGPT 是目前最接近理想 LLM 的技术方案，而理想中的 LLM 应该是以一个几乎无所不能的基础通用大模型作为依托，来支持各种各样的上层任务类型。目前看，支持越来越多的任务类型，主要是通过增加 LLM 预训练数据的多样性来达成的，数据多样性越好，LLM 能够支持的任务类型就越丰富。所以，应该重视通过增加数据多样性来增加 LLM 新能力的思路。&lt;/p&gt;

&lt;p&gt;第六，易用的人机操作接口。人类用他们自己习惯的表达方式来描述任务，而 LLM 要能够理解这些 Instruct 的真实含义。另外，也要注意这些 Instruct 是符合人类真实需求的，就是说，要从最终用户那里收集任务表述方式，而不能靠研发人员自己的臆想或猜测。ChatGPT 给我最大的启发其实是这一点，至于是否用增强学习我倒觉得不重要，其它替代技术应该也能做类似的事情。&lt;/p&gt;

&lt;h2 id=&quot;八chatgpt为什么是-openai&quot;&gt;八、ChatGPT：为什么是 OpenAI&lt;/h2&gt;

&lt;p&gt;为什么是 OpenAI 作出了 ChatGPT，而不是其它机构呢？我们在这里可以做个简单分析。&lt;/p&gt;

&lt;p&gt;在本文开头，我们提到了 OpenAI 看待LLM的理念。OpenAI 是怎么看待 LLM 的呢？回顾它不断推出的技术，可以看出，它其实从 GPT 1.0 开始，基本就坚定地把 LLM 看做是通往AGI的一条必由之路。具体而言，在 OpenAI 眼中，未来的AGI应该长这个样子：有一个任务无关的超大型LLM，用来从海量数据中学习各种知识，这个 LLM 以生成一切的方式，来解决各种各样的实际问题，而且它应该能听懂人类的命令，以便于人类使用。其实对 LLM 发展理念的理解，在前半部分，就是「构建一个任务无关的超大型 LLM，让它从海量数据中学习各种知识」，这一点几乎是大家的共识，能体现出 OpenAI 眼光的其实是后半部分。&lt;/p&gt;

&lt;p&gt;OpenAI 的理念比较超前，对自我定位从一开始就定得比较高，始终坚定不移地探索上述方式是否可以实现 AGI。OpenAI 之所以能作出 ChatGPT，胜在一个是定位比较高，另一个是不受外界干扰，态度上坚定不移。&lt;/p&gt;

&lt;p&gt;我们可以回顾下它走的一些关键路程：GPT 1.0 走的是生成模式的自回归语言模型路线，比 Bert 出来的还早些。Bert 证明了：双向语言模型对于很多 NLP 理解类任务，效果比自回归这种单向语言模型效果更好。尽管如此，GPT 2.0 并没有因此切换到双向语言模型这条路上，仍然走文本生成的路，而且开始尝试零示例（zero shot）prompt 和少量示例（few shot）prompt。其实这时候， OpenAI 心目中的 AGI 已经开始浮出水面，逐渐显示出轮廓了。只是因为 zero shot/few shot 效果比 Bert+fine-tuning 差的比较远，所以大家都没太当回事，甚至不理解它为什么要始终坚持走单向语言模型的路线。这个时候，我估计即使是 OpenAI 自己，也不一定能确保这条路肯定能走通。&lt;/p&gt;

&lt;p&gt;但是，这不妨碍它继续在这条路上往后走。GPT 3.0已经展示出了比较强大的zero shot/few shot prompt 能力，这时候 OpenAI 心目中的 AGI 已经完全漏出水面，轮廓清晰，而且它的效果也证明了这条路，是有较大可能走得通的。GPT 3.0 是一个决定 LLM 发展方向的叉路口和分水岭，与之对应的另外一条路是「Bert+fine-tuning」模式。在这个岔路口，不同的从业者选择走上了不同的道路，后面的技术差距也是从这里开始拉开的。很遗憾地是，国内很多从业者选择继续在「Bert+fine-tuning」这条路上往后走，这也是造成今天落后局面的一个关键时间节点。再往后，就是 InstructGPT 和 ChatGPT 了，OpenAI 通过 ChatGPT 证明了一点；虽然我们距离真正的 AGI，可能还有很长的路要走，但是通过超大 LLM 走向 AGI 这条路，目前看是可行的。&lt;/p&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="NLP" /><category term="自然语言处理" /><category term="神经网络" /><category term="Attention" /><category term="注意力" /><category term="AIGC" /><category term="Transformer" /><category term="AGI" /><summary type="html"></summary></entry><entry><title type="html">自然语言处理 AIGC 近年的发展脉络、关键论文、技术里程碑和商业应用</title><link href="https://www.mikecaptain.com/2022/12/24/captain-nlp-1/" rel="alternate" type="text/html" title="自然语言处理 AIGC 近年的发展脉络、关键论文、技术里程碑和商业应用" /><published>2022-12-24T15:08:01+00:00</published><updated>2022-12-24T15:08:01+00:00</updated><id>https://www.mikecaptain.com/2022/12/24/captain-nlp-1</id><content type="html" xml:base="https://www.mikecaptain.com/2022/12/24/captain-nlp-1/">&lt;ul&gt;
  &lt;li&gt;作者：麦克船长（钟超）&lt;/li&gt;
  &lt;li&gt;微信：sinosuperman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一自然语言处理领域近年的发展关键节点&quot; id=&quot;markdown-toc-一自然语言处理领域近年的发展关键节点&quot;&gt;一、自然语言处理领域近年的发展关键节点&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1从理性主义到经验主义&quot; id=&quot;markdown-toc-1从理性主义到经验主义&quot;&gt;1、从理性主义到经验主义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2经验主义的早期还不是深度学习&quot; id=&quot;markdown-toc-2经验主义的早期还不是深度学习&quot;&gt;2、经验主义的早期，还不是深度学习&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3撇开特征让机器囫囵吞枣地学吧&quot; id=&quot;markdown-toc-3撇开特征让机器囫囵吞枣地学吧&quot;&gt;3、撇开特征，让机器「囫囵吞枣」地学吧&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4囫囵个儿地学习省去特征工程的人工但也少不了标注的人工&quot; id=&quot;markdown-toc-4囫囵个儿地学习省去特征工程的人工但也少不了标注的人工&quot;&gt;4、囫囵个儿地学习，省去特征工程的人工，但也少不了标注的人工&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5自监督学习法让我们省去人工标注&quot; id=&quot;markdown-toc-5自监督学习法让我们省去人工标注&quot;&gt;5、自监督学习法，让我们省去人工标注&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6用原始的任务训练出来的模型能迁移去解决新任务吗&quot; id=&quot;markdown-toc-6用原始的任务训练出来的模型能迁移去解决新任务吗&quot;&gt;6、用原始的任务训练出来的模型，能迁移去解决新任务吗？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7从理解到生成nlp-是最直面-aigc-最硬核难题的领域&quot; id=&quot;markdown-toc-7从理解到生成nlp-是最直面-aigc-最硬核难题的领域&quot;&gt;7、从理解到生成，NLP 是最直面 AIGC 最硬核难题的领域&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#8数据和算力有了还不够&quot; id=&quot;markdown-toc-8数据和算力有了还不够&quot;&gt;8、数据和算力有了，还不够&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二学术里程碑几篇重量级论文&quot; id=&quot;markdown-toc-二学术里程碑几篇重量级论文&quot;&gt;二、学术里程碑：几篇重量级论文&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#0提出-attention-机制的neural-machine-translation-by-jointly-learning-to-align-and-translate2015&quot; id=&quot;markdown-toc-0提出-attention-机制的neural-machine-translation-by-jointly-learning-to-align-and-translate2015&quot;&gt;0、提出 Attention 机制的《Neural Machine Translation by Jointly Learning to Align and Translate》（2015）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#1提出-transformer-的attention-is-all-you-need2017&quot; id=&quot;markdown-toc-1提出-transformer-的attention-is-all-you-need2017&quot;&gt;1、提出 Transformer 的《Attention is All You Need》（2017）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2elmo-deep-contextualized-word-representations&quot; id=&quot;markdown-toc-2elmo-deep-contextualized-word-representations&quot;&gt;2、ELMo: Deep contextualized word representations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3gpt-1improving-language-understanding-by-generative-pre-training&quot; id=&quot;markdown-toc-3gpt-1improving-language-understanding-by-generative-pre-training&quot;&gt;3、GPT-1：Improving Language Understanding by Generative Pre-Training&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding2018&quot; id=&quot;markdown-toc-4bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding2018&quot;&gt;4、BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding（2018）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5gpt-2&quot; id=&quot;markdown-toc-5gpt-2&quot;&gt;5、GPT-2：&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6gpt-3-language-models-are-few-shot-learners2020&quot; id=&quot;markdown-toc-6gpt-3-language-models-are-few-shot-learners2020&quot;&gt;6、GPT-3: Language Models are Few-Shot Learners（2020）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7instructgpt&quot; id=&quot;markdown-toc-7instructgpt&quot;&gt;7、InstructGPT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#其他的重量级论文&quot; id=&quot;markdown-toc-其他的重量级论文&quot;&gt;其他的重量级论文&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三行业里程碑&quot; id=&quot;markdown-toc-三行业里程碑&quot;&gt;三、行业里程碑&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四成本&quot; id=&quot;markdown-toc-四成本&quot;&gt;四、成本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五业内应用&quot; id=&quot;markdown-toc-五业内应用&quot;&gt;五、业内应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五行业内哪些人的言论值得我们日常重点关注&quot; id=&quot;markdown-toc-五行业内哪些人的言论值得我们日常重点关注&quot;&gt;五、行业内哪些人的言论值得我们日常重点关注&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一自然语言处理领域近年的发展关键节点&quot;&gt;一、自然语言处理领域近年的发展关键节点&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-17-ai-bert-1-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1从理性主义到经验主义&quot;&gt;1、从理性主义到经验主义&lt;/h4&gt;

&lt;p&gt;自然语言处理（Natural Language Processing，简称 NLP），一开始走的是专家路线，也就是想「白盒化」来解构对自然语言的理解，这被称为「符号主义（Symbolism）」。符号主义的背后，是人类对自己用符号系统基于逻辑来完全数字化自然语言的自信。反正这条路目前是没走出来，你要非说「这其实是自负」，暂时人工智能专家们也无可辩驳。沿着这个路径的研究一直占据人工智能主流到 20 世纪 90 年代。&lt;/p&gt;

&lt;p&gt;这里我们想想，自然语言处理，其实是两个过程，一个是输入，即对自然语言的理解，一个是输出，即近期有点火的概念 AIGC（Artificial Intelligence Generated Content）。我们这里说说前者，人类学习语言的过程，哪有什么符号系统，哪有什么逻辑，就是被疯狂输入，然后经过很多个月之后，一个小 baby 就学会说话了，这个过程没有「理性主义」的痕迹，只有「经验主义」的胜利。那么 AI 学人话，能这样吗？&lt;/p&gt;

&lt;p&gt;于是就有了所谓「联结主义（Connectionism）」：你知道人的神经元网络吧？这个是一个个神经元，相互联结组成一个网络，通过这个网络来非常「黑盒化」地学习自然语言。至于这个网络里的每一个细节，我们不甚清楚，但就是可以通过这个网络模型学会自然语言，这就是一种「经验主义」。从 20 世纪 90 年代，人工智能领域就是沿着这个方向取得了巨大进展的。要注意一点，经验主义地路径解决 NLP 问题，并不等同于神经网络，但它是目前最有效的。&lt;/p&gt;

&lt;h4 id=&quot;2经验主义的早期还不是深度学习&quot;&gt;2、经验主义的早期，还不是深度学习&lt;/h4&gt;

&lt;p&gt;最初的经验主义，还是主要通过人工对特征进行「经验性地」提取，对计算机来说不要让它求甚解，直接给它喂这些梳理好的「特征」就好了。而这个需要一定的专业领域知识储备，加上人工地提取特征的操作过程，被称为「特征工程」。&lt;/p&gt;

&lt;p&gt;可以看出来，「特征工程」的人工工作量非常大，可以说是名副其实的「人工」智能了（此处捂脸）。但这已经比此前的、有点理想的那种构建符号系统的想法，要务实多了，也确实在解决问题的实用主义上也好得多。以这个为主流的研究，大概持续到 2010 年代。&lt;/p&gt;

&lt;h4 id=&quot;3撇开特征让机器囫囵吞枣地学吧&quot;&gt;3、撇开特征，让机器「囫囵吞枣」地学吧&lt;/h4&gt;

&lt;p&gt;要经过「人工」对特征进行研究、提取，实在是太难了，你说是「经验主义」，其实我个人认为有点介于「理性主义」与「经验主义」之间。毕竟还是非常需要人进行非常专家级地梳理的。于是，更囫囵个儿地给机器喂数据，让机器学会的方向，逐渐成为主流。能这样的前提，是牛逼算力的大发展，以及海量数据集的大规模沉淀，所以才会在 2010 年代爆发。&lt;/p&gt;

&lt;p&gt;这囫囵吞枣的学法，目前主要都是基于深度神经网路的表示学习方法实现的。为啥说「深度神经网络」，因为「从输入到输出」是有一层又一层的神经网络，第一层接收原始的自然语言输入，这么多层的神经网络就被称为深度神经网络。这个过程显著地避免了「特征工程」的人工高成本。&lt;/p&gt;

&lt;h4 id=&quot;4囫囵个儿地学习省去特征工程的人工但也少不了标注的人工&quot;&gt;4、囫囵个儿地学习，省去特征工程的人工，但也少不了标注的人工&lt;/h4&gt;

&lt;p&gt;虽然省去了需要专家的「特征工程」，但是这个「囫囵个儿学习法」还是需要依赖标注数据的，也就是「监督学习」。通过先学习大量有人工标注地数据，构建好深度神经网络后，再对测试数据进行验证，最后再用于使用。能不能把人工标注也给省了？或者至少不需要海量标注吧。&lt;/p&gt;

&lt;h4 id=&quot;5自监督学习法让我们省去人工标注&quot;&gt;5、自监督学习法，让我们省去人工标注&lt;/h4&gt;

&lt;p&gt;大家上中学的时候做过英语试卷里的「完形填空」吗？为什么我们根据一个填空的上下文，能推测出这个空应该填什么词？那我们是不是可以根据这个原理，把一段段完整的文字内容挖词进行训练学习？没错，这个挖掉的词，就可以当做曾经的「人工标注」，上年文就是训练数据。但是需要海量的数据，怎么办？&lt;/p&gt;

&lt;p&gt;好在书籍、互联网网页是我们最好的数据来源，而且数据量极其巨大，于是这就解决了人工个标注问题。由此衍生出来的方法，就被成为「自监督学习（Self-Supervised Learning）」。&lt;/p&gt;

&lt;h4 id=&quot;6用原始的任务训练出来的模型能迁移去解决新任务吗&quot;&gt;6、用原始的任务训练出来的模型，能迁移去解决新任务吗？&lt;/h4&gt;

&lt;p&gt;这是一个迁移学习问题，这也就引出了「预训练（Pre-Training）」，最近火到出圈的「ChatGPT」最后两个字母「PT」就是「预训练」。正如「预训练」这个名字，我们先对一些原始任务用大量数据对一个模型进行训练（这个过程其实就叫预训练），然后对于实际要解决的各种任务，再使用少量数据对模型进行精调（Fine-Tune），从而得到一个解决具体问题的模型。&lt;/p&gt;

&lt;p&gt;这样的方式，让面对具体任务（可以叫下游任务，或者目标任务）时可以省去很多训练，所以对这种模型叫做「预训练模型」。因此上游任务的训练，就变得非常有复用性、通用性价值，而不是每次面对新任务构建新模型来训练。沿着预训练模型，NLP 取得了非常多的突破。这个技术趋势，是从 2017 年 Transformer 模型在论文《Attention is All You Need》被提出后开始的，在论文中作者使用了大量的未标记的语言数据进行自监督学习，以学习 Transformer 模型的语言表示。然后，在这个自监督学习的模型的基础上，再使用少量的标记数据进行进一步训练，以解决具体的目标任务。&lt;/p&gt;

&lt;h4 id=&quot;7从理解到生成nlp-是最直面-aigc-最硬核难题的领域&quot;&gt;7、从理解到生成，NLP 是最直面 AIGC 最硬核难题的领域&lt;/h4&gt;

&lt;p&gt;我们再说回到前面提到的人工标注，从这点来理解所谓「任务」。人工标注，是主观性很强的。在图像处理、语音识别两个领域，标注数据的复用性很强，所以可以积累大的数据标注集，这是有积累沉淀价值的，比如 CV 领域鼎鼎大名的 ImageNet 图像数据集。但是 NLP 领域的任务复杂、多样，很难像图像处理、语音识别那样单纯地得到大量有价值标注。什么意思呢？这与我们在不同领域面对的任务有关。&lt;/p&gt;

&lt;p&gt;比如给一副画，对于绝大多数需要输入这幅画的任务来说，标注出它是一副油画、作者梵高、画中有星空等等，都是必须的。比如对于一个人脸识别，哪里是眼睛、鼻子、嘴巴，也是从任务层面非常通用的。语音识别就更有通用性了。但是对于一句自然语言，一个随机的任务需要什么信息，这非常难以沉淀通用。&lt;/p&gt;

&lt;p&gt;从这个角度说，一个「图像处理」任务一般是要输出这个图像里有什么内容，一个「语音识别」任务一般是要输出这段语音的文字内容是什么。但是一个「自然语言处理」任务一般是要干嘛？鬼知道要干嘛，但肯定大多数时候是要先生成一段话作为回应，这也就是「自然语言生成」。&lt;/p&gt;

&lt;p&gt;所以 NLP 领域的 NLG（Natural Language Generation）面对着最多可能性的任务，也就是最直面 AIGC 核心问题的领域。&lt;/p&gt;

&lt;h4 id=&quot;8数据和算力有了还不够&quot;&gt;8、数据和算力有了，还不够&lt;/h4&gt;

&lt;p&gt;我个人认为，预训练这个方向之所以正确，就是因为它在推动 AGI（Artificial General Intelligent）。这背后是一个基本哲学问题：我们应该把劲儿使在推动 AGI，还是应该认为每个领域都应该有自己独有的模型？&lt;/p&gt;

&lt;p&gt;这个问题的答案，在我看来是笃定的。AI 目前面对的还是人类思考的问题，而人面对的问题去构建的人脑学习模型，并没有呈现出在不同领域里人脑的学习方式有显著差异，更何况计算机能容纳的学习能力显然更广、更深。因此我很笃定，我们一定是要构建 AGI，为什么 AGI 将解决我们方方面面的问题。&lt;/p&gt;

&lt;p&gt;那么一个预训练模型，在下游能解决的问题越广，越说明这是在构建 AGI。但是反过来对上游的预训练模型的要求，就是它最好模型参数越多越好，这样能容纳的下游任务也就可能越多样。因此我们现在知道的 ChatGPT 背后的 OpenAI 公司此前研发的 GPT-3 已经有 1750 亿个参数了，这就是 —— 大模型。&lt;/p&gt;

&lt;p&gt;所以目前沿着预训练方向发展的自然语言处理领域，已经进入了「大模型、大数据、大算力」时代。&lt;/p&gt;

&lt;h3 id=&quot;二学术里程碑几篇重量级论文&quot;&gt;二、学术里程碑：几篇重量级论文&lt;/h3&gt;

&lt;p&gt;以下重量级的论文，每一篇都不短，B 站上有一些二手解读，虽然二手但是也值得高效地看下，这些论文我罗列如下。我的理解也不深，欢迎随时交流。&lt;/p&gt;

&lt;h4 id=&quot;0提出-attention-机制的neural-machine-translation-by-jointly-learning-to-align-and-translate2015&quot;&gt;0、提出 Attention 机制的《Neural Machine Translation by Jointly Learning to Align and Translate》（2015）&lt;/h4&gt;

&lt;p&gt;Bahdanau 等人在 2015 年提出了 Attention 机制，论文地址：&lt;a href=&quot;https://arxiv.org/pdf/1409.0473.pdf&quot;&gt;https://arxiv.org/pdf/1409.0473.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;1提出-transformer-的attention-is-all-you-need2017&quot;&gt;1、提出 Transformer 的《Attention is All You Need》（2017）&lt;/h4&gt;

&lt;p&gt;论文地址：&lt;a href=&quot;https://arxiv.org/pdf/1706.03762.pdf&quot;&gt;https://arxiv.org/pdf/1706.03762.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google 的 Lamda、BERT，OpenAI 的 GPT-3 都是基于 Transformer 的。&lt;/p&gt;

&lt;p&gt;《Attention is all you need》是一篇颇具影响力的自然语言处理（NLP）论文，由 Google 在 2017 年发表。这篇论文提出了一种叫做 Transformer 的模型架构，这种模型架构不依赖于递归神经网络（RNN）或卷积神经网络（CNN）等传统的深度学习架构，而是使用了注意力机制（attention mechanism）和多头注意力（multi-head attention）来捕捉序列间的依赖关系。&lt;/p&gt;

&lt;p&gt;看到有人说「&lt;strong&gt;Transformer 基本宣告了 LSTM 在 NLP 领域的终结&lt;/strong&gt;」。Transformer 模型在 NLP 领域内获得了广泛的应用，并且因为其较好的并行化能力，在计算资源有限的情况下也能够获得较好的性能。Transformer 模型也被广泛应用于其他领域，如计算机视觉、音频处理等。&lt;/p&gt;

&lt;h4 id=&quot;2elmo-deep-contextualized-word-representations&quot;&gt;2、ELMo: Deep contextualized word representations&lt;/h4&gt;

&lt;p&gt;ELMo 是 Embeddings from Language Models 的缩写，刚好是《芝麻街》中一个角色的名字，是在 Peters 等人于 2018 年在 ACL（美国计算机学会计算语言学会议，NLP 领域顶级会议之一）上发表的论文《Deep contextualized word representations》中被提出来的。&lt;/p&gt;

&lt;p&gt;ELMo 是一种预训练模型，基于深度双向递归神经网络（biLSTM），可以用来生成词嵌入（word embeddings）。ELMo 使用了大量未标记的文本数据训练，并使用了多层双向递归神经网络来学习。&lt;/p&gt;

&lt;h4 id=&quot;3gpt-1improving-language-understanding-by-generative-pre-training&quot;&gt;3、GPT-1：Improving Language Understanding by Generative Pre-Training&lt;/h4&gt;

&lt;h4 id=&quot;4bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding2018&quot;&gt;4、BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding（2018）&lt;/h4&gt;

&lt;p&gt;BERT 模型是在一篇于 2018 年发表的叫做《BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding》的论文中被提出来的，BERT 是 Bidirectional Encoder Representations from Transformers 的缩写。我觉得这个名字有点硬凑出来的意思，BERT 也是《芝麻街》里一个角色的名字，我想就是为了跟 ELMo 凑一块儿怕它孤单吧。这篇论文带来的最大突破性变化有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在语言模型预训练中引入双向信息：传统的预训练语言模型（比如 word2vec、GloVe）通常只考虑了单向的信息（前面的词语）。BERT 模型则同时考虑了前后的词语，从而更好地捕捉句子的上下文信息。&lt;/li&gt;
  &lt;li&gt;在预训练中引入自监督学习任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 BERT，我这里写了一篇背景介绍、用例试跑、优劣势分析：&lt;a href=&quot;https://www.mikecaptain.com/2022/12/17/ai-bert-1/&quot;&gt;《你可能已经听说 GPT-3，但是你也不能不知道 BERT —— 跟我一起用 BERT 跑个小用例》&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;5gpt-2&quot;&gt;5、GPT-2：&lt;/h4&gt;

&lt;h4 id=&quot;6gpt-3-language-models-are-few-shot-learners2020&quot;&gt;6、GPT-3: Language Models are Few-Shot Learners（2020）&lt;/h4&gt;

&lt;p&gt;这篇来自 OpenAI 的论文，提出了「小样本学习（Few-Shot Learning，FSL）」的新训练方法，可以在小样本的情况下取得优秀的表现。&lt;/p&gt;

&lt;h4 id=&quot;7instructgpt&quot;&gt;7、InstructGPT&lt;/h4&gt;

&lt;h4 id=&quot;其他的重量级论文&quot;&gt;其他的重量级论文&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context（2019）&lt;/li&gt;
  &lt;li&gt;RoBERTa: A Robustly Optimized BERT Pretraining Approach（2019）&lt;/li&gt;
  &lt;li&gt;T5: Exploring the Limits of Transfer Learning witha Unified Text-to-Text Transformer（2020）&lt;/li&gt;
  &lt;li&gt;ViT: An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale（2021）&lt;/li&gt;
  &lt;li&gt;ERNIE-ViL: Vision and Language Pre-training for Image Captioning and VQA（2021）&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三行业里程碑&quot;&gt;三、行业里程碑&lt;/h3&gt;

&lt;p&gt;2017 年 8 月，Andrej Karpathy 在其 Twitter 上发文称「很遗憾，梯度下降（实现的 AI 模型）代码写得比你好」。同年 11 月 Andrej 在博客上表示，软件 2.0 将会区别于软件 1.0 时代，程序将由更抽象的、基于神经网络权重的程序语言编写。&lt;/p&gt;

&lt;p&gt;2018 年 OpenAI 推出了无监督的、基于强化学习的第一代 GPT。&lt;/p&gt;

&lt;p&gt;2019 年情人节，OpenAI 发布 GPT-2，当时被称为史上最强的「通用」自然语言处理模型，基于 Transformer，拥有 15 亿个参数，使用含有 800 万网页内容的数据集训练。&lt;/p&gt;

&lt;p&gt;2020 年 6 月，拥有 1750 亿个参数的 GPT-3 面世，这个模型的训练量是 GPT-2 的十倍不止，并开放了商业化 API 共使用，不到一年时间发展出约 300 家企业客户。&lt;/p&gt;

&lt;p&gt;2021 年 1月，Google 推出 Switch Transformer 模型，参数量 1.6 万亿，是人类首个万亿级参数的语言模型。&lt;/p&gt;

&lt;p&gt;2021 年 6 月，微软与 OpenAI 共同推出代码辅助生成 AI 工具 GitHub Copilot.&lt;/p&gt;

&lt;p&gt;2022 年 1 月，OpenAI 发布基于 GPT-3 微调的模型 InstructGPT（包括 text-davinci-001、text-davinci-002、text-davinci-003），微调主要来自于 RLHF（Reinforcement Learning via Human Feedback）。&lt;/p&gt;

&lt;p&gt;2022 年 5 月，杭州 AI 领域初创公司「感知阶跃（ZMO.ai）」宣布完成由高瓴资本领投、GGV Capital 和 GSR Ventures 跟投的 800 万美元 A 轮融资。&lt;/p&gt;

&lt;p&gt;2022 年 10 月 19 日，Jasper.ai 宣布完成由 Insight Partner 领投，Coatue、（BVP）Bessemer 以及 IVP 等机构跟投的 1.25 亿美元 A 轮融资，估值达到了 15 亿美元，Jasper AI 从产品上线至今仅 18 个月。&lt;/p&gt;

&lt;p&gt;2022 年 11 月底，OpenAI 推出基于 GPT-3.5 的 ChatGPT 对话系统，震惊全球。项目地址：https://chat.openai.com 。&lt;/p&gt;

&lt;p&gt;2022 年 12 月底，专注于各 AI 闭源项目的逆向工程的 Philip Wang 发布了 PaLM+RLHF 的文本生成开源模型，类似于 ChatGPT。该项目基于 Google 的大型语言模型 PaLM 和带有人类反馈的强化学习（RLHF），拥有 5400 亿个参数。项目地址：https://github.com/lucidrains/PaLM-rlhf-pytorch 。&lt;/p&gt;

&lt;h3 id=&quot;四成本&quot;&gt;四、成本&lt;/h3&gt;

&lt;p&gt;目前成本主要有三方面：大模型、大数据、大算力。这其中最昂贵的成本首先是算力。下面有几个数据可以作为参照：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2020 年的一项研究表明，开发一个只有 15 亿个参数的文本生成模型的费用高达 160 万美元。&lt;/li&gt;
  &lt;li&gt;2022 年 7 月，为了训练拥有 1760 亿个参数的开源模型 Bloom，Hugging Face 的研究人员耗时三个月，使用了 384 个英伟达 A100 GPU。&lt;/li&gt;
  &lt;li&gt;OpenAI 的文本生成 GPT-3（具有大约 1750 亿个参数）的运行成本约为每年 87,000 美元。&lt;/li&gt;
  &lt;li&gt;Hugging Face 训练 Bloom 花了三个月的时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;五业内应用&quot;&gt;五、业内应用&lt;/h3&gt;

&lt;p&gt;因为图片生成的容错率非常高，也就是在应用上的包容度更高，相比之下文本或语音的生成，是对结果容错非常低的，比如不容许事实错误、逻辑错误等等。这类的应用，我们能想到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;虚拟客服（可以乱真的）&lt;/li&gt;
  &lt;li&gt;智能助理：AI 家庭教师、AI 非诉律师、AI 医生助手、AI 新闻编辑、AI 设计助理&lt;/li&gt;
  &lt;li&gt;智能翻译&lt;/li&gt;
  &lt;li&gt;智能导购员：如果叠加虚拟人技术、语音合成技术，可以应用于电商&lt;/li&gt;
  &lt;li&gt;AI 广告公司：替代传统广告公司&lt;/li&gt;
  &lt;li&gt;AI 程序员助手：更高智能的辅助代码生成&lt;/li&gt;
  &lt;li&gt;部分场景下的美术工作者：游戏素材生成、海报生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以看到，AI 带来的这一波机会，都是曾经常说的「人不会被 AI 替代」的领域，也就是一些创作创意创新型工作，其中的中低端部分会因为成本因素而极力推动 AI 应用的发展。&lt;/p&gt;

&lt;p&gt;所以下面除了大家耳熟能详的 CV 领域的 AIGC 产品 Disco Diffusion、MidJourney、DALL·E 2、Stable Diffusion 之外，我们重点关注非图片生成类的应用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用于营销场景的 AI 写手与图像生成工具「&lt;strong&gt;Jasper.ai&lt;/strong&gt;」，常被用于生成互联网营销文案（比如用于 Instagram、Tik Tok、Facebook、博客、email、论坛帖子 等等）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-24-captain-nlp-7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2021 年 6 月，微软与 OpenAI 共同推出的的代码辅助生成 AI 工具「&lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt;」发布。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-24-captain-nlp-2.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文案神器「&lt;strong&gt;Copy.ai&lt;/strong&gt;」：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-24-captain-nlp-9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;虚拟客服「&lt;strong&gt;DialogFlow&lt;/strong&gt;」，能理解电话、语音内容等输入，并且给出文本或语音合成的输出。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-24-captain-nlp-8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2021 年年底，西湖心辰公司发布「&lt;a href=&quot;https://www.heyfriday.cn/&quot;&gt;Friday AI 智能协作系统&lt;/a&gt;」，并且目前也做了商业化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-24-captain-nlp-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;五行业内哪些人的言论值得我们日常重点关注&quot;&gt;五、行业内哪些人的言论值得我们日常重点关注&lt;/h3&gt;

&lt;p&gt;这些人的言论都值得我们关注：Sam Altman、Andrej Karpathy、Elon Musk。&lt;/p&gt;

&lt;p&gt;Andrej Karpathy 在其 Medium 博客上提到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们都熟悉的软件 1.0 的「经典堆栈」（The classical stack）是由 Python、C++ 等语言编写的，它由程序员编写的明确的计算机指令组成。通过编写每一行代码，程序员标识了程序空间中具有某些期望行为的特定点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;相比之下，软件 2.0 是用更抽象、不友好的人类语言（如神经网络的权重）编写的，没有人参与编写这些代码，因为权重数量很多（典型的网络可能有数百万个），并且直接用权重编写代码有一定困难（我尝试过）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过打那之后 Andrej 在其博客上就再未说过一句话。&lt;/p&gt;

&lt;p&gt;OpenAI 创始人兼 CEO Sam Altman 曾表示：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;十年前的传统观点认为，人工智能首先会影响体力劳动，然后是认知劳动，再然后，也许有一天可以做创造性工作。现在看起来，它会以相反的顺序进行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;通用人工智能的建成会比大多数人想象得更快，并且它会改变大多数人想象中的一切。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外还有一个喜欢写博客的 AI 从业者，其博客值得我们学习与了解，就是 OpenAI 应用人工智能研究负责人 Lilian Weng，主要从事机器学习、深度学习和网络科学研究。她本科毕业于香港大学，硕士就读于北京大学信息系统与计算机科学系，之后前往印度安纳大学布鲁顿分校攻读博士。&lt;/p&gt;

&lt;p&gt;她的 Blog：&lt;a href=&quot;https://lilianweng.github.io/&quot;&gt;https://lilianweng.github.io/&lt;/a&gt;
她的 Twitter：&lt;a href=&quot;https://twitter.com/lilianweng&quot;&gt;https://twitter.com/lilianweng&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;https://beta.openai.com/docs/models&lt;/li&gt;
  &lt;li&gt;https://karpathy.medium.com/software-2-0-a64152b37c35&lt;/li&gt;
  &lt;li&gt;https://hub.baai.ac.cn/view/21726&lt;/li&gt;
  &lt;li&gt;https://www.reddit.com/r/OpenAI/comments/zdrnsf/comment/iz3kfui/?context=3&lt;/li&gt;
  &lt;li&gt;https://www.sohu.com/a/615541698_121255906&lt;/li&gt;
  &lt;li&gt;http://blog.itpub.net/29829936/viewspace-2654536/&lt;/li&gt;
  &lt;li&gt;http://tech.sina.com.cn/csj/2018-10-13/doc-ihmhafir3634167.shtml&lt;/li&gt;
  &lt;li&gt;https://colab.research.google.com/github/alembics/disco-diffusion/blob/main/Disco_Diffusion.ipynb#scrollTo=DefMidasFns&lt;/li&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/BERT_(language_model)&lt;/li&gt;
  &lt;li&gt;https://www.mikecaptain.com/2022/12/17/ai-bert-1/&lt;/li&gt;
&lt;/ol&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="NLP" /><category term="自然语言处理" /><summary type="html">火出圈的 ChatGPT，背后是自然语言处理领域近几年发展的成果。本文从近几年自然语言处理的关键发展脉络，过程中关键的几篇学术论文，这几年的所有重要行业里程碑，以及目前为止业内已经诞生的应用。</summary></entry><entry><title type="html">你可能已经听说 GPT-3，但是你也不能不知道 BERT —— 跟我一起用 BERT 跑个小用例</title><link href="https://www.mikecaptain.com/2022/12/17/ai-bert-1/" rel="alternate" type="text/html" title="你可能已经听说 GPT-3，但是你也不能不知道 BERT —— 跟我一起用 BERT 跑个小用例" /><published>2022-12-17T15:08:01+00:00</published><updated>2022-12-17T15:08:01+00:00</updated><id>https://www.mikecaptain.com/2022/12/17/ai-bert-1</id><content type="html" xml:base="https://www.mikecaptain.com/2022/12/17/ai-bert-1/">&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一关于-bert-的一些背景&quot; id=&quot;markdown-toc-一关于-bert-的一些背景&quot;&gt;一、关于 BERT 的一些背景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二开始一个-bert-的动手小试验&quot; id=&quot;markdown-toc-二开始一个-bert-的动手小试验&quot;&gt;二、开始一个 BERT 的动手小试验&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1安装-anaconda-来为部署-bert-做环境准备&quot; id=&quot;markdown-toc-1安装-anaconda-来为部署-bert-做环境准备&quot;&gt;1、安装 Anaconda 来为部署 BERT 做环境准备&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2安装-bert-所需要的各种依赖&quot; id=&quot;markdown-toc-2安装-bert-所需要的各种依赖&quot;&gt;2、安装 BERT 所需要的各种依赖&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3下载一个预训练pre-train过的-bert-模型&quot; id=&quot;markdown-toc-3下载一个预训练pre-train过的-bert-模型&quot;&gt;3、下载一个预训练（Pre-Train）过的 BERT 模型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5启动-bert-服务端&quot; id=&quot;markdown-toc-5启动-bert-服务端&quot;&gt;5、启动 BERT 服务端&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6在-pycharm-中使用-conda-的环境&quot; id=&quot;markdown-toc-6在-pycharm-中使用-conda-的环境&quot;&gt;6、在 PyCharm 中使用 Conda 的环境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7编写程序实现-bert-客户端&quot; id=&quot;markdown-toc-7编写程序实现-bert-客户端&quot;&gt;7、编写程序实现 BERT 客户端&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三bert-模型的优劣势及其原因&quot; id=&quot;markdown-toc-三bert-模型的优劣势及其原因&quot;&gt;三、BERT 模型的优劣势及其原因&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1bert-的优势是很明显的&quot; id=&quot;markdown-toc-1bert-的优势是很明显的&quot;&gt;1、BERT 的优势是很明显的&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#11mlm-和-nsp-预训练能够捕捉到自然语言中的各种复杂细节&quot; id=&quot;markdown-toc-11mlm-和-nsp-预训练能够捕捉到自然语言中的各种复杂细节&quot;&gt;1.1、MLM 和 NSP 预训练能够捕捉到自然语言中的各种复杂细节&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#12识别并专注于较重要的部分进行文本处理&quot; id=&quot;markdown-toc-12识别并专注于较重要的部分进行文本处理&quot;&gt;1.2、识别并专注于较重要的部分进行文本处理&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#13快速构建针对具体任务的-nlp-系统&quot; id=&quot;markdown-toc-13快速构建针对具体任务的-nlp-系统&quot;&gt;1.3、快速构建针对具体任务的 NLP 系统&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2bert-模型的劣势及其原因&quot; id=&quot;markdown-toc-2bert-模型的劣势及其原因&quot;&gt;2、BERT 模型的劣势及其原因&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#21随机挖-mask-的完形填空题是有隐患的&quot; id=&quot;markdown-toc-21随机挖-mask-的完形填空题是有隐患的&quot;&gt;2.1、随机挖 MASK 的完形填空题是有隐患的&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#22nsp-任务有必要吗&quot; id=&quot;markdown-toc-22nsp-任务有必要吗&quot;&gt;2.2、NSP 任务有必要吗？&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#23针对两个或以上词组成的连续词的词义被丢失&quot; id=&quot;markdown-toc-23针对两个或以上词组成的连续词的词义被丢失&quot;&gt;2.3、针对两个或以上词组成的连续词的词义被丢失&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#24需要的算力高&quot; id=&quot;markdown-toc-24需要的算力高&quot;&gt;2.4、需要的算力高&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#25需要的模型大&quot; id=&quot;markdown-toc-25需要的模型大&quot;&gt;2.5、需要的模型大&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四一些关于-bert-的问题&quot; id=&quot;markdown-toc-四一些关于-bert-的问题&quot;&gt;四、一些关于 BERT 的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1bert-模型的所谓双向与-bilstm-的双向是啥区别&quot; id=&quot;markdown-toc-1bert-模型的所谓双向与-bilstm-的双向是啥区别&quot;&gt;1、BERT 模型的所谓「双向」与 BiLSTM 的「双向」是啥区别？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2为什么-bert-可以比-rnn-更好地并行化&quot; id=&quot;markdown-toc-2为什么-bert-可以比-rnn-更好地并行化&quot;&gt;2、为什么 BERT 可以比 RNN 更好地并行化&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一关于-bert-的一些背景&quot;&gt;一、关于 BERT 的一些背景&lt;/h3&gt;

&lt;p&gt;2018 年 Google 发布 BERT 后迅速在 NLP 领域引起广泛关注。BERT（Bidirectional Encoder Representations from Transformers）是一种自然语言处理（NLP）的深度学习模型，它可以进行语言模型预测、序列标注和问答等任务。BERT 采用双向的 Transformer 编码器架构，使用了大量的数据和计算资源进行训练，因此具有较强的泛化能力。&lt;/p&gt;

&lt;p&gt;BERT 的训练方法是通过让模型对给定的输入文本进行自监督学习，即使用未标记的语料进行训练。BERT 可以在很多 NLP 任务中获得较好的性能，并且由于其双向的编码方式，能够更好地理解语境信息。&lt;/p&gt;

&lt;p&gt;BERT 的训练需要大量的计算资源，因此它常常被用来作为解决 NLP 问题的预训练模型，可以用来初始化其他模型的权重，使得这些模型能够更快速地收敛。&lt;/p&gt;

&lt;h3 id=&quot;二开始一个-bert-的动手小试验&quot;&gt;二、开始一个 BERT 的动手小试验&lt;/h3&gt;

&lt;p&gt;为了让 conda 使用 Python 3.7，你可以按照这些步骤来操作。&lt;/p&gt;

&lt;h4 id=&quot;1安装-anaconda-来为部署-bert-做环境准备&quot;&gt;1、安装 Anaconda 来为部署 BERT 做环境准备&lt;/h4&gt;

&lt;p&gt;先了解几个概念：Anaconda 是一个软件包管理系统，其中包含了 conda 和许多其他的工具。Conda 是 Anaconda 中的一个组件，用于安装和管理软件包。
我们需要用 conda 创建一个环境，在这个环境里去启用我们想要使用的 BERT 所需要的各种依赖。&lt;/p&gt;

&lt;p&gt;更新 conda 到最新版本：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda update &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; base conda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 Python 3.7 创建一个新的环境：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; py37 &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;激活这个新环境：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate py37
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;验证正在使用的是正确版本的 Python&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外你可能还会用到的 conda 命令有：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 你之后一定会需要 deactivate 一个环境，命令如下：&lt;/span&gt;
conda deactivate py37

&lt;span class=&quot;c&quot;&gt;# 查看 conda 当前安装的所有库&lt;/span&gt;
conda list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2安装-bert-所需要的各种依赖&quot;&gt;2、安装 BERT 所需要的各种依赖&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tensorflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.14.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;验证 tensorflow 是否安装正确：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__version__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3下载一个预训练pre-train过的-bert-模型&quot;&gt;3、下载一个预训练（Pre-Train）过的 BERT 模型&lt;/h4&gt;

&lt;p&gt;官方的模型在这里浏览：https://github.com/google-research/bert#pre-trained-models&lt;/p&gt;

&lt;p&gt;也有一些中文的模型，以下是 ChatGPT 推荐的三个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BERT-Base, Chinese：这是 Google 官方提供的中文 BERT 模型，在中文 NLP 任务中表现良好。你可以从 这里下载这个模型。&lt;/li&gt;
  &lt;li&gt;ERNIE：这是由中科院自然语言所提供的中文 BERT 模型，包含了额外的语义信息。你可以从 这里下载这个模型。&lt;/li&gt;
  &lt;li&gt;RoBERTa-wwm-ext：这是由清华大学自然语言处理实验室提供的中文 BERT 模型，在多种中文 NLP 任务中表现良好。你可以从 这里下载这个模型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4、安装 BERT 的服务端和客户端&lt;/p&gt;

&lt;p&gt;这里我们使用 bert-as-service，bert-as-service 是一种将 BERT 模型部署为服务的方式。该工具使用 TensorFlow Serving 来运行 BERT 模型，并允许通过 REST API 进行调用。根据 bert-as-service 的文档，它已经在 TensorFlow 1.14.0 上测试过。&lt;/p&gt;

&lt;p&gt;在你激活的环境里，安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bert-as-service&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装服务端和客户端&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 更多关于 bert-serving-server 的信息可以参考：https://bert-serving.readthedocs.io/en/latest/index.html&lt;/span&gt;
conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bert-serving-server bert-serving-client 
验证 bert-as-service 是否安装成功
bert-serving-start &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5启动-bert-服务端&quot;&gt;5、启动 BERT 服务端&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 命令行下启动BERT服务&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -num_worker 表示启动几个worker服务，即可以处理几个并发请求，超过这个数字的请求将会在LBS（负载均衡器）中排队等待&lt;/span&gt;
bert-serving-start &lt;span class=&quot;nt&quot;&gt;-model_dir&lt;/span&gt; /模型/的/绝对/路径 &lt;span class=&quot;nt&quot;&gt;-num_worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;6在-pycharm-中使用-conda-的环境&quot;&gt;6、在 PyCharm 中使用 Conda 的环境&lt;/h4&gt;

&lt;p&gt;在 PyCharm 中启用 Interpreter 为 Anaconda，macOS 上具体地是在「Preference - Project - Python Interpreter - Add Interpreter - Add Local Interpreter - Conda Environment」。&lt;/p&gt;

&lt;p&gt;接下来还有一项重要的步骤就是选择该 project 要加载包文件的路径。如果不进行这一步，那该 project 还是从系统环境变量中的路径来搜索你要加载的包，这样在你用 Anaconda 新建的这个环境中所特有的包就会出现无法加载的问题。单击菜单栏 Run 选择 Edit Configuration。在Environment variables中添加一个新的 Path。新的路径为你用 Anaconda 新建的环境的文件夹中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;「/Users/captain/opt/anaconda3/bin/python」&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;配置 PyCharm 这里参考：https://docs.anaconda.com/anaconda/user-guide/tasks/pycharm/&lt;/p&gt;

&lt;h4 id=&quot;7编写程序实现-bert-客户端&quot;&gt;7、编写程序实现 BERT 客户端&lt;/h4&gt;

&lt;p&gt;这里有一些客户端例子可以参考：https://blog.csdn.net/qq_18256855/article/details/123860126&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bert_serving.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BertClient&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义类
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BertModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bert_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BertClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;127.0.0.1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port_out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5556&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 创建客户端对象
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# 注意：可以参考API，查看其它参数的设置
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# 127.0.0.1 表示本机IP，也可以用localhost
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cannot create BertClient&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close_bert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bert_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 关闭服务
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sentence_embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;对输入文本进行embedding
          Args:
            text: str, 输入文本
          Returns:
            text_vector: float, 返回一个列表，包含text的embedding编码值
        &apos;&apos;&apos;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text_vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bert_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_vector&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 获取输出结果
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;caculate_similarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;&apos;&apos;根据两个语句的vector，计算它们的相似性
          Args:
            vec_1: float, 语句1的vector
            vec_2: float, 语句2的vector
          Returns:
            sim_value: float, 返回相似性的计算值
        &apos;&apos;&apos;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 根据cosine的计算公式
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cosine&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 创建bert对象
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;bert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BertModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# --- 输入语句 ----
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;input_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;请输入语句1: &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close_bert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 关闭服务
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;input_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;请输入语句2: &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# --- 对输入语句进行embedding ---
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a_vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence_embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;a_vec shape : &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;b_vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentence_embedding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;b_vec shape : &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 计算两个语句的相似性
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caculate_similarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;cosine value : &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 如果相似性值大于0.85，则输出相似，否则，输出不同
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2个语句的含义相似&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;不相似&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bert-serving-client&lt;/code&gt; 连接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bert-serving-server&lt;/code&gt; 时，你需要确保 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bert-serving-server&lt;/code&gt; 使用的模型和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bert-serving-client&lt;/code&gt; 使用的模型是匹配的，否则会出现错误。&lt;/p&gt;

&lt;p&gt;程序正常运行后，将要求你输入两句话，然后 BERT 计算两句话的相似性。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;请输入语句1: 
请输入语句2: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;两句输入好确认后，得到如下形式的结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a_vec shape :  (768,)
b_vec shape :  (768,)
cosine value :  0.8691698561422959
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实这个小试验蛮没意思的，而且准确性也比较令人质疑。&lt;/p&gt;

&lt;h3 id=&quot;三bert-模型的优劣势及其原因&quot;&gt;三、BERT 模型的优劣势及其原因&lt;/h3&gt;

&lt;p&gt;论文地址：&lt;a href=&quot;https://arxiv.org/abs/1810.04805&quot;&gt;《BERT: Pre-Training of Deep Bidirectional Transformers for Language Understanding》&lt;/a&gt; 。&lt;/p&gt;

&lt;h4 id=&quot;1bert-的优势是很明显的&quot;&gt;1、BERT 的优势是很明显的&lt;/h4&gt;

&lt;p&gt;复旦大学的邱锡鹏教授层评价 BERT 的「里程碑意义」在于：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;证明了一个非常深的模型可以显著提高 NLP 任务的准确率，而这个模型可以从无标记数据集中预训练得到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;11mlm-和-nsp-预训练能够捕捉到自然语言中的各种复杂细节&quot;&gt;1.1、MLM 和 NSP 预训练能够捕捉到自然语言中的各种复杂细节&lt;/h5&gt;

&lt;p&gt;因为 BERT 采用了双向的自注意力机制，这里的「双向」意味着 BERT 模型可以同时利用输入文本的前后文信息来预测下一个词是什么、下一句是什么。这样 BERT 模型就可以捕捉到自然语言中的各种隐藏的细节，比如语义关系、语法结构、语义暗示等等。&lt;/p&gt;

&lt;p&gt;具体地，BERT 采用了 Masked Language Model（MLM）来做「下一个词是什么」的预训练，采用了 Next Sentence Prediction（NSP）来做「下一句是什么」的预训练。MLM 的方式其实就很像英语考试里的「完形填空」，而 NSP 的方式，就像整句的完形填空。&lt;/p&gt;

&lt;h5 id=&quot;12识别并专注于较重要的部分进行文本处理&quot;&gt;1.2、识别并专注于较重要的部分进行文本处理&lt;/h5&gt;

&lt;p&gt;这要得益于因为 BERT 采用了自注意力机制。自注意力机制，通过计算输入单元的权重值，来确定在一个输入序列中哪些输入单元是重要的。具体地，一个输入单元与其他单元的相似性越高，按照我们自然语言的逻辑，那么这部分是在被重复、强调、翻来覆去用不同的方式在解释，那么这部分就是重要的，权重值就更高。&lt;/p&gt;

&lt;h5 id=&quot;13快速构建针对具体任务的-nlp-系统&quot;&gt;1.3、快速构建针对具体任务的 NLP 系统&lt;/h5&gt;

&lt;p&gt;因为 BERT 采用了预训练模型，能够在没有监督标注数据的情况下从大量文本中学习语言模型。因为我们认为上下文信息本身就能推测出某个词，所以大量的文本数据本身就是一种「自带标注」的数据，所以 BERT 能够无监督学习。&lt;/p&gt;

&lt;h4 id=&quot;2bert-模型的劣势及其原因&quot;&gt;2、BERT 模型的劣势及其原因&lt;/h4&gt;

&lt;h5 id=&quot;21随机挖-mask-的完形填空题是有隐患的&quot;&gt;2.1、随机挖 MASK 的完形填空题是有隐患的&lt;/h5&gt;

&lt;p&gt;对于上面提到的 MLM、NSP 方法做预训练，那么问题也就显而易见了，如果我们挖掉的一组 MASK 完形填空词，是强关联的（非条件独立），那么这一组词的预测就都会出现问题。&lt;/p&gt;

&lt;h5 id=&quot;22nsp-任务有必要吗&quot;&gt;2.2、NSP 任务有必要吗？&lt;/h5&gt;

&lt;p&gt;论文《Crosslingual language model pretraining》中提到 BERT 的 NSP 可能是非必要的，针对这个问题，后续出现的模型都移除了 NSP 任务，比如 RoBERTa、spanBERT、ALBERT。&lt;/p&gt;

&lt;h5 id=&quot;23针对两个或以上词组成的连续词的词义被丢失&quot;&gt;2.3、针对两个或以上词组成的连续词的词义被丢失&lt;/h5&gt;

&lt;p&gt;比如 cutting-edge，MLM 的方式可能会割裂这两个子词的相关性，导致模型丢失这个词的词义，针对这个问题 Google 后来发表了 BERT-WWM，WWM 即 Whole Word Masking，从字面就能理解针对的问题。哈尔滨工业大学的科大讯飞联合实验室后来推出了 Chinese-BERT-WWM 专门针对中文解决了这个问题。&lt;/p&gt;

&lt;h5 id=&quot;24需要的算力高&quot;&gt;2.4、需要的算力高&lt;/h5&gt;

&lt;p&gt;算力高，自然需要的计算成本运行更高。不过算力成本高这种问题总有办法优化，通常来说不是模型本身所处理问题的局限性和先决条件的局限性（比如依赖大量人工工作）就非常好了。&lt;/p&gt;

&lt;h5 id=&quot;25需要的模型大&quot;&gt;2.5、需要的模型大&lt;/h5&gt;

&lt;p&gt;模型大，自然存储成本也就高了。这也类似于上一点，而且算力、存储成本高，可以在大型应用中把成本均摊下来，比如 BERT 如果支持的某个 AGI 应用得到广泛普及。&lt;/p&gt;

&lt;h3 id=&quot;四一些关于-bert-的问题&quot;&gt;四、一些关于 BERT 的问题&lt;/h3&gt;

&lt;h4 id=&quot;1bert-模型的所谓双向与-bilstm-的双向是啥区别&quot;&gt;1、BERT 模型的所谓「双向」与 BiLSTM 的「双向」是啥区别？&lt;/h4&gt;

&lt;p&gt;BiLSTM 是把句子再倒序一遍，而 BERT 的双向是指在 Encoder 的自注意力机制下编码一个 token 时「同时利用上下文」的 token。&lt;/p&gt;

&lt;h4 id=&quot;2为什么-bert-可以比-rnn-更好地并行化&quot;&gt;2、为什么 BERT 可以比 RNN 更好地并行化&lt;/h4&gt;

&lt;p&gt;RNN 因为有时序概念，即后面的特征计算，依赖于前面计算的结果，所以就形成了循环（Recurrent）。而 BERT 采用了自注意力机制则没有时序概念，每个词特征都依赖其上下文独立计算，因此更容易并行化。&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;https://arxiv.org/abs/1810.04805&lt;/li&gt;
  &lt;li&gt;https://github.com/google-research/bert&lt;/li&gt;
  &lt;li&gt;https://github.com/ymcui/Chinese-BERT-wwm&lt;/li&gt;
  &lt;li&gt;https://zhuanlan.zhihu.com/p/195723105&lt;/li&gt;
  &lt;li&gt;https://www.jiqizhixin.com/articles/2018-10-24-13&lt;/li&gt;
&lt;/ol&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="BERT" /><category term="AI" /><category term="人工智能" /><summary type="html">2018 年 Google 发布了 BERT 模型后迅速席卷 NLP 领域，这家伙可是比 ChatGPT 背后的 GPT 还要早的。本文简单介绍了 BERT 后主要是希望大家都手试一下，所以文中提到了一个小的中文模型供大家练手，以及一个小用例。</summary></entry><entry><title type="html">动动手，让你和你的朋友们，在微信上跟 ChatGPT 聊聊天</title><link href="https://www.mikecaptain.com/2022/12/11/wechat-chatgpt/" rel="alternate" type="text/html" title="动动手，让你和你的朋友们，在微信上跟 ChatGPT 聊聊天" /><published>2022-12-11T15:59:57+00:00</published><updated>2022-12-11T15:59:57+00:00</updated><id>https://www.mikecaptain.com/2022/12/11/wechat-chatgpt</id><content type="html" xml:base="https://www.mikecaptain.com/2022/12/11/wechat-chatgpt/">&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-11-wechat-chatgpt-3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;写在前面&quot;&gt;写在前面&lt;/h3&gt;
&lt;p&gt;最近 OpenAI 的 ChatGPT 非常地出圈，ChatGPT 是一个由 OpenAI 训练的大型语言模型，被设计用来回答用户的问题并提供信息。官方的 Slogan 是 &lt;strong&gt;「Optimizing Language Models for Dialogue」&lt;/strong&gt;，所以非常适合做到 IM 里聊天。那么我在想如果用一个微信号，背后是 ChatGPT，是不是很有趣？正当我准备利用 WeChaty 开发一个服务端程序来连接 ChatGPT 时，发现目前 Github 上已经有人做了，刚好可以省去很多工程的工作。&lt;/p&gt;

&lt;h3 id=&quot;stepbystep&quot;&gt;Step by step&lt;/h3&gt;

&lt;p&gt;本实践依赖：CLI、Docker、npm、Github、fuergaosi233/wechat-chatgpt、git、YAML、Chrome 的使用。以下将简洁地 Step by step 列出步骤。&lt;/p&gt;

&lt;p&gt;第一步，你要现有一个 OpenAI 的账号，注意注册时手机号不能是中国大陆或香港的，IP 地址和 GPS 也不能暴露你是中国大陆或者香港的。&lt;/p&gt;

&lt;p&gt;第二步，准备一台服务器（否则个人电脑要一直处于开机运行状态），由于后面将用到 Session Token 来登录，因此 IP 地址是香港也没关系，于是我是在我的香港服务器上部署 wechat-chatgpt&lt;/p&gt;

&lt;p&gt;第三步，在服务器上安装 Docker，不赘述。&lt;/p&gt;

&lt;p&gt;第四步，从 Github 上拉取项目项目到服务器上。&lt;/p&gt;

&lt;p&gt;第五步，任何设备上登录 ChatGPT，用 Chrome 的 Inspect 来查看并复制 session token 到剪贴板。&lt;/p&gt;

&lt;p&gt;第六步，编辑 wechat-chatgpt 的 config.yaml，填写 session token；设置 private trigger keywords（可选）。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;chatGPTAccountPool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your email&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# if you hope only some keywords can trigger chatgpt on private chat, you can set it like this:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;chatPrivateTiggerKeyword&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第七步，用 docker 来拉取 wechat-chatgpt&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull holegots/wechat-chatgpt:latest。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第八步，启动 wechat-chatgpt：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wechat-chatgpt &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/config.yaml:/app/config.yaml holegots/wechat-chatgpt:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，如果手动模式下也可以用npm run dev启动。如果提示系统不认识 npm 则可以运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install &amp;amp;&amp;amp; poetry install&lt;/code&gt; 来解决。到此你就可以在微信上跟这个打通了 ChatGPT 的账号聊天了。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2022-12-11-wechat-chatgpt-1.png&quot; alt=&quot;image&quot; style=&quot;width:100%&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2022-12-11-wechat-chatgpt-2.png&quot; alt=&quot;image&quot; style=&quot;width:100%&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其实可以看到这个 AI 船长不管是专业性问题（计算机相关）还是非专业问题，都回答的很不错。&lt;/p&gt;

&lt;p&gt;如何停止、重启、查看日志呢？首先停止的命令是docker stop wechat-chatgpt，登录时需要扫码登录微信并追踪 logs，因为这其实是用了微信在桌面端的接口。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; wechat-chatgpt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会在 Terminal 里显示一个文字阵列组成的桌面端微信登录二维码，用你打算做成微信 AI 机器人那个微信号扫一下，相关信息都填完。另外，这样最好别用自己的微信大号，而是用一个小号。微信不让聊这些，小号注意要完成实名认证。&lt;/p&gt;

&lt;p&gt;如果要停止运行，用如下命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop wechat-chatgpt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;p&gt;1、&lt;a href=&quot;https://github.com/fuergaosi233/wechat-chatgpt/tree/main&quot;&gt;https://github.com/fuergaosi233/wechat-chatgpt/tree/main&lt;/a&gt;&lt;/p&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="人工智能" /><category term="AI" /><category term="ChatGPT" /><category term="OpenAI" /><category term="微信" /><summary type="html">最近 OpenAI 的 ChatGPT 非常地出圈，ChatGPT 是一个由 OpenAI 训练的大型语言模型，被设计用来回答用户的问题并提供信息。官方的 Slogan 是「Optimizing Language Models for Dialogue」，所以非常适合做到 IM 里聊天。那么我在想如果用一个微信号，背后是 ChatGPT，是不是很有趣？正当我准备利用 WeChaty 开发一个服务端程序来连接 ChatGPT 时，发现目前 Github 上已经有人做了，刚好可以省去很多工程的工作 ……</summary></entry><entry><title type="html">确实惊艳！用 MidJourney 三分钟生成了两张 CG 级高清机甲特写</title><link href="https://www.mikecaptain.com/2022/11/30/midjourney-first-test/" rel="alternate" type="text/html" title="确实惊艳！用 MidJourney 三分钟生成了两张 CG 级高清机甲特写" /><published>2022-11-30T15:12:03+00:00</published><updated>2022-11-30T15:12:03+00:00</updated><id>https://www.mikecaptain.com/2022/11/30/midjourney-first-test</id><content type="html" xml:base="https://www.mikecaptain.com/2022/11/30/midjourney-first-test/">&lt;p&gt;因为 Diffusion 模型在计算机视觉领域的发展，最近文生图（Text2Image）很火，花了三分钟时间用 MidJourney 做了一组机甲图，确实非常惊艳，直接看图：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2022-12-16-midjourney-first-test-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;/img/src/2022-12-16-midjourney-first-test-2.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;今年人工智能在 CV 领域的发展非常的精彩，目前市面上看到的主要应用，都是这种松散式的、对结果容错率很高图像生成，基于一段 prompt 生成一张或一组图片，甚至已经有了 avatarai.me 这种帮你打造全套的 photorealistic 层次质感的全套图片和视频商业化产品。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2022-12-16-midjourney-first-test-3.png&quot; alt=&quot;image&quot; /&gt;
（&lt;em&gt;注：MidJourney 官网&lt;/em&gt;）&lt;/p&gt;

&lt;p&gt;未来很快，我们将看到一些更精准满足图像生成需求的应用出现，比如生成游戏素材（其实现在已经有了，比如 Scenario.gg）、AI 替身生成等等。&lt;/p&gt;

&lt;p&gt;相应的，对抗性的防御技术也会很快发展。&lt;/p&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="diffusion" /><category term="MidJourney" /><category term="Text2Image" /><category term="文生图" /><category term="AIGC" /><summary type="html">因为 Diffusion 模型在计算机视觉领域的发展，可以说今年人工智能在计算机视觉领域大放异彩，各种 Text2Image 项目层出不穷，花了三分钟时间做了一组机甲图，确实非常惊艳 ……</summary></entry></feed>
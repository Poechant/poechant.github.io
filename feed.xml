<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://www.mikecaptain.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.mikecaptain.com/" rel="alternate" type="text/html" /><updated>2025-08-06T15:16:31+08:00</updated><id>https://www.mikecaptain.com/feed.xml</id><title type="html">麦克船长的技术、产品与商业博客</title><subtitle>麦克船长对于技术、产品、商业等领域的分享|AI,A.I.,NLP,神经网络,人工智能,自然语言处理,BERT,GPT,ChatGPT,OpenAI,阿里巴巴,P9,运营,淘宝,天猫,总监,高管</subtitle><author><name>Poechant</name><email>zhongchao.ustc@gmail.com</email></author><entry><title type="html">从生成影像到「生成世界」—— Google DeepMind Genie 3 打开世界模型的交互时代</title><link href="https://www.mikecaptain.com/2025/08/06/genie-3/" rel="alternate" type="text/html" title="从生成影像到「生成世界」—— Google DeepMind Genie 3 打开世界模型的交互时代" /><published>2025-08-06T08:01:13+08:00</published><updated>2025-08-06T08:01:13+08:00</updated><id>https://www.mikecaptain.com/2025/08/06/genie-3</id><content type="html" xml:base="https://www.mikecaptain.com/2025/08/06/genie-3/">&lt;p&gt;&lt;img src=&quot;/resources/2025/08/06/89bbafe0-3df1-473e-90e4-f3668c4e205f.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Google DeepMind 于北京时间 2025 年 8 月 6 日凌晨正式推出了其新一代通用世界模型 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt;，该模型能够基于文本提示实时生成交互式虚拟环境，并以每秒 24 帧、720p 分辨率的速度保持数分钟的一致性和高保真度。作为世界模型研究的最新里程碑，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 不仅在生成环境的一致性和逼真度上大幅提升，更首次支持了实时人机交互，为通向通用人工智能（AGI）奠定了坚实基础。&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
	&lt;video width=&quot;720&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/resources/video/ChatGPT-XMind.jpg&quot;&gt;
  		&lt;source src=&quot;/resources/video/ChatGPT-XMind.mp4&quot; type=&quot;video/mp4&quot; /&gt;你的浏览器不支持视频标签。
	&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&quot;背景世界模型的发展&quot;&gt;背景：世界模型的发展&lt;/h2&gt;

&lt;p&gt;在过去十多年中，DeepMind 在模拟环境研究领域持续发力，从训练智能体在实时战略游戏（RTS）中制胜，到为开放式学习和机器人控制构建高保真模拟环境，世界模型始终是关键技术路径之一。世界模型让 AI 能够在虚拟场景里预测环境演化及其对智能体行动的反馈，从而实现无界限的训练课程与更高效的策略优化，这对于 AGI 的长期发展至关重要。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/resources/2025/08/06/3eef6978-e7b7-4bdb-9d8d-13fa7cfccb6c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 可以在更长的地平线上产生具有一致性且可互动的世界，如下是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 2&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 的对比。&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
	&lt;video width=&quot;720&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/resources/video/ChatGPT-XMind.jpg&quot;&gt;
  		&lt;source src=&quot;/resources/video/ChatGPT-XMind.mp4&quot; type=&quot;video/mp4&quot; /&gt;你的浏览器不支持视频标签。
	&lt;/video&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
	&lt;video width=&quot;720&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/resources/video/ChatGPT-XMind.jpg&quot;&gt;
  		&lt;source src=&quot;/resources/video/ChatGPT-XMind.mp4&quot; type=&quot;video/mp4&quot; /&gt;你的浏览器不支持视频标签。
	&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;2024 年，DeepMind 相继发布了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 1&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 2&lt;/code&gt; 两代基础世界模型，能够自动生成全新场景供智能体探索，推动了智能体在逼真模拟中的自我强化学习；与此同时，DeepMind 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Veo&lt;/code&gt; 系列视频生成模型（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Veo 2&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Veo 3&lt;/code&gt;）也在物理直觉和场景连贯性方面取得了突破，为模拟环境的可视化奠定了坚实基础。&lt;/p&gt;

&lt;h2 id=&quot;genie-3-的核心能力&quot;&gt;Genie 3 的核心能力&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;实时交互&lt;/strong&gt;：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 是首个支持用户与生成环境实时交互的世界模型，用户可在 24 FPS、720p 分辨率的场景中自由移动与观察，模型在多分钟尺度上保持场景一致性和实时响应。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;物理属性建模&lt;/strong&gt;：模型充分学习并再现了诸如流动水体、光照变化及复杂地形交互等物理现象，使得生成的环境不仅视觉逼真，还能呈现自然规律下的动态变化。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;多样化生态&lt;/strong&gt;：从火山熔岩地带到海岸飓风场景，乃至冰川湖泊与热带雨林，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 能生成多种自然生态系统，植被、动物行为与气象条件都展现出极高的细节还原度。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;动画与虚构场景&lt;/strong&gt;：除现实世界模拟外，模型同样擅长创造奇幻动画场景与角色，如在想象中的森林中操控萤火虫，或在彩虹桥上追逐可爱生物，充分激发创意潜能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实验演示与应用场景&quot;&gt;实验演示与应用场景&lt;/h2&gt;

&lt;p&gt;DeepMind 官方展示了一系列实时交互演示视频，包括在火山地形中驾驶机器人、暴风雨中沿海公路行走、深海水下拍摄、森林徒步与瀑布观光等多种复杂场景，这些演示凸显了模型在不同环境下的鲁棒性和互操作性。此外，团队还演示了生成幻想风格的 3D 生物、日式禅院花园及神秘森林等虚构世界，表明 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 在游戏开发、影视特效和虚拟现实（VR/AR）应用领域具有巨大潜力。在本文开头的视频里，我们能看到如下各种交互方式下的高保真生成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;世界物理特性建模&lt;/li&gt;
  &lt;li&gt;自然世界模拟&lt;/li&gt;
  &lt;li&gt;动画和虚构内容建模&lt;/li&gt;
  &lt;li&gt;地理与历史探索&lt;/li&gt;
  &lt;li&gt;实时能力的前沿拓展&lt;/li&gt;
  &lt;li&gt;长时互动情况下的环境一致性&lt;/li&gt;
  &lt;li&gt;即时生效的世界事件&lt;/li&gt;
  &lt;li&gt;助力具身智能研究（仿真）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/resources/2025/08/06/3eef6978-e7b7-4bdb-9d8d-13fa7cfccb6c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;应用前景与行业影响&quot;&gt;应用前景与行业影响&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 的发布或将引领智能仿真与数字孪生技术的新潮流，为以下领域带来深远影响：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;游戏与娱乐&lt;/strong&gt;：实时生成可交互的开放世界，降低关卡设计成本，加速游戏原型迭代。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;机器人训练&lt;/strong&gt;：通过高度逼真的模拟环境，无需昂贵硬件即可训练并验证机器人控制策略。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;虚拟现实&lt;/strong&gt;：在 VR/AR 场景中提供更丰富多变的内容，提升用户沉浸式体验。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;科研模拟&lt;/strong&gt;：用于环境科学、灾害预测与可视化实验，加速跨学科研究进程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安全考量及未来展望&quot;&gt;安全考量及未来展望&lt;/h2&gt;

&lt;p&gt;DeepMind 同时公布了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 的已知局限和安全与道德考量，包括对特定物理现象的细节还原仍有提升空间，以及可能出现的偏差或不一致场景；团队强调需要持续开展公平性评估、风险监控与滥用防范工作，以保障技术安全可靠地惠及各行各业。&lt;/p&gt;

&lt;p&gt;展望未来，DeepMind 计划将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 与更大规模的智能体训练管道相结合，探索基于世界模型的无限课程学习，并进一步提升模型对复杂物理规则的理解与推演能力。此外，与多模态系统（如语言、视觉和动作一体化模型）的深度融合，也将是下一步研究重点，以加速 AGI 时代的到来。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;作为世界模型研究的新前沿，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 在实时交互、多样化场景与物理一致性方面取得了突破性进展，为 AI 在仿真、训练与创意生成等领域开启了新篇章。未来，随着模型能力的不断增强与安全责任的持续完善，基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Genie 3&lt;/code&gt; 的智能仿真生态有望为科研、工业和娱乐带来全新机遇。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://deepmind.google/discover/blog/genie-3-a-new-frontier-for-world-models/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://deepmind.google/discover/blog/genie-2-a-large-scale-foundation-world-model/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://deepmind.google/research/publications/60474/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.youtube.com/watch?v=PDKhUknuQDg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="AI" /><category term="人工智能" /><category term="AGI" /><category term="Agent" /><category term="大模型" /><category term="Google" /><category term="DeepMind" /><category term="Genie 3" /><category term="Genie-3" /><category term="Genie" /><category term="Google AI" /><category term="多模态" /><category term="视频生成" /><category term="世界模型" /><category term="world model" /><category term="交互" /><category term="基础模型" /><category term="模型" /><summary type="html"></summary></entry><entry><title type="html">趋势量化之 Event-Driven 1：上市公司发行可转债有什么影响（持续更新）</title><link href="https://www.mikecaptain.com/2023/09/19/cb-impact/" rel="alternate" type="text/html" title="趋势量化之 Event-Driven 1：上市公司发行可转债有什么影响（持续更新）" /><published>2023-09-19T08:00:13+08:00</published><updated>2023-09-19T08:00:13+08:00</updated><id>https://www.mikecaptain.com/2023/09/19/cb-impact</id><content type="html" xml:base="https://www.mikecaptain.com/2023/09/19/cb-impact/">&lt;p&gt;可转债（Convertible Bond，简称 CB），即可转换债券（或可换股债券），可按一定规则转换为债券发行公司的股票。其转换价格、转换时间段会在发行前确定。&lt;/p&gt;

&lt;p&gt;北京时间 2023 年 9 月 19 日清晨（美东时间 2023 年 9 月 18 日），蔚来（NIO.US）宣布拟发行本金总额 5 亿美元的、到期时间为 2029 年的可转债，以及本金总额 5 亿美元、到期时间为 2030 年的可转债。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么一家企业如果宣布发行可转债，对股东是利好还是利空呢。通常来讲，增发股票都是利空的，可转债是一种在指定时间可转换为股票的债券，所以也是类似的。但是这与公司基本面出现利空不同，相比来讲期影响是相对短期的，也就是迅速按照股本稀释股价到一定比例就差不多了。但是发行可转债通常说明这家公司的现金流不够健康，需要融资，一家有现金源源不断、充足、健康进入的企业，通常来说是不需要发行可转债的。&lt;/p&gt;

&lt;p&gt;下面是一些近几年美股的上市公司发行可转债后短期股价的变化实例收集。&lt;/p&gt;

&lt;p&gt;2023 年 5 月 26 日，美股大麻板块的 Tilray Brands 公司宣布将发行 1.5 亿美元的 2028 年到期的高级无担保可转债，票息 5.2%。公司还授予承销商 30 天的期权，允许额外购买不超过 2,250 万美元的债券。当日股价暴跌收盘 -21.19%（盘中最大跌幅 -22.88%），并在后续两个交易日里继续下跌 -1.61%、-8.74%，三日累计约 -30%；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2022 年 11 月 16 日，嘉年华邮轮（CCL）通过私募募资发行本金规模达 10 亿美元的优先级可转换债券，当日股价暴跌收盘 -13.71%（盘中最大跌幅 -14.96%），并在后续三个交易日内连续下跌 -1.25%、-0.42%、-1.58%，四日累计约 -23%；&lt;/p&gt;

&lt;p&gt;2022 年 6 月 28 日，美股上市公司 Aspen Aerogels（ASPN.US）宣布公开发行普通股和 2027 年到期的绿色高级可转债，次日股价暴跌 -42.69% 收盘；又过一日，该公司宣布取消此前的决定，原因是公司评估认为在目前的市场条件下，发行新股和可转债不利于股东最佳利益。当月 30 日股价又暴涨 +17.20% 收盘，但未能涨回到此前的价位。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2020 年 3 月 5 日（周四），蔚来汽车在其投资者关系网站发布公告，宣布再次完成 2.35 亿美元可转债融资项目，此时距离上次融资不到一个月。宣布可转债的前一日股价下跌 -4.68%，宣布的当日股价下跌收盘 -3.88%（盘中最大跌幅 -4.91%），并在后续几个交易日内连续下跌 -4.57%、-7.32%，三日累计下跌约 -15%；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2020 年 2 月 14 日（周五），蔚来汽车发布公告，称公司与两个非关联的亚洲基金签署明确协议，蔚来汽车将向后者发行价值达 1 亿美元的可转换债，当日股价下跌收盘 -6.45%（盘中最大跌幅 -6.95%）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2020 年 2 月 6 日（周四），蔚来汽车宣布分别发行价值 7000 万美元和 3000 万美元的两笔可转换债，投资方为两家非关联的亚洲投资基金，当日股价大跌收盘 -7.06%（盘中最大跌幅 -7.74%），次日继续暴跌 -6.62%，两日累计 -13% 跌幅。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基于以上分析，由于可转债资讯发布于盘后时间，所以最稳妥保守的决策是在盘后即卖出正股进行做空。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;后记&quot;&gt;后记&lt;/h4&gt;

&lt;p&gt;2023 年 9 月 19 日，NIO 大跌 -17.07%（盘中最大跌幅 -18.43%）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quant/2023/09/23/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>麦克船长</name></author><category term="quant" /><category term="美股" /><category term="可转债" /><category term="NIO" /><category term="蔚来汽车" /><category term="TLRY" /><category term="CCL" /><category term="股票" /><category term="CB" /><category term="Convertible Bond" /><category term="投资" /><summary type="html">可转债（Convertible Bond，简称 CB），即可转换债券（或可换股债券），可按一定规则转换为债券发行公司的股票。其转换价格、转换时间段会在发行前确定。</summary></entry><entry><title type="html">【摘录】Livemore：华尔街不会改变，人性不会改变</title><link href="https://www.mikecaptain.com/2023/09/19/livemore-some-words/" rel="alternate" type="text/html" title="【摘录】Livemore：华尔街不会改变，人性不会改变" /><published>2023-09-19T08:00:13+08:00</published><updated>2023-09-19T08:00:13+08:00</updated><id>https://www.mikecaptain.com/2023/09/19/livemore-some-words</id><content type="html" xml:base="https://www.mikecaptain.com/2023/09/19/livemore-some-words/">&lt;p&gt;杰西·劳里斯顿·李佛摩（Jesse Lauriston Livermore），1877 年 7 月 26 日 — 1940 年 11 月 28 日，华尔街著名金融家，被《时代》杂志形容为「最活跃的美国股市投机客（the most fabulous living U.S. stock trader）」。以下是他的言论摘录。&lt;/p&gt;

&lt;h3 id=&quot;01华尔街不会改变人性不会改变&quot;&gt;01、华尔街不会改变，人性不会改变&lt;/h3&gt;

&lt;p&gt;市场是有规律的，市场的规律性缘因于不变的人性！&lt;/p&gt;

&lt;p&gt;我很早在股市中学到的一个教训，就是华尔街没有新事物，因为投机就像山岳那么古老。股市今天发生的事以前发生过，以后会再度发生。我想我真正没法记住的就是何时和如何发生。我用这种方式记住的事实，就是我利用经验的方法。&lt;/p&gt;

&lt;p&gt;华尔街从来不会改变，因为人的本性是从来不会改变的。&lt;/p&gt;

&lt;p&gt;我认为，控制不住自己的情绪是投机者真正的死敌。恐惧和贪婪总是存在的，他们就藏在我们的心里。它们在市场外面等着跳进市场来表现，等着机会大赚一把；无论是在什么时候，从根本上说由于贪婪和恐惧、无知和希望，人们总是按照相同的方法重复自己的行为——这就是为什么那些数字构成的图形和趋势，总是一成不变地重复出现的原因。&lt;/p&gt;

&lt;h3 id=&quot;02赚大钱要靠耐心等待&quot;&gt;02、赚大钱要靠耐心「等待」&lt;/h3&gt;

&lt;p&gt;耐心等待市场真正完美的趋势，不要做预测性介入；时机就是一切，要在恰当的时候买进，也要在恰当的时候卖出。&lt;/p&gt;

&lt;p&gt;交易不是每天要做的事情，那种认为随时都要交易的人，忽略了一个条件，就是交易是需要理由的，而且是客观的、适当的理由。&lt;/p&gt;

&lt;p&gt;除了设法决定如何赚钱之外，交易者必须设法避免亏钱。知道什么应该做，跟知道什么不应该做几乎一样重要。&lt;/p&gt;

&lt;p&gt;股票作手必须对抗内心中很多代价高昂的敌人。赚大钱要靠等待，而不是靠想；一定要等到所有因素都对你有利的时机。&lt;/p&gt;

&lt;p&gt;预测市场之所以如此困难，就是因为人的本性。驾驭和征服人的本性是最困难的任务。仔细地选择时机是非常重要的，一旦操之过急，是要付出代价的。&lt;/p&gt;

&lt;p&gt;我的损失完全是由于缺乏耐心造成的，没有耐心地等待恰当的时机，来支持事先已经形成的看法和计划。不懂得15年后，有些事情让我能够等待长长的两星期，看着我十分看好的股票上涨30点时，才觉得买进很安全。&lt;/p&gt;

&lt;p&gt;这要有耐心，等着恰当的关键点出现，等着恰当的交易时机。耐心、耐心、再耐心，这就是他把握时机，获得成功的诀窍。他常常说：「赚钱的不是想法，而是静等」。&lt;/p&gt;

&lt;p&gt;一个人需要做的，只是观察市场正在告诉他什么，并对此做出反应。答案就在市场本身，挑战来自对呈现出来的事实做出正确的解释。&lt;/p&gt;

&lt;p&gt;“时机就是一切”。在进入交易之前，最重要的是确定最小阻力线是否和你的交易方向一致。&lt;/p&gt;

&lt;p&gt;我的经验是，如果我不是在接近某个趋势的开始点才进入市场，我就绝对不会从这个趋势中获取多少利润。原因是，我错失了利润储备。&lt;/p&gt;

&lt;p&gt;有了这种勇气和耐心，他就可以静观市场变化，就可以在这次行情结束前必定不断出现的小的回落或回升面前持股不动。&lt;/p&gt;

&lt;p&gt;市场会及时向你发出什么时候进入市场的信号。同样肯定的是，市场也会及时向你发出退场的信号—如果你耐心等待的话。&lt;/p&gt;

&lt;p&gt;「罗马不是一天建成的」，真正重大的趋势不会在一天或一个星期就结束。它走完自己的逻辑过程是需要时间的。&lt;/p&gt;

&lt;p&gt;在很多时候，利弗摩尔是持币观望，直到合适的行情出现。他的很多成功就在于他能够持币观望，耐心等待，直到恰当的行情出现在他的面前。&lt;/p&gt;

&lt;p&gt;当行情出现，有很多对他有利的机会出现时，在这个时候，也只有在这个时候，他才像眼镜蛇一样，“噌”地一声窜出去。&lt;/p&gt;

&lt;p&gt;我后来的交易理论的一个关键是：只在关键点上进行交易。只要我有耐心，在关键点上进行交易，我就总能赚到钱。我还认为，一只股票的行情的最大部分，往往发生在这一次行情的最后两个星期或更长一段时间。&lt;/p&gt;

&lt;p&gt;但要记住，在使用关键点预测行情的时候如果这只股票在越过关键点之后，没有像它应该表现的那样，那就是一个需要立即引起注意的、重要的危险信号。只要我失去耐心，没有等到关键点的出现，而是像轻而易举地赚到钱，我就肯定会赔钱。&lt;/p&gt;

&lt;p&gt;另外需要注意的是：在一次行情快结束的时候，成交量大幅度增加，往往是一次真正的分配。因为股票从强手转给了弱手从专业操盘手转到了普通股民。&lt;/p&gt;

&lt;p&gt;一般股民认为成交量大幅增加是正常调整之后——不是向最高价格调整就是向最低价格调整——而出现的活跃和健康市场的一个信号，但是这种看法是没有依据的。&lt;/p&gt;

&lt;p&gt;我要向愿意把投机看成一种严肃生意的那些人说清楚，而且我希望郑重重申的是一厢情愿的想法必须清除；指望每天或每星期都投机的人，不会获得成功；你允许你自己进入交易的次数，一年可能只有四五次。&lt;/p&gt;

&lt;p&gt;在交易之前，要等待，要耐心地等待，直到尽可能多的因素都对你有利的时候，再进行交易。&lt;/p&gt;

&lt;p&gt;耐心可以使你赚到钱。不要预测或估计市场将在什么时候朝什么方向发展，这是很危险的。&lt;/p&gt;

&lt;p&gt;你必须等待市场或股票出现突破。不要估计！要等着市场来证实！不要跟报价单争论。现金过去是，现在是，将来也永远是国王。&lt;/p&gt;

&lt;p&gt;事实上，往往是那些持币观望，等到恰当时机进行交易的人，才能赚到大钱。耐心耐心再耐心，才是成功的关键。如果一个精明的投机者把握好这一点的话，时间就是他最好的朋友。&lt;/p&gt;

&lt;p&gt;掌握恰当的时机进入市场。时间不是金钱，因为有时候，尽管你早早进入了市场，却不能赚到钱——时间就是时间，而资金就是资金。资金要等到恰当的时候进入市场才能赚到钱——耐心、耐心、再耐心，是成功的关键。&lt;/p&gt;

&lt;p&gt;如果没有市场的证实，不要预测，也不要采取行动。有很多次我和其他许多投机者一样，没有耐心等待肯定要发生的事情。&lt;/p&gt;

&lt;p&gt;我是人，也屈从于人的弱点。和所有的投机者一样，我也没有了耐心，失去了正确的判断，颠倒了它们的位置——在该感到害怕的时候却充满希望；在该充满希望的时候却感到恐惧。&lt;/p&gt;

&lt;p&gt;真正的趋势不会在它们开始那天就结束，而一次真正的趋势是需要时间的。请记住股票永远不会太高，高到让你不能开始买进也不会低到让你不能开始卖出。但是在第一笔交易后，除非第一笔出现利润，否则别做第二笔。要等待和观察。这就是你解盘能力发挥作用的时候，让你能够判定开始的正确时机。&lt;/p&gt;

&lt;p&gt;很多事情成功与否，要看是否在完全正确的时机开始。我花了很多年才了解这一点的重要性。&lt;/p&gt;

&lt;h3 id=&quot;03靠努力研究和清楚的思考赢得成功&quot;&gt;03、靠努力研究和清楚的思考赢得成功&lt;/h3&gt;

&lt;p&gt;正确就是正确，错误就是错误，只做正确的事情，不要错上加错！&lt;/p&gt;

&lt;p&gt;一位极具天才的投机家曾经告诉过我：当我看见一个危险信号的时候，我不跟它争执。我躲开！几天以后，如果一切看起来还不错，我就再回来。我是这么想的，如果我正沿着铁轨往前走，看见一辆火车以每小时60英里的速度向我冲来，我会跳下铁轨让火车开过去，而不会愚蠢地站在那里不动。它开过去之后，只要我愿意，我总能再回到铁轨上来。&lt;/p&gt;

&lt;p&gt;这番话非常形象地表现了一种投机智慧令我始终不忘。&lt;/p&gt;

&lt;p&gt;奇怪的是，大多数投机者遇到的麻烦是他们自己内心中的一些东西，使他们没有足够的勇气在他们应该平仓的时候平仓。&lt;/p&gt;

&lt;p&gt;他们犹豫不决，他们在犹豫当中，眼睁睁地看着市场朝着对自己不利的方向变动了很多个点。&lt;/p&gt;

&lt;p&gt;显然应该要做的事是在多头市场看多，在空头市场中看空。听起来很好笑，但是我必须深深了解这个一般原则，才能够把这个原则付诸实施。我花了很长的时间，才学会根据这些原则交易。&lt;/p&gt;

&lt;p&gt;解盘在这种游戏中是重要的一部分，在正确的时候开始也很重要，坚持自己的仓位也一样重要。但是，我最大的发现是一个人必须研究和评估整体状况，以便预测未来的可能性。&lt;/p&gt;

&lt;p&gt;我不再盲目地赌博，不再关心如何精通操作技巧，而是关心靠着努力研究和清楚的思考，赢得自己的成功。&lt;/p&gt;

&lt;p&gt;我也发现没有一个人能够免于犯下愚蠢操作的危险。一个人操作愚蠢，就要为愚蠢付出代价。&lt;/p&gt;

&lt;h3 id=&quot;04控制不住自己的情绪是投机者最大的死敌&quot;&gt;04、控制不住自己的情绪是投机者最大的死敌&lt;/h3&gt;

&lt;p&gt;交易就是理性与情感的对抗！交易需要理性的计划。&lt;/p&gt;

&lt;p&gt;我很早以前就认识到，股市从来都不是平淡无奇的。它是为愚弄大多数人、大多数时间而设计的。&lt;/p&gt;

&lt;p&gt;股市上的两种主要的情绪，希望和恐惧——希望往往是因为贪婪而产生的，而恐惧往往是因为无知而产生的。&lt;/p&gt;

&lt;p&gt;我认为，控制不住自己的情绪是投机者真正的死敌。恐惧和贪婪总是存在的，他们就藏在我们的心里。它们在市场外面等等着跳进市场来表现，等着机会大赚一把。&lt;/p&gt;

&lt;p&gt;希望对于人类的生存是至关重要的，但希望与股市上的表亲——无知、贪婪、恐惧和扭曲的理智是一样的。希望掩盖了事实而股市只认事实。结果是客观的，是最终的，就像大自然一样，是不会改变的。&lt;/p&gt;

&lt;p&gt;投机客的主要敌人总是从内心出现。人性跟希望和恐惧无法分开。在投机时，如果市场背离你，你希望每天都是最后一天—而且你要是不遵从希望，你会损失的比应有程度还多——强烈到可以媲美大大小小的开国功臣和开疆拓土的豪杰。&lt;/p&gt;

&lt;p&gt;市场照你的意思走时，你害怕明天会把你所有的利润拿走，因此你退出——退得太快了。害怕使你赚不到应赚的那么多钱。&lt;/p&gt;

&lt;p&gt;成功的交易者必须克服这两个根深蒂固的本能。他必须改变你可以称之为天性冲动的东西。他抱着希望时其实应该要害怕而在害怕时，他应该要抱着希望。他必须害怕他的亏损可能变成更大的亏损，希望他的利润可能变成更大的利润。照一般人那样在股票上赌博，绝对是错误的。&lt;/p&gt;

&lt;p&gt;记住，如果一个投资者没有自律，没有一种明确策略，没有一个简单易行的计划就会陷入情绪的陷阱。因为没有一个计划的投机者就像是一个没有战略，因而也就没有可行的作战方案的将军。&lt;/p&gt;

&lt;h3 id=&quot;05大波动中赚大钱&quot;&gt;05、大波动中赚大钱&lt;/h3&gt;

&lt;p&gt;投资者最大的敌人不是市场，不是别的其他，而是投资者自己。大波动才能让你挣大钱！&lt;/p&gt;

&lt;p&gt;这里让我说一件事情：在华尔街经历了这么多年，赚了几百万美元，又亏了几百万美元之后，我想告诉你这一点：我的想法从来都没有替我赚过大钱，总是我坚持不动替我赚大钱。懂了吗？是我坚持不动！&lt;/p&gt;

&lt;p&gt;对市场判断正确丝毫不足为奇。你在多头市场里，总会找到很多一开始就做多的人而在空头市场里，也会找到很多一开始就做空的人。&lt;/p&gt;

&lt;p&gt;能够同时判断正确又坚持不动的人是很罕见的，我发现这是最难学习的一件事。但是股票作手只有确实了解这一点之后，他才能够赚大钱。这一点千真万确。作手知道如何操作之后，要赚几百万美元，比他在一无所知时想赚几百美元还容易。&lt;/p&gt;

&lt;p&gt;原因在于一个人可能看得清楚而明确，却在市场从容不迫、准备照他认为一定会走的方向走时，他变得不耐烦或怀疑起来。&lt;/p&gt;

&lt;p&gt;华尔街有这么多根本不属于傻瓜阶级的人甚至不属于第三级傻瓜的人，却都会亏钱道理就在这里。&lt;/p&gt;

&lt;p&gt;市场并没有打败他们，他们打败了自己。因为他们虽然有头脑，却无法坚持不动。&lt;/p&gt;

&lt;p&gt;我开始了解，要赚大钱一定要在大波动中赚。不管推动大波动起步的因素可能是什么，只要事实俱在，大波动就能够持续下去。这不是内线集团炒作或金融家的技巧造成的结果，而是依靠基本形势。&lt;/p&gt;

&lt;p&gt;不理会大波动，设法抢进抢出，对我来说是致命大患。没有一个人能够抓住所有的起伏。在多头市场里，你的做法就是买进和紧抱，一直到你相信多头市场即将结束时为止。&lt;/p&gt;

&lt;p&gt;要这样做，你必须研究整个大势，而不是研究明牌或影响个股的特殊因素，然后你要忘掉你所有的股票，永远忘掉！&lt;/p&gt;

&lt;p&gt;任何人所能学到一个最有帮助的事情，就是放弃尝试抓住最后一档或第一档。&lt;/p&gt;

&lt;p&gt;这两档是世界上最昂贵的东西。总计起来这两档让股友耗费了千百万美元，多到足以建筑一条横贯美洲大陆的水泥公路。&lt;/p&gt;

&lt;p&gt;一个人如果对自己的判断没有信心，在这种游戏中就走不了多远。这些大概是我学到的一切—研究整体状况，承接仓位，并且坚持下去。&lt;/p&gt;</content><author><name>麦克船长</name></author><category term="quant" /><category term="美股" /><category term="股票" /><category term="投资" /><category term="投机" /><category term="invest" /><category term="investment" /><category term="speculation" /><category term="wall street" /><category term="美国" /><category term="livemore" /><category term="利弗莫尔" /><category term="股票大作手" /><category term="大作手" /><category term="操盘" /><category term="基金" /><category term="止损" /><summary type="html">杰西·劳里斯顿·李佛摩（Jesse Lauriston Livermore），1877 年 7 月 26 日 — 1940 年 11 月 28 日，华尔街著名金融家，被《时代》杂志形容为「最活跃的美国股市投机客（the most fabulous living U.S. stock trader）」。以下是他的言论摘录。</summary></entry><entry><title type="html">趋势量化基础（持续更新）</title><link href="https://www.mikecaptain.com/2023/09/19/ib-quant-basic-1/" rel="alternate" type="text/html" title="趋势量化基础（持续更新）" /><published>2023-09-19T08:00:13+08:00</published><updated>2023-09-19T08:00:13+08:00</updated><id>https://www.mikecaptain.com/2023/09/19/ib-quant-basic-1</id><content type="html" xml:base="https://www.mikecaptain.com/2023/09/19/ib-quant-basic-1/">&lt;h4 id=&quot;get-historical-data-of-specific-option&quot;&gt;Get historical data of specific option&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ib_insync&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytz&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7496&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;QQQ&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTradeDateOrContractMonth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;20231004&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;CBOE&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;USD&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Use pytz library to define timezone
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;est&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;America/New_York&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2023&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tzinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;est&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reqHistoricalData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durationStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;1 D&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barSizeSetting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;1 min&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;whatToShow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;TRADES&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useRTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# transform data to DataFrame
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# print DataFrame
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytz&lt;/code&gt; library is a Python library for handling timezones, and it also utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util&lt;/code&gt; module from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandas&lt;/code&gt; library. The loop begins with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util.startLoop()&lt;/code&gt;, establishing a continuous loop. Then, an IB (Interactive Brokers) connection is created. Following this, an Option contract is instantiated, using QQQ as an example, with an expiration date of 2023-10-04, a target price of 360, and a Call option on the CBOE exchange, denominated in US dollars.&lt;/p&gt;

&lt;p&gt;Next, a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;est&lt;/code&gt; is created to represent the Eastern Standard Time (EST) timezone. Another variable is set for the desired end time of the data retrieval, which, in this case, is the closing time on 2023-09-29 at 4:00 PM. The timezone information is specified using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tzinfo=est&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ib.reqHistoricalData&lt;/code&gt; function is then used to retrieve the data with a duration of one day (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;durationStr=&apos;1 D&apos;&lt;/code&gt;) and a time interval of one minute (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barSizeSetting=&apos;1 min&apos;&lt;/code&gt;). Finally, the obtained data is printed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util.df(bars)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;vnpy&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN testspace % python ib_get_option_data_3.py
                         &lt;span class=&quot;nb&quot;&gt;date  &lt;/span&gt;open  high   low  close  volume  average  barCount
0   2023-09-29 08:47:00-05:00  4.13  4.13  4.13   4.13     1.0     4.13         1
1   2023-09-29 08:48:00-05:00  4.13  4.13  4.13   4.13     0.0     4.13         0
2   2023-09-29 08:49:00-05:00  4.13  4.13  4.13   4.13     0.0     4.13         0
3   2023-09-29 08:50:00-05:00  4.13  4.13  4.13   4.13     0.0     4.13         0
4   2023-09-29 08:51:00-05:00  4.13  4.13  4.13   4.13     0.0     4.13         0
..                        ...   ...   ...   ...    ...     ...      ...       ...
383 2023-09-29 15:10:00-05:00  2.49  2.49  2.49   2.49     0.0     2.49         0
384 2023-09-29 15:11:00-05:00  2.49  2.49  2.49   2.49     0.0     2.49         0
385 2023-09-29 15:12:00-05:00  2.49  2.49  2.49   2.49     0.0     2.49         0
386 2023-09-29 15:13:00-05:00  2.49  2.49  2.49   2.49     0.0     2.49         0
387 2023-09-29 15:14:00-05:00  2.49  2.49  2.49   2.49     0.0     2.49         0

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;388 rows x 8 columns]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;get-historical-data-of-specific-stock-and-output-it-to-a-file&quot;&gt;Get historical data of specific stock and output it to a file&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ib_insync&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytz&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7496&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义GOOG的股票合约
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;GOOG&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;SMART&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;USD&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 使用pytz库来定义美国东部时区
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;est&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;America/New_York&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 获取当前日期
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;est&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 计算5年前的日期
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startDateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reqHistoricalData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;durationStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;5 Y&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barSizeSetting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;1 day&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;whatToShow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;TRADES&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useRTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>麦克船长</name></author><category term="quant" /><category term="美股" /><category term="股票" /><category term="FOMC" /><category term="美联储" /><category term="美国" /><category term="市场" /><category term="market" /><category term="IB" /><category term="盈透" /><category term="ib_insync" /><summary type="html">Get historical data of specific option</summary></entry><entry><title type="html">【摘录】投资的道路上不存在捷径，但如果向成功的投资大师学习，可以少走很多弯路。</title><link href="https://www.mikecaptain.com/2023/07/30/investment-learnt-from-masters/" rel="alternate" type="text/html" title="【摘录】投资的道路上不存在捷径，但如果向成功的投资大师学习，可以少走很多弯路。" /><published>2023-07-30T12:00:13+08:00</published><updated>2023-07-30T12:00:13+08:00</updated><id>https://www.mikecaptain.com/2023/07/30/investment-learnt-from-masters</id><content type="html" xml:base="https://www.mikecaptain.com/2023/07/30/investment-learnt-from-masters/">&lt;p&gt;原文链接：https://mp.weixin.qq.com/s/U8YsBlMOtj98LeTxXOPigQ?global_content=%7B%22promote_id%22%3A13766%2C%22sub_promote_id%22%3A4%7D&lt;/p&gt;

&lt;p&gt;投资的道路上不存在捷径，但如果向成功的投资大师学习，可以少走很多弯路。&lt;/p&gt;

&lt;p&gt;成功的投资大师需要满足多个条件，比如长期非凡的投资收益、巨额的财富、可重复的投资逻辑，其投资智慧在股市得到「证悟」。他们将自身的经验凝练为几条重要的原则，当这些原则内化为投资者的噪音过滤器时，就会极大降低犯错的概率。&lt;/p&gt;

&lt;p&gt;如巴菲特在过去 58 年创造了 3.8 万倍的投资收益，身家接近 1000 亿美元；格雷厄姆在 1936 年～1956 年动荡频发的美国资本市场中仍取得了年化不低于 14.7% 的收益率；段永平在网易上赚取了百倍收益，后又在贵州茅台和苹果上各赚取了10倍的收益；张尧在 1999 年～2018 年期间在A股和港股赚取了2000倍的收益，2018年至今张尧重仓的煤炭股涨幅在1倍以上，25 年约有 4000 倍收益。&lt;/p&gt;

&lt;p&gt;张尧说「投资没有捷径。但大概率的正确的投资路径，是从学习成功的投资大师开始。学习投资大师可以少走弯路。首先是认同，然后学习模仿，归纳总结，活学活用，不同程度受益，然后再学习再体会，重复这个过程。」&lt;/p&gt;

&lt;p&gt;美国股市具有200年的历史，聪明投资者智慧的代际传播加上个人的超凡悟性造就了格雷厄姆、巴菲特、费雪等殿堂级人物；中国资本市场仅有30多年的历史，但段永平和张尧等人的价值投资实践也证明了，价值投资的原则在A股不仅适用，而且威力巨大。&lt;/p&gt;

&lt;h2 id=&quot;格雷厄姆的投资原则安全边际和不要受市场先生摆布&quot;&gt;格雷厄姆的投资原则：安全边际和不要受「市场先生」摆布&lt;/h2&gt;

&lt;p&gt;巴菲特说「50 年前，我在哥伦比亚大学开始学习格雷厄姆教授的证券分析课程。在此之前的 10 年里，我一直盲目地热衷于分析、买进、卖出股票，但是我的投资业绩却非常一般。从 1951 年起，我的投资业绩开始明显上升，但这并非由于我改变饮食习惯或者开始运动，我唯一添加的新的营养成分是格雷厄姆的投资理念。原因非常简单，在大师门下学习几个小时的效果，远远胜过我自己在过去10年里自以为是的天真思考的结果。」&lt;/p&gt;

&lt;p&gt;格雷厄姆的《证券分析》和《聪明的投资者》能够准确和清晰地提供投资知识体系，但情绪的约束需要投资者自己必须做到。格雷厄姆建立了一套自己的核心原则，这一原则尽管历经了资本市场80年风雨，但至今依然适用。这些原则包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一是股票并非仅仅是一个交易代码或电子信号，而是表明拥有一个实实在在的企业所有权；企业的内在价值并不依赖于其股票价格。&lt;/li&gt;
  &lt;li&gt;二是市场就像一只钟摆，永远在短命的乐观（它使得股票过于昂贵）和不合理的悲观（它使得股票过于廉价）之间摆动。聪明的投资者是现实主义者，他们向乐观主义者卖出股票，并从悲观主义者手中买进股票。&lt;/li&gt;
  &lt;li&gt;三是每一笔投资的未来价值是其现在价格的函数，你付出的价格越高，你的回报就越少。&lt;/li&gt;
  &lt;li&gt;四是无论如何谨慎，每个投资者都免不了会犯错误，只有坚持“安全性”原则，你才能使犯错误纪律最小化。&lt;/li&gt;
  &lt;li&gt;五是投资的秘诀在于你的内心。如果你在思考问题时持批判态度，不相信华尔街的所谓“事实”，并且以持久的信心进行投资，你就会获得稳定的收益，即便是在熊市亦如此。通过培养自己的约束力和勇气，你就不会让他人的情绪左右你的投资目标。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;费雪的投资哲学寻找少数出类拔萃的公司&quot;&gt;费雪的投资哲学：寻找少数出类拔萃的公司&lt;/h2&gt;

&lt;p&gt;巴菲特曾说过「我的投资哲学 85% 来自格雷厄姆，15% 来自菲利普·费雪。」&lt;/p&gt;

&lt;p&gt;费雪的投资哲学包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一是投资的成功依赖于找到一家未来几年销售额和利润高于行业整体水平的公司，当找到这样的公司时，最好在很长一段时间内持有，「既幸运又有能力」的公司和「因为能力而幸运」的公司都有望在数十年内实现超过平均水平。&lt;/li&gt;
  &lt;li&gt;二是卓越的管理是取得优异市场业绩的关键，很多公司之所以拥有良好的增长前景，是因为它们的现有产品或服务线可以维持若干年，少数公司会有政策确保10年～20年增长。&lt;/li&gt;
  &lt;li&gt;三是宁愿拥有少数出类拔萃的公司，也不要投给大批平庸的公司，三四家公司的市值可以占到总仓位的 75%，要想取得投资的成功，必须在能力圈内投资，超越能力圈投资是投资失误的主要原因。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;芒格的投资哲学用合理的价格买入伟大的公司&quot;&gt;芒格的投资哲学：用合理的价格买入伟大的公司&lt;/h2&gt;

&lt;p&gt;巴菲特说「芒格绝对是独一无二的，他用思想的力量，拓宽了我的视野，这让我以非同寻常的速度从猩猩进化为人类，否则我会比现在贫穷得多。」&lt;/p&gt;

&lt;p&gt;芒格的投资哲学包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一是寻找拥有高水平现金收入和低水平资本支出要求的公司，有两类企业，第一类是每年赚12%，你到年底可以把利润拿走；第二类是每年赚 12%，但所有的现金必须进行再投资——它总是没有分红。&lt;/li&gt;
  &lt;li&gt;二是为一家优秀的公司付出公平的价格，总比为一家平庸的公司付出高昂的价格要好得多。有些东西值得花钱买，比如优秀的企业和优质的人。真正好的投资机会不会常有，也不会持续很长时间，所以你必须做好行动的准备，要有随时行动的思想准备。
芒格认为，吸取其他人的宝贵经验教训是明智之举，闭目塞听不能梦想成真。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;巴菲特的投资原则用合理的价格买入有杰出经济特征的公司&quot;&gt;巴菲特的投资原则：用合理的价格买入有杰出经济特征的公司&lt;/h2&gt;

&lt;p&gt;巴菲特的投资哲学受到三位殿堂级人物的影响，他们分别是本杰明·格雷厄姆、菲利普·费雪和查理·芒格。巴菲特的投资哲学包含了买股票就是买公司；正确对待市场先生、能力圈、安全边际等原则。而一旦找到符合买入标准的公司，巴菲特倾向于集中投资，比如苹果公司一只股票就可以占到伯克希尔仓位的四成以上。&lt;/p&gt;

&lt;p&gt;巴菲特寻找目标公司的标准：&lt;/p&gt;

&lt;p&gt;一是规模足够大、具有杰出的经济特征。&lt;/p&gt;

&lt;p&gt;二是具有被验证了的持续盈利能力（对于那些未来做出的预测，我们毫无兴趣；对于所谓的「困境反转」型公司，我们也没兴趣）。&lt;/p&gt;

&lt;p&gt;三是在负债极少或没有负债的情况下，公司具有良好的净资产回报率。&lt;/p&gt;

&lt;p&gt;四是具备管理层。&lt;/p&gt;

&lt;p&gt;五是业务简明（如果有太多的科技成分，我们可能搞不明白）。&lt;/p&gt;

&lt;p&gt;六是价格合理。&lt;/p&gt;

&lt;h2 id=&quot;a股价值投资集大成者普通投资者学习巴菲特就好了&quot;&gt;A股价值投资集大成者：普通投资者学习巴菲特就好了&lt;/h2&gt;

&lt;p&gt;A 股的价值投资集大成者，都是巴菲特思想的追随者。&lt;/p&gt;

&lt;p&gt;段永平说「和巴菲特聊一聊，给我非常大的帮助，至少给我带来几千倍午饭的价值。以前我对商业模式是没有那么重视的，只是众多考虑之一。认识老巴以后，我买的苹果、茅台，包括腾讯，都有老巴的影响在里面，尤其是一直拿着这点，和老巴绝对密不可分。」&lt;/p&gt;

&lt;p&gt;段永平还说「从那以后，市场对我的影响逐渐下降到几乎没有。如果能够重来的话，那我肯定会更早地去赢取那个机会。」&lt;/p&gt;

&lt;p&gt;张尧的投资原则是「集中投资于能形成大量自由现金流、简单易懂的好公司，定量上的极低估值使得投资很难亏损。」&lt;/p&gt;

&lt;p&gt;张尧曾说过，从定性上来说，就是买入经营上有竞争优势的好公司，好公司就是其商业模式可以形成大量自由现金流，估值上也要有绝对优势，最常用的标准是 3～5 年现金流回本法，即 3～5 倍 PE。&lt;/p&gt;

&lt;p&gt;定性上的好公司外加充足的“安全边际”让张尧的投资很难亏损。在过去20年间，他曾重仓过的12家公司中，10 家盈利、1 家持平、1 家亏损。&lt;/p&gt;

&lt;p&gt;在投资中，模仿胜过创新，投资思想是否原创并不重要，关键是接受并认同成功投资大师的理念，并认真执行它。往简单处想，往认真处行，威力巨大。&lt;/p&gt;</content><author><name>屈红燕</name></author><category term="quant" /><category term="格雷厄姆" /><category term="巴菲特" /><category term="股票" /><category term="投资" /><category term="价值投资" /><category term="费雪" /><category term="段永平" /><category term="证券分析" /><category term="聪明的投资者" /><summary type="html">原文链接：https://mp.weixin.qq.com/s/U8YsBlMOtj98LeTxXOPigQ?global_content=%7B%22promote_id%22%3A13766%2C%22sub_promote_id%22%3A4%7D</summary></entry><entry><title type="html">人工智能 LLM 革命黎明：Copilot as a Service 将打造无数超级个体，核心能力是预测与自主 by 麦克船长</title><link href="https://www.mikecaptain.com/2023/06/25/autonomous-ai/" rel="alternate" type="text/html" title="人工智能 LLM 革命黎明：Copilot as a Service 将打造无数超级个体，核心能力是预测与自主 by 麦克船长" /><published>2023-06-25T12:00:13+08:00</published><updated>2023-06-25T12:00:13+08:00</updated><id>https://www.mikecaptain.com/2023/06/25/autonomous-ai</id><content type="html" xml:base="https://www.mikecaptain.com/2023/06/25/autonomous-ai/">&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/23.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最近对于本轮生成式 AI 浪潮的讨论，进入了一个新阶段，大家从模糊地认为是巨大变革，逐渐开始探讨具体的变革机会点。我想讲讲自己对于本轮技术变革，在 to B 领域的一些基本观点。这些基本观点，是有争议的、非共识的，但我想有必要输出，以换来更多朋友与我的交流碰撞。&lt;/p&gt;

&lt;p&gt;因此本文围绕本轮生成式 AI 在 To B 领域的应用落地，分五部分探讨：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;数字化应用演进曲线（包括 To B 和 To C）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;初步探讨 To B 领域当下用到的 AI 核心能力是什么&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;关于预测（Prediction）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;关于自主（Autonomy）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;什么样的团队会把握住这次机遇？最佳切入点是什么？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一麦克船长数字化应用演进曲线&quot;&gt;一、麦克船长：数字化应用演进曲线&lt;/h2&gt;

&lt;p&gt;为什么聊 to B 领域？当下阶段的生成式 AI 技术在 to C 和 to B 领域的应用差异是非常大的。理解这件事情，我们要宏观看下大时间尺度上，我们过去、当下、未来经历什么技术演进。陆奇博士提过将数字化应用的发展分为三个阶段 information → model → action，受此启发我在今年 4 月份时按照横轴是时间线、纵轴是 AI 能力发展、上是 to B、下是 to C 画了如下这张整体理解数字化应用的演进图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/19.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这张图我会在后续的文章中反复提起，也欢迎大家留言与我探讨，下面解释一下。&lt;/p&gt;

&lt;p&gt;首先，我们把人类对于数字化应用的需求结构分为这三个阶段 information → model → action。在商业需求推动下，每个阶段 B 端发展都比 C 端应用早一大步。&lt;/p&gt;

&lt;p&gt;第一阶段从 PC 诞生到 2022 年前后，数字化应用提供 information 价值，随计算设备、I/O 设备、三大网络（信息流/金流/物流）基础发展，在不同时期出现适配其时下人类预期的应用，向 B 端 Deliver Softwares（Collect + Analyze），向 C 端 Deliver Apps（Express + Execute）。这个阶段我们能看到 to B 一侧有 Salesforce、WorkDay、ServiceNow、Shopify、钉钉、有赞、用友等等应用，to C 一侧有 Google、Facebook、Twitter、Tik Tok、微信、淘宝、支付宝等等大量 killer app 出现。&lt;/p&gt;

&lt;p&gt;当大模型智能涌现后，数字化应用进入第二阶段（从 2022 年前后开始），围绕 information → model 价值 B 端 Deliver Copilots（Predict + Autonomize）、C 端 Deliver Companions 提供关心的情绪价值以及帮助人类完成一些事情（Care + Assist）。当下最大机会是打造企业所需各行业 Copilot 搭档副手，而因目前模型精确性表现欠佳，但 C 端超越泛娱乐、进入深度使用时又要高精确性，因此当下并非挖掘 C 端商业价值最佳时机，可类比 PC 时代及最早期的互联网。这里展开的 to C 话题很多，我们以后再聊。&lt;/p&gt;

&lt;p&gt;第三阶段是 information → model → action，即 AI 从能低延迟多模态 I/O，到对世界全息实时感知（超体）。此时 AI 与世界 I/O 全面对齐并逐步超越人类，B 端 Deliver Agents 为企业制定策略并实施（Strategize + Implement），像优秀的搭档；C 端 Deliver Guardians 忠诚守护、服务人类，并与人高效舒适地合作（Guard + Collaborate）。&lt;/p&gt;

&lt;p&gt;数字化应用从仅能提供收集与分析，到可以成为人类的 AI 搭档，到对齐甚至超越人类后可以与人类重组生产关系，&lt;strong&gt;&lt;u&gt;B 端沿着重塑生产要素发展，information 阶段重塑生产资料，model 阶段重塑生产力，action 阶段重塑生产关系&lt;/u&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;根据 2019 年国家统计局对中国人日常使用时间的分布数据，休闲时间（自由活动）约 205 分钟，生产时间（工作学习）约 291 分钟，琐事时间（事务处理）约 193 分钟。数字化应用在 &lt;strong&gt;&lt;u&gt;C 端沿着渗透用户时间发展，information 阶段渗透休闲时间，model 阶段渗透生产时间，action 阶段渗透琐事时间&lt;/u&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;本文暂时不讨论 to C 的话题，我们围绕 to B 展开聊聊。&lt;/p&gt;

&lt;h2 id=&quot;二to-b-领域当下-ai-的核心能力是预测和自主&quot;&gt;二、To B 领域：当下 AI 的核心能力是预测和自主&lt;/h2&gt;

&lt;p&gt;前段时间和一个做投资的朋友聊天时，聊到似乎生成式 AI 在中美 Startups 圈子的区别，是中国的公司都关注多模态，美国的公司都在关注 Autonomy（自主化，比如 Auto-GPT、BabyAGI、HuggingFace Transformers Agent 等）。我的体感上确实也如此，但并没有严格统计。那为什么是这两点呢？因为当下生成式 AI 的核心能力是预测和自主。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么中国对于关注多模态比较在意，我想可能是因为比较直观，似乎有肉眼可见的效果可以验证。但是对于 Autonomy，硅谷出现了大量开源项目释放给各行各业去推动商业自主化，而国内基本没有什么开源风气，国内 follow 开源风潮的开发者也大都是被美国的开源项目引领。因此出现的 Autonomy 方面的项目，也大多是基于拿来主义的二次开发。原本只是调用 GPT API、使用 LangChain 等开源工具这些项目就不被认为有商业价值，现在基于 API calling 实现的 agent 也都不是自己开发的，创投对此就更不感兴趣。但我认为中国的 Autonomy 机会在于产业空间巨大，原本数字化的链条越不深入，Autonomous AI 的空间就越大。&lt;/p&gt;

&lt;p&gt;回到本文的话题上，为什么说当下生成式 AI 的核心能力是预测和自主呢？首先要明确，&lt;strong&gt;预测是指「预测使用者想要的内容」，自主是指「自主完成使用者的任务」&lt;/strong&gt;。从完成任务的角度看，前者是「点」，后者是「线」，后者由前者组成。为了好理解，你可以把你想象成老板，AI 搭档就是你的员工，这个勤快、灵光的员工总是在想方设法预测老板想要 TA 交付的内容；更进一步地，这个员工还是管理岗具有培养价值的候选人，能够自主拆解任务、调用资源、按图索骥完成工作。&lt;/p&gt;

&lt;p&gt;因此要注意这里的预测，不是预测明天的天气、预测未来股票的涨跌、预测后续俄乌战争的发展 …… 而「预测使用者想要的内容」并不是说使用者知道自己想要什么，而是使用者有能力判断是否使用 AI 预测的结果（即 AI 生成的内容）。相应地，如果使用者没有能力判断是否使用 AI 预测的结果，则 TA 不是目标用户。这也是为什么当下大多数普通用户在大多数场景里，不觉得现在的 AI 有用（&lt;a href=&quot;https://mp.weixin.qq.com/s/nHTXdzdDfPQ4Tv6rTIqDJg&quot;&gt;ChatGPT 跨越 early adopter 和 early massive 之间的鸿沟也非常困难&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当下国内看到的大多数 AI 项目都是在多模态维度上强化「预测」能力，相关的讨论较多，本文只小篇幅来让大家理解什么是预测。后文将重点聊下「自主」。&lt;/p&gt;

&lt;h2 id=&quot;三关于预测prediction&quot;&gt;三、关于预测（Prediction）&lt;/h2&gt;

&lt;p&gt;首先看下从模型层面的理解。关于 LLM 的学习范式，可以看&lt;a href=&quot;https://www.mikecaptain.com/2023/03/06/captain-aigc-2-llm/&quot;&gt;《麦克船长 LLM 革命 2：破晓》&lt;/a&gt;一文。如果您对 LLM 如何学习训练已经基本有概念的话，您一定知道目前基于 Transformer 架构的各种 LLM，甚至基于 ViT（Vision Transformer）的各种视觉模型，都是通过「预测」来实现生成的。这个预测，是大模型基于训练数据学习到的，在输入 prompt 的前提下最大概率对应的输出内容，是对于用户在给定输入内容情况下想要输出内容的预测。&lt;/p&gt;

&lt;p&gt;再看下从应用层面的理解。如何理解预测？这里的预测，是指对目标用户认为所生成内容是否可用的预测（Predictions on the perceived usability of generated content for the target users）。反过来看，就是要求目标用户对于 TA 对生成内容具有判断力，也就是目标用户要自己在「判断」方面是这个领域的行家。例如 AI 生成的蒸汽朋克风格游戏素材，使用者不一定自己会画出这样的游戏素材，但是 TA 必须能够判断这个内容在应用场景里的可用性。如同一艘船长大多数时间里开船的是舵手，但是舵手要听船长的指挥。Gen-AI 以预测的方式生成内容的应用场景里，用户是 Pilot，AI 搭档只是 Copilot。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当下 AI 能力就是尽可能做好一个合格甚至优秀打工人，有人类为其兜底。所以才会演化出 Prompt Engineer（提示工程师）、Alignment Engineer（对齐工程师）等等操作优化 AI 的岗位。而未来对齐甚至超越人类的 Agent 阶段，AI 将会以 Strategize 能力替代 Predict 能力。&lt;/p&gt;

&lt;p&gt;预测的技术拓展，要么是在某个模态上做到预测能力更强，要么是在新的模态上开发能力。模态远比大多数人想象的要广，不只是文本、图片、音频、视频，更具体地：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;视频、图片、音乐、地图、3D、代码、手势、人声、动漫、动画、人像、游戏素材、虹膜指纹、面部表情、肢体语言，甚至各种物理量（速度/加速度、位置信息、光照、温湿度、重量）等等都是多模态研究的前沿领域，只是有些模态更关注识别与理解，有些模态更关注生成。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数字人，是典型的多模态领域探索的落地场景&lt;/strong&gt;，是人声、人像、手势、面部表情、肢体语言等等多模态的集成。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数字场景，即将人置身于虚拟环境&lt;/strong&gt;，这比较依赖 AR/VR/MR 设备的发展，当下 Vision Pro 的出现是一个契机。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;创意设计策划&lt;/strong&gt;，在所有需要人类灵感、脑暴作为源头的领域，AI 将成为灵感创意引擎，而且不仅仅是启发，可以直接产出半成品甚至成品方案。而因为产出方案的边际成本大幅降低，会反过来影响相关行业的经营流程被重塑，这是一个船长今后会深入与大家探讨的议题。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;商用目的的图片生成&lt;/strong&gt;，比如游戏、消费品、本地生活等领域。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;商用目的的视频生成&lt;/strong&gt;，比如电影、动漫、广告、教育、内容娱乐等领域。&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;围绕 Prediction 的探讨不作为本文重点，今后再探讨。&lt;/p&gt;

&lt;!-- ### 1、数字人：虚拟人融入真实环境

数字人的目标受众，对数字人的预期是什么？当下，在哪些技术细节上是需要数字人达到什么样的水准，这些问题汇总起来，就是 AI 预测目标受众想要的数字人效果并呈现出来的问题。在什么时候该说什么话、该做什么表情、该有什么肢体动作、该如何与人互动 …… 这些就是目标受众「潜在」对数字人的要求，这需要 AI 当下有这种「预测」能力。

数字人的应用可以分成三大类：数字人生成工具、数字人经纪、数字人工厂。

数字人生成工具，可以分为「分身」和「原创」两大类。对于分身，只有三类需求：为了商用目的的个人分身（分自己）生成工具、已故亲友的复活数字人生成工具、已故公众人物的复活数字人生成工具，除此之外的需求都不太成立。对于个人的分身，包括按行业垂直的

### 2、数字场景：人置身虚拟环境



### 3、文本的单模态应用图片的单模态应用

### 4、视频的单模态应用 --&gt;

&lt;h2 id=&quot;四关于自主autonomy&quot;&gt;四、关于自主（Autonomy）&lt;/h2&gt;

&lt;h3 id=&quot;1技术演进背景&quot;&gt;1、技术演进背景&lt;/h3&gt;

&lt;p&gt;2022 年 11 月底，基于 GPT-3.5 开发的 ChatGPT 应用，展现了与人类交流的强大能力。但是仍然存在几个重要的缺陷阻碍作为 Gen-AI 最先锋的模型走向 AGI：生成幻觉问题（hallucination）、知识截断问题（knowledge cutoff）。前者是准确性不足，后者是时效性不足。&lt;/p&gt;

&lt;p&gt;其实这两个问题，在 2022 年 10 月 LangChain 发布时，就预示了解决方案（LLM + Retrieve），但是当时还未被生成式 AI 大规模采用，并且还没有消费级的 ChatBot 出现。到 2023 年 1 月时，LangChain 引起广泛重视，再到同年 3 月 ChatGPT 支持 plugins。无论是 LangChain 的方式还是 ChatGPT Plugins 的方式，都是实现通过插件的方式让大模型对互联网的最新数据进行检索再应用到大模型的功能。这样对 hallucination 和 knowledge cutoff 问题都有了较好的解法（虽然还未彻底解决）。&lt;/p&gt;

&lt;p&gt;这样同时带来的另一个好处是，LLM 可以极大程度地接近人类使用在线工具链解决问题的过程。人类通过各类在线工具解决问题的过程，基本可以概括为检索、思考、生成、再检索、再思考、再生成 ……&lt;/p&gt;

&lt;p&gt;3 月 16 日，数字游民 Gravitas 受到 @jacksonfall 和在 GPT-4 风险评估期间进行的测试的启发，发布了一个实验性的项目 EntreprenurGPT，并将其公开在 GitHub 上，希望用其测试 GPT-4 在商业环境中完成赚钱任务的可能性。Gravitas 给它启用了长期记忆来记住重要的事情以及让 AI 不要忘记自己的目标生意。自此 Gravitas 在其 Twitter 不断以文字直播的方式同步着 EntrepreneurGPT 的迭代进展。逐渐地，EntrepreneurGPT 还支持了 Google 检索、创建基于 GPT-4 的新对话（相当于在分裂自己）来完成分解的任务。&lt;/p&gt;

&lt;p&gt;3 月 28 日，美国西雅图的中岛洋平（Yohei Nakajima）是 Untapped 风险投资的合伙人，他在其博客上发表了一篇文章&lt;a href=&quot;https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/&quot;&gt;《Task-driven Autonomous Agent Utilizing GPT-4, Pinecone, and LangChain for Diverse Applications》&lt;/a&gt;，并同步在其 twitter 上，很快引起大家的关注：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/1.png&quot; alt=&quot;&quot; width=&quot;420&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该文提到他们的研究中，提出了一种新颖的任务驱动自主 Agent，利用 OpenAI 的 GPT-4、Pinecone 向量搜索和 LangChain 框架，在各种领域执行各类泛化任务。该系统能够完成任务、基于完成的结果再生成新的任务，并实时优先处理任务。并且还讨论了潜在的未来改进，包括整合安全/安全代理、扩展功能、生成中期里程碑和整合实时优先更新。就像该论文的概要中所提到的，&lt;strong&gt;这项研究的意义在于展示了 AI 驱动的语言模型在各种约束和上下文中自主执行任务的潜力。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3 月 29 日，Gravitas 更名 EntrepreneurGPT 为 Auto-GPT，并加速迭代，添加信息提取、语音输入、运行程序代码等能力，于 4 月 3 日爬升至 GitHub Trending 第一名，项目地址如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AutoGPT 项目地址：&lt;a href=&quot;https://github.com/Significant-Gravitas/Auto-GPT&quot;&gt;https://github.com/Significant-Gravitas/Auto-GPT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3 月 31 日，来自微软亚洲研究院（MSRA）与浙江大学（ZJU）组成的的研究团队发表了论文&lt;a href=&quot;https://arxiv.org/abs/2303.17580&quot;&gt;《HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in HuggingFace》&lt;/a&gt;，提出了一种新的方法，即用大语言模型（例如 ChatGPT、Claude 等）来控制现有的各种 AI 模型来解决更复杂的任务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/13.png&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HuggingGPT 项目地址：&lt;a href=&quot;https://github.com/microsoft/JARVIS&quot;&gt;https://github.com/microsoft/JARVIS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;HuggingGPT 在线实例：&lt;a href=&quot;https://huggingface.co/spaces/microsoft/HuggingGPT&quot;&gt;https://huggingface.co/spaces/microsoft/HuggingGPT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;HuggingGPT 论文地址：&lt;a href=&quot;https://arxiv.org/abs/2303.17580&quot;&gt;https://arxiv.org/abs/2303.17580&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体地，HuggingGPT 可以利用 ChatGPT 来进行目标任务的拆解与规划，然后连接 HuggingFace 社区中的各种 AI 模型；根据社区中的各个模型的描述，来选型再执行所拆解出来的子任务；子任务的执行结果汇总后再给 ChatGPT 进行处理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/14.png&quot; alt=&quot;&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很快，在 4 月 3 日，Yohei Nakajima 在其 Twitter 宣布开源项目 Baby AGI，一个起初只有 105 行代码实现的「任务驱动的自动 Agent（Task-Driven Autonomous Agent）」，其项目地址如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BabyAGI 项目地址：&lt;a href=&quot;https://github.com/yoheinakajima/babyagi&quot;&gt;https://github.com/yoheinakajima/babyagi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4 月 7 日，Google 和 Stanford 的研究人员共同发布一篇论文&lt;a href=&quot;https://arxiv.org/abs/2304.03442&quot;&gt;《Generative Agents: Interactive Simulacra of Human Behavior》&lt;/a&gt;引起全球关注。在这篇论文提到的研究中，研究人员构建了一个虚拟小镇，镇内设有书店、咖啡厅、大学、公寓等设施，并有 25 个 AI 驱动的虚拟人生活其中。这 25 个 AI 都有其自己的生活、爱好、目标等等，彼此之间还可以交流、合作、记忆。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/2.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该研究引起全球轰动，人们开始讨论 AI 的自主意识、AI 的目标与人类的关系、AI 与 AI 的交互行为规范等等议题。还有很多人开始提到《西部世界》。&lt;/p&gt;

&lt;p&gt;4 月 9 日，AgentGPT 发布，为 Auto-GPT 加上了 Web UI，使得其使用门槛进一步降低，并公开在 GitHub 上（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/reworkd/AgentGPT&lt;/code&gt;），AgentGPT 允许配置和部署自主的 AI 代理、定制 AI 名字、指定目标，然后 AgentGPT 会通过思考要完成的任务、执行它们并从结果中学习，试图实现目标。&lt;/p&gt;

&lt;p&gt;5 月 11 日，HuggingFace 推出 API —— Transformers Agent，与 HuggingGPT 类似，Transformers Agent 连接 LLM 和 HuggingFace 社区里的各个模型，好似一个老板与一群员工组成了一个帮你完成任务的团队。可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://huggingface.co/docs/transformers/transformers_agents&lt;/code&gt; 查看 Transformers Agent 的 API 文档。Transformers Agent 可以控制 HuggingFace 上 10 万多个模型，可以处理文本、图片、视频、音频、文档等，是一个多模态的 Agent。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Transformers Agent 内置了多个组件，包括 Prompt、Tools、Agents、Python Interpreter（Python 语言解释器）。&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;这过程中还有无数 Autonomous AI 的项目出现，前沿研究在 AI 自主（Autonomy）方向极速狂奔。在 to B 领域，越自主（Autonomous）就意味着人类的管理颗粒度越粗，而人类在历次工业革命中被从工作与生活的脏累和琐碎中解脱出来，恰恰就是人类需要做的事情颗粒度越来越粗。比如 500 年前的人如果冬天想洗一个热水澡，则需要上山砍柴、背柴回家、劈柴、挑水、生火、烧水、兑水 …… 等等这么多环节以及对应的人力。但是现在的人们，只需要打开热水器的开关。&lt;/p&gt;

&lt;p&gt;因此在当下 to B 场景里，我们可以思考的问题是，你想要做的领域里，如何打造这个领域的热水器？&lt;/p&gt;

&lt;h3 id=&quot;2商业自主化&quot;&gt;2、商业自主化&lt;/h3&gt;

&lt;p&gt;在信息时代，数字化应用主要帮助我们做 Collect + Analyze，以电商经营为例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生意参谋、蝉妈妈、多多参谋等产品，为电商商家，监控店铺流量、成交、访客等等数据并做一些分析。&lt;/li&gt;
  &lt;li&gt;打单软件帮商家集合淘宝、拼多多、京东、有赞、Amazon 等等各个平台的订单再交给打印设备，这是 Collect 的作用。&lt;/li&gt;
  &lt;li&gt;超级店长等店铺管理软件，提醒商家哪些商品库存不足、哪些订单物流异常等等。&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以每个小环节，都要有人来操作这些工具。每个工具都要和使用者之间构建一个交互通道，需要完整的产品抽象、UI 设计、功能设计等等。人与机器之间，在每个小环节上，都要进行彼此的 I/O（输入/输出）。因此一个软件是否好用、是否能把主次分清、合适展现什么信息 …… 等等考验一个产品经理的功底。而每个软件都要学会使用，考验了使用者的人力成本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是对于接触这些工具使用细节这件事，随着管理层级越向上的岗位，颗粒度越粗。如果 AI 扮演一个 Copilot 的角色就不一样了。当有了更多 AI 可以比 Auto-GPT 更强大地帮助人类一起拆解、优化、完成任务时，人类就可以在更高 level 的维度思考、管理、组织商业活动了。因此 BabyAGI 的作者中岛洋平（Yohei Nakajima）说「从自主智能体的发展趋势来看，每个人都有望成为一名经理」。&lt;/p&gt;

&lt;p&gt;对于一个现代商业，通常需要具备如下三项资源，才能完成一个商业闭环开始着手赚钱：技术能力、获客能力、交付能力。而当下 AI 对于商业经营领域，在「自动化」这个命题下，最能帮助到的就是获客能力、交付能力。而我们要走向的，就是 AI 如何逐步能够完成复杂任务，让人类变成「甩手掌柜」。那么相比信息时代的产品，模型时代的产品就要「颗粒度变粗」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我以内容制作为例。一个 UP 主的视频制作，过去的方法是，我们需要编写脚本创意、录制/采风/收集视频素材、字幕添加与校对、音轨编辑（BGM/音效等）、片头片尾制作、封面图制作、标题编写、多平台上传及信息填写、敏感词/违禁词修改、评论留言管理 …… 在这么繁杂的流程里，只要成本可接受，一般 UP 主都会走向雇佣至少一名助理的方式来处理上述大部分工作，仅仅留下脚本创意编写、基本素材生产的这两个环节，其他所有事务型处理全部解放。而当下模型时代，用户期待的正是如此，也就是用户越来越「像个老板」一样工作了。&lt;/p&gt;

&lt;p&gt;类似地，各行各业都会有类似的事情发生，每个人都越来越像一个老板一样去工作，辅助 TA 的，你说是助理也好，Copilot 也好，总之就是用户/客户的一个搭档。因此在模型时代，比拼的是一个人的商机能力、判断能力、整合能力这 3 方面。商机能力一直是从古至今商业里的第一核心能力，判断力则是指能对 AI 搭档交付的结果进行定性或定量的评判（比如交付美术作品就需要审美的判断力等），整合能力就是把各项资源、人力、资金、技术等等组织好。&lt;/p&gt;

&lt;p&gt;因此我们看到，在信息时代，每个环节都有相应的工具产品可以使用，但是每个环节人都要与机器进行 I/O，不仅人力成本高，而且对于每个环节的工具产品也都要求它有复杂、完备、精细打磨的人性化产品实现。所以一个信息时代里的工具产品刚问世时，最好聚焦到一个 I/O 环节里来做深，否则每个环节都做，就要做一大堆面向不同环节 I/O 的产品，对于创业公司来说相当于多个项目在并行，风险极大。&lt;/p&gt;

&lt;p&gt;但是模型时代，我们需要在一个颗粒度相对粗的视角下，找到一个切入点，把某一段（而不是某个点）都让 AI 实现掉，让人类可以在商业运作方面升维。相应地，把握粗颗粒度下更关键的 I/O。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有人会问：信息时代的那些大产品，也不是一个「领域颗粒度细」的产品啊？比如钉钉里面，有聊天、日程、文档、邮件、组织管理 …… 钉钉说的五个在线几乎涵盖了在线办公的方方面面。再比如说 ERP 软件也是，里面包罗万象啥都有。但是我们会发现，&lt;strong&gt;信息时代的大产品，是众多「领域颗粒度细的产品」的集合体；而模型时代的大产品，是一个「领域颗粒度粗的产品」变得更粗&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3自主autonomy与自动automation的区别&quot;&gt;3、自主（Autonomy）与自动（Automation）的区别&lt;/h3&gt;

&lt;p&gt;自动化，需要人类白盒化地显式定义好所有细节，再交给机器来复现。所有的程序都是自动化，因此我们听过「机器人流程自动化（Robot Process Automation）」、「证券交易自动化（Automated Securities Trading）」…… 而各种各样的编程，就是在把某个领域的工作自动化，这也是信息时代数字化应用的核心价值之一。&lt;/p&gt;

&lt;p&gt;RPA 工具就是信息时代的「自动化」工具典型代表，而 RPA 产品渗透市场的最大难点，也恰恰就在于要显式地定义所有操作细节。因此我们能看到美国有大学已经开设了 RPA 课程，在用 RPA 的企业里要专门设置一个 RPA 运营岗位并进行为期不短的 RPA 使用培训，甚至因为过于需要「显式定义细节」以至于 RPA 软件公司还推出了速成 Python 脚本的课程。而 RPA 软件公司积累的所有代码，全部是为了显式地定义各种应用场景下 sentence by sentence 地敲出来的每一步操作模式。而这些在大模型面前，变得毫无价值，因为大模型在应用层具备的两大核心能力之一，就是根据目标任务拆解解决步骤、临时生成大量代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在模型时代，信息时代的「自动」是远远不够的。模型时代的机器是会「思考」的，机器正从「自动（Automation）」走向「自主（Autonomy）」。自主，是允许人类只需要简单地交代任务目标、约束条件和可用工具，就能让机器开始处理任务。这里人类被解放的生产力，是人类「显式定义细节」的工作量。机器自主化，将人类从显式定义细节的劳动中解放。&lt;/p&gt;

&lt;p&gt;类似地，以前基于抢跑策略、各种技术分析的统计套利策略、基本面多因子模型等等构建的「显式定义细节」的量化交易模式，也会在大模型时代逐渐被干掉，而未来所衍生出来的黑盒化地交易策略很可能是无法被人类直观理解的。&lt;/p&gt;

&lt;h3 id=&quot;4如何过渡到自主化&quot;&gt;4、如何过渡到自主化？&lt;/h3&gt;

&lt;p&gt;在一个具体场景中，如果原有的链路包括 20 个环节，曾经有 15 种工具产品在帮助解决其中 15 个环节的问题。那么每个环节如果投入可以 cover 成本，则可以存在一个创业公司的机会。或者「羊毛出在猪身上」的逻辑下，环节 A 不太挣钱，但是能帮助获客 or 提高访问频次（促活）or 刚需 …… 环节 B 可以赚钱，且 A 和 B 存在联动关系。比如一般在集市型的电商平台上开店是不花钱的，例如淘宝、亚马逊、拼多多，但是想大量获客，一般都需要广告投放。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而自主化，就是让用户更少的关注细节，提高经营维度。比如商家运营一个电商带货直播间，商家希望我只负责提供货的信息、直播投流预算，然后就等着处理订单就好了，中间的直播环节都不想碰，这时候商家可以去找一个 MCN 机构来解决，也可以找一个数字人解决方案公司来搞定。更进一步的，商家连货都不想管，最好 MCN 把选品也给我做了，甚至直播间的人设定位、粉丝运营、蓄水预告等等也都做了。&lt;/p&gt;

&lt;p&gt;那么从哪个环节切入，来做一个自主化 AI 搭档呢？要从价值厚的环节切入，因为价值薄的环节，会被价值厚的环节吃掉，但反过来则不可能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把「做价值厚的环节」和「模型时代产品的领域颗粒度要粗」结合起来，就要具体回答：哪个环节是价值厚的？围绕这个价值厚的环节，我们应该把哪些上下游也打包起来？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此在「模型时代」创业的核心，是对于目标行业，要能犀利判断哪个环节是（对客户来说是）价值最厚的，然后切入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且这个价值最厚，还需要兼具可以形成数据飞轮的可能性，否则就会被通用大模型的泛化能力威胁到。因此，垂直领域 + 切入价值最厚环节 + 适当加粗领域颗粒度。而逐渐能够让颗粒度更粗、人类被更加解放，则需要循序渐进把握好这个颗粒度，这不是科学，而是与对目标客户的洞察有关。&lt;/p&gt;

&lt;h2 id=&quot;五谁会把握住最佳切入点是什么to-b-领域&quot;&gt;五、谁会把握住？最佳切入点是什么？（To B 领域）&lt;/h2&gt;

&lt;h3 id=&quot;1to-b-领域生成式-ai-创业团队的五大能力维度要求&quot;&gt;1、To B 领域生成式 AI 创业团队的五大能力维度要求&lt;/h3&gt;

&lt;p&gt;对一个垂直行业，能够在某个价值厚的单点的预测能力上深入，并能够用商业自主化的理念串联多个环节为一条线，是本次 Gen-AI 对 Startups 的技术壁垒、商业落地的要求。这通常需要相应团队具备如下 5+1 的能力：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;深入垂直行业的 Know-How：非常了解过往服务目标客户的生态。&lt;/li&gt;
  &lt;li&gt;深入客户经营的 Know-How：非常了解客户是怎么做他的生意的。&lt;/li&gt;
  &lt;li&gt;相应行业的 to B 应用技术栈能力。&lt;/li&gt;
  &lt;li&gt;目标场景所需要的 AI 研发能力。&lt;/li&gt;
  &lt;li&gt;产品、技术、业务三者的整合能力。&lt;/li&gt;
  &lt;li&gt;可选能力：在信息时代参与过目标行业的数字化应用，踩过坑。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2copilot-as-a-service-在千行百业打造超级个体&quot;&gt;2、Copilot as a Service 在千行百业打造超级个体&lt;/h3&gt;

&lt;p&gt;在一个垂直领域，一旦 AI 应用能够切入价值最厚环节，能充当好 Pilot 角色的部分人类，就能在 Copilot 的加持下，伴随 AI 技术发展逐渐进化为「超级个体」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/26/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而每一个能够帮助人类进化为超级个体的数字化应用，都有价值。但群雄逐鹿，最终走出来的一定是切入价值最厚环节，并伴随技术边界的拓展，不断发展能力边界（吃到技术红利）的数字化应用。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.mikecaptain.com/2023/04/19/eight-alls-for-understanding-and-shaping-the-ai-era/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.mikecaptain.com/2023/03/06/captain-aigc-2-llm/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mp.weixin.qq.com/s/haf_mB2Fr0d2Xa3Ra2geyg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://arxiv.org/abs/2304.03442&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.mikecaptain.com/2023/03/24/chatgpt-plugin/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/Significant-Gravitas/Auto-GPT&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/reworkd/AgentGPT&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://arxiv.org/abs/2303.17580&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mp.weixin.qq.com/s/tjPEFApzdLjn2Y7iz8O77A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://www.gov.cn/xinwen/2019-01/25/content_5361065.htm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/seanpixel/Teenage-AGI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://huggingface.co/docs/transformers/transformers_agents&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://mp.weixin.qq.com/s/nHTXdzdDfPQ4Tv6rTIqDJg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/Significant-Gravitas/Auto-GPT)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/microsoft/JARVIS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://huggingface.co/spaces/microsoft/HuggingGPT&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/yoheinakajima/babyagi&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.forbes.com/sites/lanceeliot/2023/04/04/using-chatgpt-to-control-and-leverage-other-ai-apps-such-as-hugging-face-gets-you-hugginggpt-prompting-eyebrow-raising-by-ai-ethics-and-ai-law/?sh=788ad875a6f7&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="ai" /><category term="copilot" /><category term="captain" /><category term="麦克船长" /><category term="船长" /><category term="Copilot as a Service" /><category term="超级个体" /><category term="to b" /><category term="llm" /><category term="大模型" /><category term="Auto-GPT" /><category term="model" /><category term="EntrepreneurGPT" /><category term="AgentGPT" /><category term="预测" /><category term="Autonomous AI" /><category term="Autonomy" /><category term="hallucination" /><category term="knowledge cutoff" /><category term="GPT-4" /><category term="GPT" /><category term="ChatGPT" /><category term="OpenAI" /><category term="BabyAGI" /><category term="Baby AGI" /><summary type="html">最近对于本轮生成式 AI 浪潮的讨论，进入了一个新阶段，大家从模糊地认为是巨大变革，逐渐开始探讨具体的变革机会点。我想讲讲自己对于本轮技术变革，在 to B 领域的一些基本观点。这些基本观点，是有争议的、非共识的，但我想有必要输出，以换来更多朋友与我的交流碰撞。</summary></entry><entry><title type="html">【摘录】投资中的节奏与结构 | 42章经</title><link href="https://www.mikecaptain.com/2023/06/21/super-identity/" rel="alternate" type="text/html" title="【摘录】投资中的节奏与结构 | 42章经" /><published>2023-06-21T12:00:13+08:00</published><updated>2023-06-21T12:00:13+08:00</updated><id>https://www.mikecaptain.com/2023/06/21/super-identity</id><content type="html" xml:base="https://www.mikecaptain.com/2023/06/21/super-identity/">&lt;ul&gt;
  &lt;li&gt;本文作者：张津剑&lt;/li&gt;
  &lt;li&gt;文章摘自：&lt;a href=&quot;https://mp.weixin.qq.com/s/1bwTtJBi4vF5DEsLWFkAKw&quot;&gt;微信公众号「42 章经」《投资中的节奏与结构 42章经》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从第一篇经典的 投资中的信号与噪声 以来，绿洲资本合伙人张津剑已陆续在 42章经 发表了三篇原创文章（其余两篇为 投资决策中的信噪比 和 投资中的周期与载波）。这三篇文章从 2018 年至今，可谓是横跨了周期，也启发了很多投资行业的从业者。&lt;/p&gt;

&lt;p&gt;这几年来一级市场经历了很多波峰和波谷，在市场中剔除噪声寻找信号也变得越来越难，而在很长时间的沉寂后，AI 是否能带来市场的复苏，大模型和应用层等未来到底会有多大的机会，我们如何再用信号处理的视角来判断当下的市场呢？&lt;/p&gt;

&lt;p&gt;这些都能在本文，亦即本系列的第四篇文章中找到答案，相信这系列文章的回归，也能带给更多老朋友们大展拳脚的信心。&lt;/p&gt;

&lt;p&gt;熟悉我（以下指张津剑）的朋友都知道，2012 年以前我修过 7 年的雷达，专注在信息工程领域，研究信号与噪音的处理。2012 年之后，我加入挚信资本学习投资，7 年之后创办绿洲，前后加在一起 11 年了。&lt;/p&gt;

&lt;p&gt;在这 11 年的投资过程中，我遇到过很多问题，回头来看，这些问题都可以归为两类，一类是节奏性问题，一类是结构性问题。这两类问题的区别在于驱动问题的是随机性的外因，还是结构性的内因。&lt;/p&gt;

&lt;p&gt;我举个例子：有个创始人，和合伙人三天一小吵、五天一大吵。最开始找我咨询与合伙人交流的经验，后来竟然去上了一个补习班，学习如何高效沟通。在他看来，每次吵架的原因都是不一样的，有的因为投放策略，有的因为招人，看上去都是随机性外因。其实在我来看，本质是他与合伙人之间价值观不同、目标不一致导致的结构性内因。他不需要学习沟通技巧，而是需要和合伙人坦诚沟通，面对价值观和目标差异的现实和真相。&lt;/p&gt;

&lt;p&gt;再比如有个创始人做了款产品，市场前景光明，需求明确，但市场低迷，政策监管不清晰，于是他认为这是产业的结构性内因，问投资人：是否应该换方向？但这个问题可能不是结构性问题，而是随机性外因造成的节奏性问题。&lt;/p&gt;

&lt;p&gt;所以生活中的诸多烦恼，很多是因为我们误判了问题的节奏性和结构性，进而做出错误的行为：该面对的时候没有面对，该坚持的时候没有坚持。&lt;/p&gt;

&lt;p&gt;回到大家最关注的 AI 领域。在过去半年多的时间里，绿洲是这个领域最积极、出手最频繁的基金之一，我们投资了不少 AI 公司，也感受到不少焦虑：算力限制下，中国大模型行不行？头部公司很多，Open AI 都亲自下场，创业公司还有没有机会？诸如此类。那么这些问题是节奏性还是结构性？我们应该直面真相，还是坚守初心?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这让我想起德鲁克说过的观点，大概意思是企业家的核心能力就是将外部变化转换为内部机遇&lt;/strong&gt;。所以忽略节奏性问题，抓住结构性变化就是核心。那我们应该如何做呢？&lt;/p&gt;

&lt;p&gt;我们先换个视角来看这个问题。过去提到工业革命，教科书里有一句话——瓦特改良蒸汽机。读起来，感觉就像他晚上刷了一晚上小红书，早上起来就改良了。当然不可能，但是我们作为人思考问题，总是喜欢将注意力集中在变化最大的地方，就是我们日常说的高光时刻：浪子回头，英雄救美，立地成佛，我们期待某种“大绝招”式的发展。&lt;/p&gt;

&lt;p&gt;然而世界从来不是戏剧性的「大绝招」，而是结构性的「日拱一卒」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;事实上，瓦特改良蒸汽机是一段接近 30 年的历史，这个过程充满曲折。1763 年，瓦特受托改良一台蒸汽机，在之后长达 6 年的时间里，他才有了一些突破。大家可以想象，那时候的蒸汽机看起来很美好，用起来很糟糕，就像今天的大模型。这里面有两个原因，一是效率极低，二是能耗极高。但蒸汽机在那个时代很时髦，大家也都在寻找改良的办法，瓦特就是其中之一，一直到 1790 年他才完成全部改良，整整 27 年。&lt;/p&gt;

&lt;p&gt;同时代有一个人，叫斯密顿，他在后期对工业革命有很多贡献。但即使是他，在早年看瓦特蒸汽机时，依然提出了很多质疑，认为蒸汽机效率太低，可行性不高。&lt;strong&gt;到 1779 年，瓦特蒸汽机的作用逐渐体现出来，英国又爆发了卢德运动。卢德运动是什么？是工人说工业革命抢了他们的饭碗，他们认为社会不应该拥抱工业革命。大家试想，卢德运动过去发生过，未来还会发生吗？工人拼了命想保证饭碗，认为机器是竞争对手，这在今天看来挺可笑，如果回到当年呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;工业革命能不能继续下去？今天看来很简单的问题，当年却受到社会广泛质疑。27 年里，瓦特一步步改良他的蒸汽机，但整个社会层面的质疑从来没有停止过。1781 年，蒸汽机的效率大幅提升，依然有知名化学家质疑能源消耗太大、效率太低。所以如果我们回顾科技发展史，革命性产品从来不是想象中的灵光一现或万众瞩目。科技发展史从来都是以年为单位的日拱一卒。&lt;/p&gt;

&lt;p&gt;如果我们在场的创业者、投资人生活在那个时代，都把时间精力花在追逐蒸汽机每天的改良上，我们注定是焦虑的，就像我们今天专注在大模型的进展上一样。因为回头来看，这些都是节奏性问题，我们真正应该花时间的是思考这些科技带给整个社会的结构性改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;展开一百多年工业革命的历史，1763 年可能瓦特自己都不知道即将承载什么使命。当他拿到蒸汽机，那神圣的第一步开始，会给社会带来多大的结构性改变：之后的 80 年里，英国纺织品产量翻了 50 倍。蒸汽机改良之前，所有纺织生产者都是小家庭、小作坊，太太给丈夫孩子编织衣服。&lt;strong&gt;工业革命之前没有冗余劳动力，正因如此，没有商品的概念。没有商品，也不存在买卖。没有买卖，也就没有整个零售产业。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再看交通产业，工业革命后 100 年的历史，或者钢铁产业后 150 年的历史，都发生了迅猛的增长。如果拉开历史，工业革命还有十几个大产业在缓缓展开。而这一切，都始于 1763 年瓦特拿到改良蒸汽机的订单。&lt;/p&gt;

&lt;p&gt;退回 1763 年，你是创业者，你是投资人，你真的需要关注蒸汽机有什么进展吗？真的需要关注效率和能耗问题吗？这些问题真的重要吗？今天在场的每一个人真正应该花时间去思考：&lt;strong&gt;我是纺织业的人，还是零售行业的人。在巨大的浪潮里，社会的结构性机会到底是什么？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以太多人强调科技的节奏性问题，而忽略了社会的结构性变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里我不得不提一下，像瓦特这般神人，第一次创业时因为找错合作伙伴，也失败破产了。然后重新找了投资人和合伙人，才在纺织行业卖了 1165 台蒸汽机，赚了钱。神如瓦特都得创业两次，所以无论投资人还是社会，都是需要对巨浪下的创业者有更多耐心。&lt;/p&gt;

&lt;p&gt;工业革命这段历史可能对大家太遥远，那我们聊聊移动互联网时代。移动互联网的关键词：“iPhone 时刻”。有了 iPhone 才有了今天的移动互联网，但这个时代诞生的优秀公司，是科技带来的吗？其实不是，和工业革命一样，他们都是受益于科技革命带来的整个社会结构的变化的公司。&lt;/p&gt;

&lt;p&gt;和蒸汽机一样，如果我们只关注智能手机，看到的全是节奏性问题：2010 年 iPhone 4 上线，很多人说这是一个不能打电话的手机，因为它深陷于“天线门”危机。如果我们再往前看看 2008 年博主是怎么评判 iPhone3G 的，当年排名第一的差评竟然是手机不能换电池！那个诺基亚和摩托罗拉的时代，换电池是手机的标配，2009 年居然还有个得奖配件——在 iPhone 后面装了一个巨大无比的太阳能板，认为有了这个 iPhone 就可以长时间续航了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当时仿佛很严重的续航、算力、流量问题，今天你觉得这些有价值吗？在历史长河里，我们纠结的很多问题不过是节奏性问题。然而就在 iPhone4 上市那年，就是所有人质疑这不是一个手机而是一个砖头的那一年，微信成立了，小米成立了，美团成立了。之后的五年时间里，每一年都能去创办一个优秀的公司，每一年里也都可以投到一个优秀的公司。2010 年之后有快手、滴滴、头条、米哈游。即使我们可能以为是很后期才出现的小红书，其实在 2013 年就成立了。&lt;/p&gt;

&lt;p&gt;2015 年，资本寒冬，巨头合并，滴滴快的合并、美团点评合并、携程去哪儿合并，大家可能在想是不是巨头合并就没有机会了。实际上呢？那年王者荣耀出现了，拼多多成立了。即使你此刻才认定谁是龙头，在 2015 投资合并后的美团点评，到 2021 年依然有超过 20 倍的回报，年化超过 60%。所以很多时候节奏性问题在历史长河中微不足道，重要的是我们是否去关注科技带来的社会机遇。&lt;/p&gt;

&lt;p&gt;我经常在想，如果 AI 是工业革命级别的变革，那这个科技会带来哪些社会机遇？哪个产业是工业革命的纺织业？哪个产业是移动互联网的餐饮行业、出租车产业？&lt;/p&gt;

&lt;p&gt;在过去的投资生涯中，每当遇到问题，我都尝试从我学过的信息工程中寻找答案。我喜欢信号和噪声的处理方法，因为它有一种魅力，就是复杂的问题往往可以用简单的公式来表征，而这个简单的公式里面藏着简单、常识和美感。这也是我一直以来的相信：最简单的道理往往能解决最复杂的问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要思考这个问题，我们可以引入通讯里的一个概念叫“阻抗”。每一种介质都有对应的“阻抗”，所以信号在不同阻抗的介质中传播时，遵循一个很朴实的道理：介质之间阻抗相同，信号高效传播，无论介质是空气还是水，亦或者大理石，只要阻抗一样，信号就能无损传播。&lt;/p&gt;

&lt;p&gt;相反，阻抗不一样，信号就不同程度地反射，阻抗相差越大，反射就越大。所以调节信号传播效率的过程，就是一个阻抗匹配的过程。&lt;/p&gt;

&lt;p&gt;其实这个和我们沟通很像，&lt;strong&gt;每个人因为认知结构不同，接受和传输信息的“阻抗”也不同，而沟通的过程就是一个“阻抗”匹配的过程，也就是我们说的“同理心”。相反，和没有同理心的人沟通，就是鸡同鸭讲，牛头不对马嘴，全是反射。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实产业也有阻抗，科技行业变化很快，信息很高效，这是阻抗低的表现，所以自然也是社会中阻抗低的产业先接收到信号。同样材料的介质，材料分布越是匀均，阻抗越低。同理，我认为产业也是一样，&lt;strong&gt;产业中的每个参与者，分布越是均匀且单点对整体的影响越小，阻抗越低。譬如纺织业，在工业革命之前，就是遍布英国本土每一寸土地的小家庭作坊构成的产业。这也类似于移动互联网时期出租车、餐饮和小商品卖家，他们都是散点的。反过来，也可以理解互联网发展为什么先发展消费互联网，然后才是产业互联网，因为产业互联网的阻抗更高。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个产业、一个公司、一个人都是如此。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;低阻抗的状态是“开放”的、“透明”的、“柔软”的；高阻抗的状态是“保护”的、“约束”的、“僵硬”的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当我们认为某个事物“一定”要按照某种方式去发展和组织的时候，阻抗就在不经意间升高了。而这背后，就是我们给了自己太多前提假设和约束条件。而这些条件成为的“执念”，在不经意间影响了我们的选择和判断。&lt;/p&gt;

&lt;p&gt;我们经常说&lt;strong&gt;投资的过程就是一个去噪的过程，因为信号一直在那里，不是你看不见信号，而是噪声太多，蒙蔽了你的接收器。这个噪声就是前提假设，就是「执念」&lt;/strong&gt;。我们创业、投资都有太多的噪声：假设算力是大模型的瓶颈，中国人可能没办法突破；假设计算成本太高，大规模的普及还早。这些都是噪声，甚至假设大模型、假设应用，也都是噪声，如果去掉这些噪声，绿洲看到了什么信号？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;绿洲看到了一个 AI 驱动的“超级个人创造者”时代。中国为什么没有好莱坞？不是因为中国没有好导演、好演员，而是中国没有好莱坞的工业化的制作流程，好导演要自己去搭建团队，构建整个影视供应链。在好莱坞只要有好的想法，就有成熟的体系去支持你。&lt;/p&gt;

&lt;p&gt;为什么中国没有日本那样层出不穷的动漫作品，不是因为没有好的 IP，是没有日本几十年培养起来的完善的动漫供应链体系，所以没有办法把好的 IP 和想法变成优秀的作品。而随着 AI 时代的到来，每一个人都会成为“超级个人创造者”，你只要有想法，你可以拥有：星海城级别的背景美术；宫崎骏级别的人物与叙事；富野由悠季级别的编剧；大河原邦男级别的机设。世界上这些大师经验会以 Bot 的形式为你服务。只要你想，就能创造。这就是我们看到的信号。&lt;/p&gt;

&lt;p&gt;所以，我们不是在投资应用或者模型，我们投的是那些为未来个人创造时代服务的基础设施。这些基础设施当然会有一些特点，例如：&lt;/p&gt;

&lt;p&gt;1、设施都是全球化的&lt;/p&gt;

&lt;p&gt;AI 时代跨越了语言的限制之后，只有当地经验，没有当地专家。专家系统会以 Bot 的形式不受空间和时间的限制，你过去的老师是当地最好的，之后的老师是全球最好的，未来的老师是历史上最好的，即使他已经去世，我们也可以通过他的作品还原出来。&lt;/p&gt;

&lt;p&gt;2、设施的服务对象是人与 Bot&lt;/p&gt;

&lt;p&gt;未来基础设施的服务对象不仅仅是人，还包括 Bot。过去，是“服装” APP 根据你的喜好推荐搭配，APP 是平台，人是服务对象。未来，你会训练了解你生活喜好的 Bot 为你 24 小时全球发现各种搭配，再推荐你下单。这个阶段，“逛”小红书的不一定是个人，TA 可能是个 Bot。所以那个阶段的基础设施必须具备服务 Bot 的能力，因为相比人，Bot 的“注意力”是无限的。&lt;/p&gt;

&lt;p&gt;关于我们理解的基础设施，还有很多特点，未来有机会再展开分享。其实这些答案同样在每个人的心中，只是“执念”蒙蔽了他们。&lt;/p&gt;

&lt;p&gt;这个去掉“执念”，去掉噪声的过程，不禁让我想起老子说过的一句话：“为道日损”。就是说“道”本来就在那里，是你心中的“我”阻碍了你看见“道”，你只要不断通过“损”的方式放下“自我”，你自然就入道了。结合今天的分享，我想加上一句，“去伪存真”。因为真理从来都在我们内心，相反我们吸收了太多的噪声，来自于身边人，来自于社会，他们是“做人做事”的方法，他们是你 20 岁、30 岁、40 岁应该知道的“道理”，但这些本质上都是前提假设，都是约束条件，都是噪声，去掉它们，“真”自然会显现出来，我们自然会被时代感召，与大道圆融。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/06/21/640-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讲了这么多，希望大家在这个信息爆炸的年代，做一个低阻抗有同理心的人，不要因为节奏性问题忽略了社会的结构性机会，放下执念和前提假设，去掉噪声，保存道心。&lt;/p&gt;

&lt;p&gt;最后的最后，希望大家能回到朴实的生活里，保持善良、保持欢喜、保持生命力。这也是绿洲成立的初心：参赞生命力。谢谢大家。&lt;/p&gt;</content><author><name>张津剑</name></author><category term="ai" /><summary type="html">从第一篇经典的 投资中的信号与噪声 以来，绿洲资本合伙人张津剑已陆续在 42章经 发表了三篇原创文章（其余两篇为 投资决策中的信噪比 和 投资中的周期与载波）。这三篇文章从 2018 年至今，可谓是横跨了周期，也启发了很多投资行业的从业者。</summary></entry><entry><title type="html">麦克船长解读 LIMA 的表面对齐假设：少量多样性、高质量数据即可实现更好的对齐</title><link href="https://www.mikecaptain.com/2023/05/26/captain-lima/" rel="alternate" type="text/html" title="麦克船长解读 LIMA 的表面对齐假设：少量多样性、高质量数据即可实现更好的对齐" /><published>2023-05-26T15:40:13+08:00</published><updated>2023-05-26T15:40:13+08:00</updated><id>https://www.mikecaptain.com/2023/05/26/captain-lima</id><content type="html" xml:base="https://www.mikecaptain.com/2023/05/26/captain-lima/">&lt;p&gt;&lt;img src=&quot;/img/src2/2023/05/26/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5 月 22 日 LeCun 发推	称：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LIMA: LLaMA 65B + 1000 supervised samples = {GPT4, Bard} level performance. From @MetaAI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是来自 Meta AI、卡耐基梅隆大学、南加州大学和特拉维夫大学的研究人员近期发表的一篇论文，他们通过训练 LLaMA 的 650 亿参数版本得到的 LIMA（Less Is More for Alignment）来衡量这两个阶段的相对重要性，比较 LIMA 和其他模型（DaVinci003、BARD、Claude、GPT-4）的结果来评价模型表现，评价方式一是通过人工，二是通过 GPT-4。从结果来看，LIMA 展现了强大的性能。研究人员提出了「表面对齐假设（Superfacial Alignment Hypothesis）」，&lt;strong&gt;这些实验结果强烈地表明，大型语言模型中几乎所有的知识都是在预训练阶段学到的，只需要有限的指令微调数据，就可以教会模型产生高质量的输出&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;一大语言模型的两个训练阶段&quot;&gt;一、大语言模型的两个训练阶段&lt;/h2&gt;

&lt;p&gt;麦克船长在 2023 年 3 月初的&lt;a href=&quot;https://www.mikecaptain.com/2023/03/06/captain-aigc-2-llm/&quot;&gt;《人工智能 LLM 革命破晓：一文读懂当下超大语言模型发展现状》&lt;/a&gt;一文中提到过，当下大语言模型（Large Language Models，LLMs）的训练范式已经到了第三阶段。这个阶段的主要范式是「预训练-人工反馈强化学习-提示（Pre-train, RLHF and Prompt）」和「预训练-人工反馈强化学习-微调-提示（Pre-train, RLHF, Fine-tune and Prompt）」：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;预训练-人工反馈强化学习-提示（Pre-train, RLHF and Prompt）学习范式&lt;/strong&gt;：RLHF 方法最早由 OpenAI 在 2017 年论文《Deep reinforcement learning from human preferences》中提出，后来 GPT-2、GPT-3 相继发布后出现了虚假新闻、教唆犯罪、消极暗示等大量使用 GPT 系列的负面案例，于是 OpenAI 开始重视 Alignment 并最终在 2022 年上半年的 InstructGPT 上引入 RLHF 方法对齐人类道德伦理，起到很好的效果，后来这也被迭代回了 GPT-3 中以保障 API 调用时遵循人类道德伦理观念。这套范式也被用于大家熟悉的 ChatGPT 中，成为了目前的主流范式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于特定领域应用，也可以下游的 fine-tune，以期进一步提升效果，即如下范式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;预训练-人工反馈强化学习-微调-提示（Pre-train, RLHF, Fine-tune and Prompt）学习范式&lt;/strong&gt;：预训练-人工反馈强化学习，都是上游阶段，微调和提示属于下游阶段。目前提供 fine-tune 的 GPT API 背后的 GPT 模型也是有 RLHF 的，已经不是最初没有考虑 alignment 的 GPT 版本了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到，目前大预言模型（LLM）的训练有两个阶段：预训练（Pre-train）和微调（Fine-tune）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;预训练：从原始文本直接进行无监督训练。&lt;/li&gt;
  &lt;li&gt;微调：通过大规模指令微调（Instruction Tuning）和强化学习，更好地对齐下游任务和用户偏好。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/05/26/1.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图是 LIMA 与其他模型的对比实验结果，我们可以看到：用 1K 条数据微调 LLaMA-65B 得到的 LIMA，打败了用 52K 数据微调 LLaMA-65B 的 Alpaca（作者按照 Stanford 在 LLaMA-7B 上训练的方法自己微调了 LLaMA-65B 的版本）；没有 RLHF（人工反馈强化学习，Reinforcement Learning with Human Feedback）的 LIMA 打败了有 RLHF 的 DaVinci003；不过 LIMA 性能还是显著不如 Google 的 BARD、Anthropic 的 Claude、OpenAI 的 Claude。但研究团队认为，这依然还是很具有突破性的发现，因为 LIMA 用了少得多的微调数据，以及没有 RLHF。&lt;/p&gt;

&lt;h2 id=&quot;二论文的关键内容&quot;&gt;二、论文的关键内容&lt;/h2&gt;

&lt;h3 id=&quot;1lima-的训练方法&quot;&gt;1、LIMA 的训练方法&lt;/h3&gt;

&lt;p&gt;LIMA 的训练方法主要包括以下步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从预训练的大型语言模型（如 GPT-3 或 GPT-4）开始。&lt;/li&gt;
  &lt;li&gt;选择一组高质量的人工标注示例，这些示例包括用户提示和模型应该生成的理想响应。&lt;/li&gt;
  &lt;li&gt;使用这些示例对模型进行微调。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2lima-所用的数据&quot;&gt;2、LIMA 所用的数据&lt;/h3&gt;

&lt;p&gt;下图是论文中给出的数据，文中提到的对预训练好的模型进行 Training 其实是我们一般所说的 Fine-tuning。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src2/2023/05/26/2.png&quot; alt=&quot;&quot; width=&quot;560&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;训练数据集training&quot;&gt;训练数据集（Training）&lt;/h4&gt;

&lt;p&gt;其中微调数据一共 1000 条，共约 75 万个 tokens，包括有 750 条来自各类数据源的数据（如下），以及 250 条来自作者自己编写的数据。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;论文中将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stack Exchange&lt;/code&gt; 分为两类：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STEM&lt;/code&gt;（科学、技术、工程和数学）和其他类别。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wikiHow&lt;/code&gt; 是一个在线的 wiki，有超过 240,000 篇 how-to 文章，内容质量非常高。作者们从中采样了 19 个类别的共 200 篇文章。具体地，先采样 1 个类别，然后在该类别内采样 1 篇文章以确保多样性。作者们用标题作为 Prompt（比如「如何煎煮鸡蛋？」），用文章正文回应，用「The following answer …」替换「This article …」，并预处理了链接、图片和文本的某些部分，这些预处理和 prompt 改写方式可以作为我们日常处理数据方法的参考。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pushshift r/WritingPrompts&lt;/code&gt; 是指从 Reddit 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WritingPrompts&lt;/code&gt; 论坛收集的 150 个数据（问题和答案）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Natural Instructions&lt;/code&gt; 数据来源于一篇名为&lt;a href=&quot;https://arxiv.org/pdf/2204.07705.pdf&quot;&gt;《Super-Natural Instrctions: Generalization via Declarative Instructions on 1600+ NLP Tasks》&lt;/a&gt;的论文（Wang et al., 2022b）。这篇论文中的数据集包含了大量的自然语言生成任务，如摘要、改写和风格转换等。在这篇论文中，作者从「Super-Natural Instructions」数据集中选择了 50 个自然语言生成任务，并从每个任务中随机选择一个示例。这些示例稍微进行了一些编辑，以使其符合论文作者手动编写的 200 个示例的风格。尽管「Super-Natural Instructions」数据集中的任务的分布可能与潜在用户提示的分布不同，但作者直觉是这小部分样本增加了整体训练示例的多样性，可能会增加模型的鲁棒性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;开发数据集dev&quot;&gt;开发数据集（Dev）&lt;/h4&gt;

&lt;p&gt;是用于在训练过程中调整模型参数的数据集。在这篇论文中，使用了 50 个作者提供的开发集数据。开发集数据都是用在训练过程中进行性能评估和微调，防止模型过拟合。这样可以在不触碰测试集的情况下，在训练过程中监控和调整性能。&lt;/p&gt;

&lt;h4 id=&quot;测试数据集test&quot;&gt;测试数据集（Test）&lt;/h4&gt;

&lt;p&gt;论文中测试数据集由两部分组成：Pushshift r/AskReddit 和 Paper Authors (Group B)，一共 300 个 prompts。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pushshift r/AskReddit&lt;/code&gt;：包含了 70 个提示，来自 Reddit 社区下的主题论坛「AskReddit」。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paper Authors (Group B)&lt;/code&gt;：包含了 230 个提示，由作者手动编写。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试数据集的目的是评估模型的性能。&lt;/p&gt;

&lt;h3 id=&quot;3评估效果&quot;&gt;3、评估效果&lt;/h3&gt;

&lt;p&gt;作者们把 1000 组数据微调的 LLaMA-65B 和 OpenAI 的 DaVinci003、Stanford 基于 LLaMA-65B 用 52K 数据微调的 Alpaca、GPT-4、Anthropic 的 Claude、 Google 的 Bard 这些模型进行对比。在对比的情况下，GPT-4、Claude、Bard 领先的还是很明显的。但是在对 LIMA 进行的结果通过人类进行绝对评估（非相对比较的），发现 88% 的 LIMA 回应内容满足提示要求，50% 的回应内容被认为是优秀。&lt;/p&gt;

&lt;p&gt;对于对话能力的评估，尽管 LIMA 在训练数据中没有对话示例，但作者们发现它能够进行连贯的多轮对话。并且，只需在训练集中添加 30 个手工制作的对话链，就可以显著提高这种能力。&lt;/p&gt;

&lt;h3 id=&quot;4消融实验为什么可以做到-less-is-more-for-alignment&quot;&gt;4、消融实验：为什么可以做到 Less Is More for Alignment？&lt;/h3&gt;

&lt;p&gt;作者针对数据多样性、数据质量、数据量设计了消融实验（Ablations）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;数据多样性（Data Diversity）&lt;/strong&gt;：作者们比较了使用 Quality 过滤的 Stack Exchange 数据（具有 heterogeneous prompts、优秀的回应内容）和 wikiHow 数据（具有 homogeneous prompts、优秀的回应内容）进行训练的效果。结果显示，更多样化的数据产生了显著更高的性能。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据质量（Data Quality）&lt;/strong&gt;：比较没有任何质量或风格过滤的 Stack Exchange 数据上训练的模型与在过滤后的数据集上训练的模型，结果显示差距显著。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据量（Data Quantity）&lt;/strong&gt;：仅增加数据量而不增加提示的多样性，对模型的性能提升有限。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5结论&quot;&gt;5、结论&lt;/h3&gt;

&lt;p&gt;作者提出了一个「表面对齐假设（Superfacial Alignment Hypothesis）」，即只需要少量精心挑选的示例就能实现对齐，而不需要大量的数据或复杂的方法。也就是说，即使只使用少量的训练数据，也能达到与使用大量数据的模型相当的性能。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://twitter.com/ylecun&lt;/li&gt;
  &lt;li&gt;https://arxiv.org/abs/2305.11206&lt;/li&gt;
  &lt;li&gt;https://arxiv.org/abs/2204.07705&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦克船长</name></author><category term="ai" /><category term="LIMA" /><category term="Meta" /><category term="LLaMA" /><category term="Alignment" /><category term="fine-tune" /><category term="training" /><category term="pre-train" /><summary type="html">在这篇论文中，作者使用这个测试数据集来评估他们的模型 LIMA（Less Is More for Alignment）的性能，并将其与其他的语言模型进行比较。他们发现，尽管 LIMA 只在1000个示例上进行了微调，但它的性能仍然优于其他的语言模型。</summary></entry><entry><title type="html">麦克船长的全栈指南：Google Flutter 开发跨平台 APP</title><link href="https://www.mikecaptain.com/2023/04/29/captain-flutter-1/" rel="alternate" type="text/html" title="麦克船长的全栈指南：Google Flutter 开发跨平台 APP" /><published>2023-04-29T16:10:13+08:00</published><updated>2023-04-29T16:10:13+08:00</updated><id>https://www.mikecaptain.com/2023/04/29/captain-flutter-1</id><content type="html" xml:base="https://www.mikecaptain.com/2023/04/29/captain-flutter-1/">&lt;p&gt;&lt;strong&gt;本文目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#第一章--准备与-first-step&quot; id=&quot;markdown-toc-第一章--准备与-first-step&quot;&gt;第一章 · 准备与 First Step&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第-1-节--环境配置与-hello-world&quot; id=&quot;markdown-toc-第-1-节--环境配置与-hello-world&quot;&gt;第 1 节 · 环境配置与 Hello World&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-2-节--first-step在-macos-平台跑第一个-app&quot; id=&quot;markdown-toc-第-2-节--first-step在-macos-平台跑第一个-app&quot;&gt;第 2 节 · First Step：在 macOS 平台跑第一个 App&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-3-节--在-ios-平台设备及模拟器上跑起第一个-app&quot; id=&quot;markdown-toc-第-3-节--在-ios-平台设备及模拟器上跑起第一个-app&quot;&gt;第 3 节 · 在 iOS 平台（设备及模拟器）上跑起第一个 App&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-4-节--在-android-平台跑起第一个-app&quot; id=&quot;markdown-toc-第-4-节--在-android-平台跑起第一个-app&quot;&gt;第 4 节 · 在 Android 平台跑起第一个 App&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-5-节--在-chrome-浏览器跑起第一个-app&quot; id=&quot;markdown-toc-第-5-节--在-chrome-浏览器跑起第一个-app&quot;&gt;第 5 节 · 在 Chrome 浏览器跑起第一个 App&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第二章--flutter-的开发理念与原理&quot; id=&quot;markdown-toc-第二章--flutter-的开发理念与原理&quot;&gt;第二章 · Flutter 的开发理念与原理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第-6-节--flutter-的开发框架和线程模型&quot; id=&quot;markdown-toc-第-6-节--flutter-的开发框架和线程模型&quot;&gt;第 6 节 · Flutter 的开发框架和线程模型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-7-节--flutter-的基础理念一切皆为-widgets&quot; id=&quot;markdown-toc-第-7-节--flutter-的基础理念一切皆为-widgets&quot;&gt;第 7 节 · Flutter 的基础理念：一切皆为 Widgets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-8-节--理解-flutter-的生命周期&quot; id=&quot;markdown-toc-第-8-节--理解-flutter-的生命周期&quot;&gt;第 8 节 · 理解 Flutter 的生命周期&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#81初始化阶段&quot; id=&quot;markdown-toc-81初始化阶段&quot;&gt;8.1、初始化阶段&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#82组件创建阶段&quot; id=&quot;markdown-toc-82组件创建阶段&quot;&gt;8.2、组件创建阶段&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#83触发组件-build&quot; id=&quot;markdown-toc-83触发组件-build&quot;&gt;8.3、触发组件 build&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#84组件的销毁阶段&quot; id=&quot;markdown-toc-84组件的销毁阶段&quot;&gt;8.4、组件的销毁阶段&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-9-节--platform-channel&quot; id=&quot;markdown-toc-第-9-节--platform-channel&quot;&gt;第 9 节 · Platform Channel&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-10-节--包管理&quot; id=&quot;markdown-toc-第-10-节--包管理&quot;&gt;第 10 节 · 包管理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-11-节--flutter-渲染原理&quot; id=&quot;markdown-toc-第-11-节--flutter-渲染原理&quot;&gt;第 11 节 · Flutter 渲染原理&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#111了解下-flutter-的三棵树&quot; id=&quot;markdown-toc-111了解下-flutter-的三棵树&quot;&gt;11.1、了解下 Flutter 的三棵树&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#112页面刷新时的操作流程&quot; id=&quot;markdown-toc-112页面刷新时的操作流程&quot;&gt;11.2、页面刷新时的操作流程&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第三章--flutter-组件介绍及应用&quot; id=&quot;markdown-toc-第三章--flutter-组件介绍及应用&quot;&gt;第三章 · Flutter 组件介绍及应用&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第-12-节--编写一个-news-app-练手&quot; id=&quot;markdown-toc-第-12-节--编写一个-news-app-练手&quot;&gt;第 12 节 · 编写一个 News App 练手&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#121下载-vscode-并创建-flutter&quot; id=&quot;markdown-toc-121下载-vscode-并创建-flutter&quot;&gt;12.1、下载 VSCode 并创建 Flutter&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#122flutter-项目文件结构&quot; id=&quot;markdown-toc-122flutter-项目文件结构&quot;&gt;12.2、Flutter 项目文件结构&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#123了解-dart-的一些基本语法&quot; id=&quot;markdown-toc-123了解-dart-的一些基本语法&quot;&gt;12.3、了解 Dart 的一些基本语法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#124flutter-程序入口-maindart&quot; id=&quot;markdown-toc-124flutter-程序入口-maindart&quot;&gt;12.4、Flutter 程序入口 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#125app-获取-http-请求的服务&quot; id=&quot;markdown-toc-125app-获取-http-请求的服务&quot;&gt;12.5、App 获取 Http 请求的服务&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#126app-的列表页&quot; id=&quot;markdown-toc-126app-的列表页&quot;&gt;12.6、App 的列表页&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#127app-的二级页面实现&quot; id=&quot;markdown-toc-127app-的二级页面实现&quot;&gt;12.7、App 的二级页面实现&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#128对练手-app-的整体回顾&quot; id=&quot;markdown-toc-128对练手-app-的整体回顾&quot;&gt;12.8、对练手 App 的整体回顾&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第-13-节--widget导航路由网络请求和项目发布&quot; id=&quot;markdown-toc-第-13-节--widget导航路由网络请求和项目发布&quot;&gt;第 13 节 · Widget、导航路由、网络请求和项目发布&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#131常用-widget&quot; id=&quot;markdown-toc-131常用-widget&quot;&gt;13.1、常用 Widget&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#132导航路由&quot; id=&quot;markdown-toc-132导航路由&quot;&gt;13.2、导航路由&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#133网络请求&quot; id=&quot;markdown-toc-133网络请求&quot;&gt;13.3、网络请求&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#134项目发布&quot; id=&quot;markdown-toc-134项目发布&quot;&gt;13.4、项目发布&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第四章--调试&quot; id=&quot;markdown-toc-第四章--调试&quot;&gt;第四章 · 调试&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第-14-节--启用-flutter-devtools&quot; id=&quot;markdown-toc-第-14-节--启用-flutter-devtools&quot;&gt;第 14 节 · 启用 Flutter DevTools&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#141性能分析performance&quot; id=&quot;markdown-toc-141性能分析performance&quot;&gt;14.1、性能分析（Performance）&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#142性能优化常见关注点以及一个常见的性能优化案例&quot; id=&quot;markdown-toc-142性能优化常见关注点以及一个常见的性能优化案例&quot;&gt;14.2、性能优化常见关注点以及一个常见的性能优化案例&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#附录&quot; id=&quot;markdown-toc-附录&quot;&gt;附录&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#flutter-doctor&quot; id=&quot;markdown-toc-flutter-doctor&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutter-create-hello_world-创建项目&quot; id=&quot;markdown-toc-flutter-create-hello_world-创建项目&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter create hello_world&lt;/code&gt; 创建项目&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutter-run-运行项目&quot; id=&quot;markdown-toc-flutter-run-运行项目&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter run&lt;/code&gt; 运行项目&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutter-devices&quot; id=&quot;markdown-toc-flutter-devices&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter devices&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutter-pub-get&quot; id=&quot;markdown-toc-flutter-pub-get&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter pub get&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#其他&quot; id=&quot;markdown-toc-其他&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第一章--准备与-first-step&quot;&gt;第一章 · 准备与 First Step&lt;/h2&gt;

&lt;h3 id=&quot;第-1-节--环境配置与-hello-world&quot;&gt;第 1 节 · 环境配置与 Hello World&lt;/h3&gt;

&lt;p&gt;Flutter 是 Google 推出的一套跨平台的终端开发框架，有中文社区及官方网站支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://flutter.cn/&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flutter 是为跨端而生，那么就要和船长一起了解下跨端这件事儿的演进历史。最早在万维网（World Wide Web，简称 WWW）出现后，第一个端就是 Web，其基础编程语言是 HTML。但是 HTML 不是一个图灵完备的语言，只是一个标记语言，就像它的名字一样（Hypter Text Mark Language）。为了展现不同的样式，配套出现了 CSS 用于控制 Web 的展现样式，其含义是 Cascading Style Sheets（层叠样式表）。而让 Web 活起来，不是死气沉沉的一对按钮、文字、段落 …… 则需要一款图灵完备的语言，可以随意控制 Web 上显示的各种组建，以及控制状态、数据，还有掌控逻辑流程等等，就配套地出现了 JavaScript。因此第一个阶段我们可以称其为 HTML 时代，始于 1993 年，其编程语言是 HTML+CSS+JS。这个阶段还只有桌面端，主要就是适配浏览器。&lt;/p&gt;

&lt;p&gt;第二阶段，是从移动互联网开始，大概在 2009 年前后，Android/iOS 平台出现，最初都是每个平台要维护一套代码的。但是很快，业界就在推动从原生开发到逐渐过渡到 Hybrid 混合模式（半原生半 Web），由原生提供一套统一 API 供 JavaScript 调用。因此核心的代码逻辑都是在 HTML+JS 中实现的，然后展示在 WebView 中（你可以理解为浏览器，iOS 和 Android 中都有 WebView）。这时候已经从为 iOS、Android 写多套代码过渡成一套代码维护了，虽然实现了跨平台，但是整体性能比较差。&lt;/p&gt;

&lt;p&gt;第三阶段，Facebook 推出 React Native，理念是「Learn Once, Write Anywhere」，用 JavaScript 语言、React 的设计模式、原生的界面渲染/动画/网络请求。开发者编写的 JS 代码通过 React Native 中间层转换为各平台原生代码，实现原生控件和操作。&lt;/p&gt;

&lt;p&gt;第四阶段，阿里巴巴在 2016 年推出 Weex，理念是「Write One, Run Anywhere」，也是用 JavaScript 语言，基于 Vue 的设计模式支持 Web、Android、iOS。&lt;/p&gt;

&lt;p&gt;第五阶段，Google 在 2018 年推出 Flutter，支持 AOT 编译（Ahead Of Time，即运行前编译）从而实现机器码，也支持 JIT 编译（Just In Time，即时编译）热重载，用 Dart 语言开发。目前国内大厂基本都是用了 Flutter，包括阿里巴巴、腾讯、百度、美团、字节跳动、京东等。&lt;/p&gt;

&lt;p&gt;好了就说这么多，首先下载 Flutter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://flutter.cn/docs/get-started/install&lt;/code&gt;，然后：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@CVN % unzip ~/Downloads/flutter_macos_3.7.12-stable.zip
mikecaptain@CVN % &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; ~/Downloads/flutter_macos_3.7.12-stable ~/workspace/flutter
mikecaptain@CVN % &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/workspace/flutter
mikecaptain@CVN % &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/flutter/bin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般前端开发者都安装过 XCode、Android Studio、Chrome 等，所以配置 Flutter 也都会比较顺利，这里船长就不赘述了，安装成功后用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt; 测试应该有如下提示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN ~ % flutter doctor                   
Doctor summary &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to see all details, run flutter doctor &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Flutter &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Channel stable, 3.7.12, on macOS 13.2.1 22D68 darwin-arm64, locale zh-Hans-CN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Android toolchain - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Android devices &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Android SDK version 33.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Xcode - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iOS and macOS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Xcode 14.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Chrome - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the web
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Android Studio &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;version 2022.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Connected device &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] HTTP Host Availability

• No issues found!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;详细的安装指南请看 Flutter 官网，例如 macOS 上的安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://flutter.cn/docs/get-started/install/macos&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;第-2-节--first-step在-macos-平台跑第一个-app&quot;&gt;第 2 节 · First Step：在 macOS 平台跑第一个 App&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@CVN % flutter create hello_world
mikecaptain@CVN % &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello_world
mikecaptain@CVN % flutter run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正常的话这样会看到运行成功的提示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1]: macOS(macos)&lt;/code&gt;，会弹出一个 macOS 的应用程序窗口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-3.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第-3-节--在-ios-平台设备及模拟器上跑起第一个-app&quot;&gt;第 3 节 · 在 iOS 平台（设备及模拟器）上跑起第一个 App&lt;/h3&gt;

&lt;p&gt;将你的 iPhone 连接到 macOS 设备上，在 iPhone 的设置 - 隐私与安全性 - 开发者模式 - 打开 - 重启 iPhone - 重启后输入密码进入设备 - 在弹窗上同意开启开发者模式。此时在 XCode - Windows - Devices and Simulators 中选择你的 iPhone 后会看到如下类似页面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-4.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置结束后，会看到如下窗口页面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-5.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Xcode 中打开该 Flutter 项目命令如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@CVN % open ios/Runner.xcworkspace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;则会看到如下 XCode 项目窗口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-6.png&quot; alt=&quot;&quot; width=&quot;720&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果有类似如下提示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.../hello_world/ios/Runner.xcodeproj Signing &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Runner&quot;&lt;/span&gt; requires a development team. Select a development team &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the Signing &amp;amp; Capabilities editor.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个提示是因为你还没有设置项目的开发者团队。要解决这个问题，请按照以下步骤进行操作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 Xcode 中打开 Runner.xcworkspace 文件。&lt;/li&gt;
  &lt;li&gt;在左侧导航栏中选择 Runner。&lt;/li&gt;
  &lt;li&gt;在中间面板中选择 “Signing &amp;amp; Capabilities”。&lt;/li&gt;
  &lt;li&gt;在 “Signing &amp;amp; Capabilities” 下的 “Team” 中选择你的开发者团队。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果提示如下错误：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failed to register bundle identifier
The app identifier &lt;span class=&quot;s2&quot;&gt;&quot;com.example.helloWorld&quot;&lt;/span&gt; cannot be registered to your development team because it is not available. Change your bundle identifier to a unique string to try again.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个错误信息是因为你的 Bundle Identifier 在开发者中心已经被其他开发者使用了。你需要在你的项目中使用一个唯一的 Bundle Identifier。你可以按照以下步骤修改项目的 Bundle Identifier：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 Xcode 中打开你的项目。&lt;/li&gt;
  &lt;li&gt;选择你的项目在左侧导航栏中的顶层项。&lt;/li&gt;
  &lt;li&gt;在 “General” 选项卡中，找到 “Identity” 部分。&lt;/li&gt;
  &lt;li&gt;在 “Bundle Identifier” 中输入一个唯一的标识符，例如 “com.yourcompany.yourapp”。&lt;/li&gt;
  &lt;li&gt;保存并重新编译你的项目。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;正常到这里应该就没有什么错误了，可以运行一下程序，可能会有如下提示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-7.jpg&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个问题通常是因为你的开发者账号没有被信任。解决这个问题的步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在你的 iPhone 上打开 “设置” 应用程序。&lt;/li&gt;
  &lt;li&gt;滚动到 “通用” &amp;gt; “设备管理”。&lt;/li&gt;
  &lt;li&gt;找到你的开发者账号并点击它。&lt;/li&gt;
  &lt;li&gt;点击 “信任”。&lt;/li&gt;
  &lt;li&gt;重启你的 iPhone，然后再次尝试运行你的应用程序。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-8.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次运行就成功了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-9.png&quot; alt=&quot;&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样尝试一下在 Simulator 上运行试试：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-10.png&quot; alt=&quot;&quot; width=&quot;360&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第-4-节--在-android-平台跑起第一个-app&quot;&gt;第 4 节 · 在 Android 平台跑起第一个 App&lt;/h3&gt;

&lt;p&gt;在 Android 的 Tools - Device Manager - 右侧「Create device」，比如创建一个「Pixel 6」设备，点击「Next」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第-5-节--在-chrome-浏览器跑起第一个-app&quot;&gt;第 5 节 · 在 Chrome 浏览器跑起第一个 App&lt;/h3&gt;

&lt;p&gt;更新最新版本的 Flutter：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@CVN % flutter channel stable
mikecaptain@CVN % flutter upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看 flutter 目前可以连接的设备：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN testspace % flutter devices
3 connected devices:

iPhone 14 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mobile&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; • D89CD348-58C2-4F3B-B07D-54E2A72AB1BA • ios            • com.apple.CoreSimulator.SimRuntime.iOS-16-4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;simulator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
macOS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;desktop&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    • macos                                • darwin-arm64   • macOS 13.2.1 22D68 darwin-arm64
Chrome &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;web&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       • chrome                               • web-javascript • Google Chrome 112.0.5615.137
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 Chrome 运行刚刚的 Hello World 程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN hello_world % flutter run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; chrome
Launching lib/main.dart on Chrome &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;debug mode...
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;connection from debug service on Chrome...                 ⣾
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;浏览器会打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:56049/#/&lt;/code&gt; 链接：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果项目在创建时没有支持 Web，可以运行下面命令支持 Web：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@CVN % flutter create &lt;span class=&quot;nt&quot;&gt;--platforms&lt;/span&gt; web &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;第二章--flutter-的开发理念与原理&quot;&gt;第二章 · Flutter 的开发理念与原理&lt;/h2&gt;

&lt;h3 id=&quot;第-6-节--flutter-的开发框架和线程模型&quot;&gt;第 6 节 · Flutter 的开发框架和线程模型&lt;/h3&gt;

&lt;p&gt;Flutter 包括三层：框架层 Framework（Dart 编写）、引擎层 Engine（C/C++）、嵌入层 Embedder（Platform Specific）。&lt;/p&gt;

&lt;p&gt;再来跟着船长理解下 Flutter 的线程模型。Embedder 进行线程的创建和管理，提供四种 Task Runner 给 Engine，包括 Platform Task Runner（主线程）、UI Task Runner（渲染和处理 Vsync 信号并将 Widget 转换成 Layer Tree）、GPU Task Runner、IO Task Runner（文件读写与资源加载）。&lt;/p&gt;

&lt;p&gt;Engine 启动时，会分别创建一个 UI Task Runner、一个 GPU Task Runner、一个 IO Task Runner。所有 Engine 共享一个 Platform Task Runner。&lt;/p&gt;

&lt;h3 id=&quot;第-7-节--flutter-的基础理念一切皆为-widgets&quot;&gt;第 7 节 · Flutter 的基础理念：一切皆为 Widgets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Widget 的主要工作是提供一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build()&lt;/code&gt; 方法来描述如何用 Widget 树状结构下自己的叶子 Widget 们如何组织起来显示自己。&lt;/li&gt;
  &lt;li&gt;Material 是一种标准的移动端和 web 端的视觉设计语言。 Flutter 提供了一套丰富的 Material widgets。&lt;/li&gt;
  &lt;li&gt;你可以把 Widget 理解为一个配置文件，描述了 UI 界面的展示。Widget 状态变化时会重新绘制 UI，Flutter 框架会对比状态变化前后的区别来重新渲染 UI。&lt;/li&gt;
  &lt;li&gt;Flutter 中一般说的生命周期，指的是 StatefulWidget 的生命周期。生命周期涉及到一系列的方法，下面会讲到。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-8-节--理解-flutter-的生命周期&quot;&gt;第 8 节 · 理解 Flutter 的生命周期&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-15.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flutter 生命周期就是 StatefulWidget 的生命周期，从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createState&lt;/code&gt; 方法开始。&lt;/p&gt;

&lt;h4 id=&quot;81初始化阶段&quot;&gt;8.1、初始化阶段&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createState&lt;/code&gt;：当 StatefulWidget 被调用时会立即执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createState&lt;/code&gt; 方法，然后是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initState&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initState&lt;/code&gt;：一般会在这里进行各个变量的初始赋值，与服务端进行最初的交互。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;82组件创建阶段&quot;&gt;8.2、组件创建阶段&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didChangeDependencies&lt;/code&gt;：当 State 发生变化时会调用。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 主要是返回需要渲染的 Widget。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 会被调用多次，所以这里只能返回 &lt;strong&gt;widget 的相关逻辑&lt;/strong&gt;，避免因为多次执行导致的状态异常。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;83触发组件-build&quot;&gt;8.3、触发组件 build&lt;/h4&gt;

&lt;p&gt;触发组件 build 的方法有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didChangeDependencies&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didUpdateWidget&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didUpdateWidget&lt;/code&gt;：在 Widget 重新构建时，Flutter Framework 会调用 Widget.canUpdate 来检测 Widget Tree 中同一位置的新旧节点，然后决定是否需要更新，如果得到的是 True 就会调用这个回调方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didUpdateWiedget&lt;/code&gt;。另外父亲 Widget 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 时，孩子 Widget 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didUpdateWidget&lt;/code&gt; 也会被调用。这个方法调用后，一定会再次调用孩子的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;84组件的销毁阶段&quot;&gt;8.4、组件的销毁阶段&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deactivate&lt;/code&gt; 在组件被移除节点后会被调用。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispose&lt;/code&gt; 是在一个组件被移除，并没有插入到其他节点时，会被调用，即永久删除，并释放组件资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第-9-节--platform-channel&quot;&gt;第 9 节 · Platform Channel&lt;/h3&gt;

&lt;p&gt;Flutter 是一个跨平台的 UI 框架，Flutter 本身无法提供各种系统能力，比如蓝牙、相机、GPS 等等。用 Platform Channel 来与底层 OS 平台进行异步的消息通信，在发送给底层 OS 之前会编译成二进制消息，在接收到 Flutter 框架时则会解码成 Dart 可理解的值（所有解码器都只是空消息）。涉及到三种主要 Platform Channel：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasicMessageChannel&lt;/code&gt;：传递数据的通道。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodChannel&lt;/code&gt;：传递方法调用的通道。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventChannel&lt;/code&gt;：传递事件的通道。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 Flutter 与 iOS 或 Android 之间，通过调用 invokeMehotd 发起通信，接收方通过 MethodCallHandle 接收。&lt;/p&gt;

&lt;h3 id=&quot;第-10-节--包管理&quot;&gt;第 10 节 · 包管理&lt;/h3&gt;

&lt;p&gt;类似于以前在 Java 中会使用 Ant、Maven，在 Android 会使用 Gradle，在 iOS 中使用 Cocoapods，在 Node 中使用 npm（Node Package Management）等等，下面说说 Flutter 中的包管理。Flutter 的项目中用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; 文件来管理依赖关系。类比来看的话：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android 的 Gradle 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gradle&lt;/code&gt; 文件管理配置依赖关系。&lt;/li&gt;
  &lt;li&gt;iOS 的 Cocoapods 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; 文件管理配置依赖关系。&lt;/li&gt;
  &lt;li&gt;Flutter 的 Packages 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; 文件管理配置依赖关系。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是一个典型的、简单的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello_world&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A new Flutter project.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# The following line prevents the package from being accidentally published to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# pub.dev using `flutter pub publish`. This is preferred for private packages.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;publish_to&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;none&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Remove this line if you wish to publish to pub.dev&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.0.0+1&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;=2.19.6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;3.0.0&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;flutter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flutter&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.13.3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;timeago&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^3.1.0&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# The following adds the Cupertino Icons font to your application.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Use with the CupertinoIcons class for iOS style icons.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cupertino_icons&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^1.0.2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;intl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.18.1&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dev_dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;flutter_test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flutter&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;flutter_lints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^2.0.0&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The following section is specific to Flutter packages.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;flutter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# The following line ensures that the Material Icons font is&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# included with your application, so that you can use the icons in&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the material Icons class.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;uses-material-design&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;首先是项目名字：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name: hello_world&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;应用的版本号：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version: 1.0.0+1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Flutter 环境：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment:&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;SDK 支持版本范围：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdk: &apos;&amp;gt;=2.19.6 &amp;lt;3.0.0&apos;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;生产环境所有依赖：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies:&lt;/code&gt;，这里实例一些常用依赖。依赖包都会被编译到最终的包里。
    &lt;ul&gt;
      &lt;li&gt;HTTP 包：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http: ^0.13.3&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;一个用于时间描述表示的包：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeago: ^3.1.0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;CSS 定义颜色包：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css_colors: ^1.1.1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;开发环境额外依赖：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev_dependencies&lt;/code&gt; 是一些为了提高开发效率依赖的包，比如一些自动化测试工具之类的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter&lt;/code&gt; 是一些 Flutter 项目的相关配置，比如是否使用 material 设计样式、本地资源配置路径&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 VSCode 的「终端」里输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter pub get&lt;/code&gt; 即可以把所有依赖安装到项目中，每次更新 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; 后都要运行一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter pub get&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;第-11-节--flutter-渲染原理&quot;&gt;第 11 节 · Flutter 渲染原理&lt;/h3&gt;

&lt;h4 id=&quot;111了解下-flutter-的三棵树&quot;&gt;11.1、了解下 Flutter 的三棵树&lt;/h4&gt;

&lt;p&gt;我们来具体看一段代码：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;children:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;image&apos;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Image.asset&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;text&apos;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Text&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;Widget&amp;gt;[]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// row&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flutter 视图包含了三棵树，渲染时间就是花费在了这三棵树上：Widget、Element、RenderObject。&lt;/p&gt;

&lt;p&gt;Widget Tree 是一个所有 Widget 的数据结构，创建过程是非常轻量的，因为并不涉及到 UI 渲染，只是树结构配置的生成。页面刷新时也随时会重建，Widget Tree 重建本身不涉及任何 UI 渲染。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-44eafea58a5d2bfef4bbf078bc005ada&quot; width=&quot;248pt&quot; height=&quot;332pt&quot; viewBox=&quot;0.00 0.00 248.14 332.00&quot;&gt;
&lt;title&gt;graphviz-44eafea58a5d2bfef4bbf078bc005ada&lt;/title&gt;
&lt;desc&gt;
digraph G {
  rankdir=TB

  {rank=same Image Text}
  {rank=same RawImage RichText}

  Container -&amp;gt; DecoratedBox
  DecoratedBox -&amp;gt; Row
  Row -&amp;gt; Image
  Image -&amp;gt; RawImage
  Row -&amp;gt; Text
  Text -&amp;gt; RichText
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 328)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-328 244.14,-328 244.14,4 -4,4&quot; /&gt;
&lt;!-- Image --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Image&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;79.79&quot; cy=&quot;-90&quot; rx=&quot;39.79&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;79.79&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Image&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RawImage --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RawImage&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;59.79&quot; cy=&quot;-18&quot; rx=&quot;59.59&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;59.79&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RawImage&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Image&amp;#45;&amp;gt;RawImage --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Image&amp;#45;&amp;gt;RawImage&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M74.95,-72.05C72.73,-64.26 70.03,-54.82 67.53,-46.08&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;70.84,-44.93 64.73,-36.28 64.11,-46.85 70.84,-44.93&quot; /&gt;
&lt;/g&gt;
&lt;!-- Text --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Text&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;177.79&quot; cy=&quot;-90&quot; rx=&quot;30.59&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;177.79&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Text&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RichText --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RichText&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;188.79&quot; cy=&quot;-18&quot; rx=&quot;51.19&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;188.79&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RichText&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Text&amp;#45;&amp;gt;RichText --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Text&amp;#45;&amp;gt;RichText&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M180.46,-72.05C181.67,-64.35 183.13,-55.03 184.49,-46.36&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;187.99,-46.7 186.08,-36.28 181.07,-45.61 187.99,-46.7&quot; /&gt;
&lt;/g&gt;
&lt;!-- Container --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Container&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;123.79&quot; cy=&quot;-306&quot; rx=&quot;56.59&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;123.79&quot; y=&quot;-302.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Container&lt;/text&gt;
&lt;/g&gt;
&lt;!-- DecoratedBox --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;DecoratedBox&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;123.79&quot; cy=&quot;-234&quot; rx=&quot;76.09&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;123.79&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;DecoratedBox&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Container&amp;#45;&amp;gt;DecoratedBox --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Container&amp;#45;&amp;gt;DecoratedBox&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M123.79,-287.7C123.79,-279.98 123.79,-270.71 123.79,-262.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;127.29,-262.1 123.79,-252.1 120.29,-262.1 127.29,-262.1&quot; /&gt;
&lt;/g&gt;
&lt;!-- Row --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;Row&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;123.79&quot; cy=&quot;-162&quot; rx=&quot;30.59&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;123.79&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;Row&lt;/text&gt;
&lt;/g&gt;
&lt;!-- DecoratedBox&amp;#45;&amp;gt;Row --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;DecoratedBox&amp;#45;&amp;gt;Row&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M123.79,-215.7C123.79,-207.98 123.79,-198.71 123.79,-190.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;127.29,-190.1 123.79,-180.1 120.29,-190.1 127.29,-190.1&quot; /&gt;
&lt;/g&gt;
&lt;!-- Row&amp;#45;&amp;gt;Image --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Row&amp;#45;&amp;gt;Image&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M113.59,-144.76C108.28,-136.32 101.67,-125.8 95.71,-116.31&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;98.53,-114.24 90.25,-107.63 92.61,-117.96 98.53,-114.24&quot; /&gt;
&lt;/g&gt;
&lt;!-- Row&amp;#45;&amp;gt;Text --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;Row&amp;#45;&amp;gt;Text&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M136.05,-145.12C142.95,-136.17 151.71,-124.81 159.42,-114.81&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;162.25,-116.88 165.59,-106.82 156.71,-112.6 162.25,-116.88&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;根据 Widget 会生成 Element，如下图。Element Tree 同时持有 Widget Tree 和 RenderObject Tree，Element Tree 存放上下文信息，通过 Element Tree 来遍历视图树，支撑 UI 结构。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-953641441c56d228f7ed818b2b44457e&quot; width=&quot;480pt&quot; height=&quot;332pt&quot; viewBox=&quot;0.00 0.00 480.48 332.00&quot;&gt;
&lt;title&gt;graphviz-953641441c56d228f7ed818b2b44457e&lt;/title&gt;
&lt;desc&gt;
digraph G {
  rankdir=TB

  ComponentElement1[label=&amp;quot;ComponentElement&amp;quot;]
  ComponentElement2[label=&amp;quot;ComponentElement&amp;quot;]
  RenderObjectElement2[label=&amp;quot;RenderObjectElement&amp;quot;]
  RenderObjectElement3[label=&amp;quot;RenderObjectElement&amp;quot;]
  RenderObjectElement4[label=&amp;quot;RenderObjectElement&amp;quot;]

  {rank=same ComponentElement1 ComponentElement2}
  {rank=same RenderObjectElement3 RenderObjectElement4}

  ComponentElement -&amp;gt; RenderObjectElement1
  RenderObjectElement1 -&amp;gt; RenderObjectElement2
  RenderObjectElement2 -&amp;gt; ComponentElement1
  RenderObjectElement2 -&amp;gt; ComponentElement2
  ComponentElement1 -&amp;gt; RenderObjectElement3
  ComponentElement2 -&amp;gt; RenderObjectElement4
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 328)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-328 476.48,-328 476.48,4 -4,4&quot; /&gt;
&lt;!-- ComponentElement1 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;ComponentElement1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;124.74&quot; cy=&quot;-90&quot; rx=&quot;102.88&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;124.74&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;ComponentElement&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement3 --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderObjectElement3&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;113.74&quot; cy=&quot;-18&quot; rx=&quot;113.98&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;113.74&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderObjectElement&lt;/text&gt;
&lt;/g&gt;
&lt;!-- ComponentElement1&amp;#45;&amp;gt;RenderObjectElement3 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;ComponentElement1&amp;#45;&amp;gt;RenderObjectElement3&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M122.02,-71.7C120.81,-63.98 119.35,-54.71 118,-46.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;121.44,-45.44 116.43,-36.1 114.52,-46.53 121.44,-45.44&quot; /&gt;
&lt;/g&gt;
&lt;!-- ComponentElement2 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;ComponentElement2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;352.74&quot; cy=&quot;-90&quot; rx=&quot;102.88&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;352.74&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;ComponentElement&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement4 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderObjectElement4&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;358.74&quot; cy=&quot;-18&quot; rx=&quot;113.98&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;358.74&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderObjectElement&lt;/text&gt;
&lt;/g&gt;
&lt;!-- ComponentElement2&amp;#45;&amp;gt;RenderObjectElement4 --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;ComponentElement2&amp;#45;&amp;gt;RenderObjectElement4&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M354.22,-71.7C354.88,-63.98 355.68,-54.71 356.42,-46.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;359.91,-46.37 357.27,-36.1 352.93,-45.77 359.91,-46.37&quot; /&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement2 --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderObjectElement2&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;235.74&quot; cy=&quot;-162&quot; rx=&quot;113.98&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;235.74&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderObjectElement&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement2&amp;#45;&amp;gt;ComponentElement1 --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;RenderObjectElement2&amp;#45;&amp;gt;ComponentElement1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M209.43,-144.41C194.5,-135 175.64,-123.1 159.5,-112.92&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;161.18,-109.84 150.86,-107.47 157.45,-115.76 161.18,-109.84&quot; /&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement2&amp;#45;&amp;gt;ComponentElement2 --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;RenderObjectElement2&amp;#45;&amp;gt;ComponentElement2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M263.47,-144.41C279.35,-134.91 299.46,-122.88 316.57,-112.64&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;318.43,-115.61 325.21,-107.47 314.83,-109.6 318.43,-115.61&quot; /&gt;
&lt;/g&gt;
&lt;!-- ComponentElement --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;ComponentElement&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;235.74&quot; cy=&quot;-306&quot; rx=&quot;102.88&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;235.74&quot; y=&quot;-302.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;ComponentElement&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement1 --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderObjectElement1&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;235.74&quot; cy=&quot;-234&quot; rx=&quot;119.68&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;235.74&quot; y=&quot;-230.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderObjectElement1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- ComponentElement&amp;#45;&amp;gt;RenderObjectElement1 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;ComponentElement&amp;#45;&amp;gt;RenderObjectElement1&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M235.74,-287.7C235.74,-279.98 235.74,-270.71 235.74,-262.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.24,-262.1 235.74,-252.1 232.24,-262.1 239.24,-262.1&quot; /&gt;
&lt;/g&gt;
&lt;!-- RenderObjectElement1&amp;#45;&amp;gt;RenderObjectElement2 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;RenderObjectElement1&amp;#45;&amp;gt;RenderObjectElement2&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M235.74,-215.7C235.74,-207.98 235.74,-198.71 235.74,-190.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;239.24,-190.1 235.74,-180.1 232.24,-190.1 239.24,-190.1&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;RenderObject Tree 是真正负责渲染的，根据 Widget 的布局属性，进行布局、绘制。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;div class=&quot;graphviz-wrapper&quot;&gt;

&lt;!-- Generated by graphviz version 2.43.0 (0)
 --&gt;
&lt;!-- Title: G Pages: 1 --&gt;
&lt;svg role=&quot;img&quot; aria-label=&quot;graphviz-ccc7c01c1dab928ec533c571f0bf9f59&quot; width=&quot;358pt&quot; height=&quot;188pt&quot; viewBox=&quot;0.00 0.00 358.39 188.00&quot;&gt;
&lt;title&gt;graphviz-ccc7c01c1dab928ec533c571f0bf9f59&lt;/title&gt;
&lt;desc&gt;
digraph G {
  rankdir=TB

  {rank=same RenderImage RenderParagraph}

  RenderObjectBox -&amp;gt; RenderFlex
  RenderFlex -&amp;gt; RenderImage
  RenderFlex -&amp;gt; RenderParagraph
}
&lt;/desc&gt;

&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-184 354.39,-184 354.39,4 -4,4&quot; /&gt;
&lt;!-- RenderImage --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderImage&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;73.44&quot; cy=&quot;-18&quot; rx=&quot;73.39&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;73.44&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderImage&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderParagraph --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderParagraph&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;257.44&quot; cy=&quot;-18&quot; rx=&quot;92.88&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;257.44&quot; y=&quot;-14.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderParagraph&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderObjectBox --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderObjectBox&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;165.44&quot; cy=&quot;-162&quot; rx=&quot;92.08&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;165.44&quot; y=&quot;-158.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderObjectBox&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderFlex --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;RenderFlex&lt;/title&gt;
&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; cx=&quot;165.44&quot; cy=&quot;-90&quot; rx=&quot;64.19&quot; ry=&quot;18&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;165.44&quot; y=&quot;-86.3&quot; font-family=&quot;Times,serif&quot; font-size=&quot;14.00&quot;&gt;RenderFlex&lt;/text&gt;
&lt;/g&gt;
&lt;!-- RenderObjectBox&amp;#45;&amp;gt;RenderFlex --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;RenderObjectBox&amp;#45;&amp;gt;RenderFlex&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M165.44,-143.7C165.44,-135.98 165.44,-126.71 165.44,-118.11&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;168.94,-118.1 165.44,-108.1 161.94,-118.1 168.94,-118.1&quot; /&gt;
&lt;/g&gt;
&lt;!-- RenderFlex&amp;#45;&amp;gt;RenderImage --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;RenderFlex&amp;#45;&amp;gt;RenderImage&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M144.11,-72.76C131.89,-63.47 116.37,-51.66 102.99,-41.48&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;105.06,-38.66 94.98,-35.39 100.82,-44.23 105.06,-38.66&quot; /&gt;
&lt;/g&gt;
&lt;!-- RenderFlex&amp;#45;&amp;gt;RenderParagraph --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;RenderFlex&amp;#45;&amp;gt;RenderParagraph&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M186.78,-72.76C198.91,-63.53 214.3,-51.83 227.61,-41.7&quot; /&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;229.74,-44.47 235.58,-35.63 225.5,-38.9 229.74,-44.47&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;整个流程是，根据 Widget Tree 生成 Element Tree，然后创建 RenderObject Tree 并管理到 Element.renderObject 属性上，最后通过 RenderObject 来完成布局、绘制。&lt;/p&gt;

&lt;h4 id=&quot;112页面刷新时的操作流程&quot;&gt;11.2、页面刷新时的操作流程&lt;/h4&gt;

&lt;p&gt;在更新页面时，Framework 向下通知 Engine，Engine 会等到下一个 Vsync 信号到达时向上通知 Framework 进行 animate、build、layout 和 paint，最后生成 layer 向下交给 Engine。Engine 会把 layer 进行组合、生成纹理，最后通过底层的 OpenGL API 提交数据给 GPU，GPU 经过处理后在显示设备上显示，如下图（&lt;a href=&quot;https://www.bilibili.com/video/BV11R4y1r7tL&quot;&gt;来源&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-19.png&quot; alt=&quot;&quot; width=&quot;480&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以 Text 或 Image 发生改变为例，会触发哪些操作呢？这一帧刷新开始：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先 Widget 是不可改变的，所以会创建一颗新的树；&lt;/li&gt;
  &lt;li&gt;开始 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;对上一帧的 Element 树进行遍历，调用 Element 的 updateChild 看子节点类型跟之前是不是一致。不一致的话：就扔掉子节点，并造一个新的。一致的话：1）只做内容上的更新（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateRenderObject&lt;/code&gt;）；2）再判断节点属性是否有改动，如果有则标记为 dirty，重新 layout、paint。&lt;/li&gt;
  &lt;li&gt;再生成新的 layer 交给 GPU。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下图（&lt;a href=&quot;https://www.bilibili.com/video/BV11R4y1r7tL&quot;&gt;来源&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-20.png&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;第三章--flutter-组件介绍及应用&quot;&gt;第三章 · Flutter 组件介绍及应用&lt;/h2&gt;

&lt;h3 id=&quot;第-12-节--编写一个-news-app-练手&quot;&gt;第 12 节 · 编写一个 News App 练手&lt;/h3&gt;

&lt;h4 id=&quot;121下载-vscode-并创建-flutter&quot;&gt;12.1、下载 VSCode 并创建 Flutter&lt;/h4&gt;

&lt;p&gt;我们这里选择用目前最主流的 IDE —— VSCode 来编写程序，首先在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://code.visualstudio.com/&lt;/code&gt; 下载 VSCode，解压后就可以使用。&lt;/p&gt;

&lt;p&gt;然后通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd + shift + p&lt;/code&gt; 打开 VSCode 的控制台，输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter: New Project&lt;/code&gt; 然后选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt;，就创建成功一个 VSCode 下的 Flutter 项目了。这个过程创建出来的整个目录结构与在 CLI 下输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter create hello_world&lt;/code&gt; 效果是一样的。目录结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-13.png&quot; alt=&quot;&quot; width=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有依赖库都在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; 文件里管理，我们可以为其添加一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; 依赖库：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies:
  flutter:
    sdk: flutter
  http: ^0.13.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter pub get&lt;/code&gt; 命令完成依赖的获取。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN yongxian_news % flutter pub get            
Running &lt;span class=&quot;s2&quot;&gt;&quot;flutter pub get&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;yongxian_news...
Resolving dependencies... 
  async 2.10.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.11.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  characters 1.2.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.3.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  collection 1.17.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.17.1 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  js 0.6.5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.6.7 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  matcher 0.12.13 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.12.15 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  material_color_utilities 0.2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  meta 1.8.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.9.1 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  path 1.8.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.8.3 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  source_span 1.9.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.10.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  test_api 0.4.16 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.5.2 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Got dependencies!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;122flutter-项目文件结构&quot;&gt;12.2、Flutter 项目文件结构&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android
ios
linux
macos
web
windows
build
lib
--- main.dart
test
--- widget_test.dart
pubspec.lock
pubspec.yaml
README.md
analysis_options.yaml
hello_world.iml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;各个平台的生成文件都有独立的目录，android、ios、web、windows、macos、linux 六大平台。&lt;/p&gt;

&lt;h4 id=&quot;123了解-dart-的一些基本语法&quot;&gt;12.3、了解 Dart 的一些基本语法&lt;/h4&gt;

&lt;p&gt;语法是一个很庞杂的事情，没必要专门去学完了再写程序。这里船长先提到的，都是你在你的第一个程序中会用到的。在 Dart 中引用一个文件很简单，只需要如下写法：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:project_name/.../xxx.dart&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意 Dart 中每一句最后都需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt;，这一点与 java、c++ 类似。&lt;/p&gt;

&lt;p&gt;Dart 也是面向对象语言，其面向对象的类写法也与 java 类似，是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;，并且如果是从一个类扩展而来的，就会用到与 java 类似的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt; 关键字。&lt;/p&gt;

&lt;p&gt;Dart 语法中也有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;，其含义与 Java 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 类似。&lt;/p&gt;

&lt;p&gt;一个函数带有多个参数，那么每个参数之间都用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; 隔开，而最后一个参数后面加不加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;，Dart 都不会报错。&lt;/p&gt;

&lt;p&gt;字符串用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;&apos;&lt;/code&gt; 而不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;124flutter-程序入口-maindart&quot;&gt;12.4、Flutter 程序入口 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;其程序一般从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/main.dart&lt;/code&gt; 文件开始运行，默认调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void main() {}&lt;/code&gt;，其中会有一句简单的启动 App 的语句：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;runApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 函数也可以写成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void main() =&amp;gt; runApp(MyApp());&lt;/code&gt; 的单行函数写法。&lt;/p&gt;

&lt;p&gt;如果你命名的默认 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt; 中的类名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 的话，则需要在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt; 文件中定义一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt;，大致的结构如下：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaterialApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;Flutter Demo&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;theme:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThemeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;nl&quot;&gt;primarySwatch:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
			&lt;span class=&quot;nl&quot;&gt;home:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewsListPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessWidget&lt;/code&gt; 使得 App 整体也是一个 Widget（还记得前面说的在 Flutter 中一切皆为 Widget。其实在 Flutter 中连一些操作属性的东西都是 Widget，比如 Layout、Alignment 等等。&lt;/p&gt;

&lt;h4 id=&quot;125app-获取-http-请求的服务&quot;&gt;12.5、App 获取 Http 请求的服务&lt;/h4&gt;

&lt;p&gt;船长要创建一个首页获取 news list，首页中有 news list，其中每一项都可以点击进入到一个 news detail 页。这样我们就需要三个 dart 程序文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;news_service.dart&lt;/code&gt; 发送 news list 请求；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;news_list_page.dart&lt;/code&gt; 展示 news list；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;news_details_page.dart&lt;/code&gt; 展示 news detail；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和船长一起来看下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;news_service.dart&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;dart:convert&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 注意这里的 as http 写法&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:http/http.dart&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;https://newsapi.org/v2/top-headlines?country=cn&amp;amp;apiKey=&amp;lt;YOUR_API_KEY&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 定义个 fetchNews 函数，这里注意返回值写法 Future&amp;lt;List&amp;lt;dynamic&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 注意这里的 async 可以异步反馈，否则同步就会阻塞&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchNews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  	&lt;span class=&quot;c1&quot;&gt;// 注意这里 response 是可以不定义类型的，与 Java 就很不同了&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 用 String 类型的 apiUrl 作为 Uri.parse() 函数的参数&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// http.get() 函数用 await 关键词修饰，则可以等待返回。但因为函数 async，因此不会阻塞&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonDecode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;articles&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Failed to load news&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;126app-的列表页&quot;&gt;12.6、App 的列表页&lt;/h4&gt;

&lt;p&gt;再看下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;news_list_page.dart&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:flutter/material.dart&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:yongxian_news/services/news_service.dart&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:yongxian_news/pages/news_details_page.dart&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsListPage&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_NewsListPageState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_NewsListPageState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_NewsListPageState&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsListPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_newsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_newsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchNews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  	&lt;span class=&quot;c1&quot;&gt;// 这里用到了脚手架 Scaffold，也是 Material Library 的一个 Widget，它提供默认的导航栏、标题、包含主屏幕 Widget 树状结构的 body 属性。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scaffold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;appBar:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Flutter Demo App&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;future:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_newsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([]),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;builder:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;itemCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;itemBuilder:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListTile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                  &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;nl&quot;&gt;subtitle:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;source&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;nl&quot;&gt;onTap:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_navigateToDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Error: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${snapshot.error}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_navigateToDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Navigator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;MaterialPageRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;builder:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewsDetailsPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;article:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewsListPage&lt;/code&gt; 可以看到与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt; 文件中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 的定义形成对比，前者扩展自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatefulWidget&lt;/code&gt;，后者扩展自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessWidget&lt;/code&gt;。可以逐渐看到这是 Dart 程序的一个特点，就是每一个类都搭配一个 State 类，除了扩展自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessWidget&lt;/code&gt; 类没有 State。&lt;/p&gt;

&lt;p&gt;所以这里就是成对儿的，一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewsListPage&lt;/code&gt; 类，和一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_NewsListPageState&lt;/code&gt; 类。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_NewsListPageState&lt;/code&gt; 类中创建一个刚刚船长自己写的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt; 实例，并在其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initState()&lt;/code&gt; 函数中调用我们写的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetchNews&lt;/code&gt; 函数。&lt;/p&gt;

&lt;p&gt;然后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 函数中创建脚手架 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scaffold&lt;/code&gt;，其中定义了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appBar&lt;/code&gt;：直接创建一个带有 title 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBar(title: Text(&apos;涌现 AI 资讯&apos;))&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;：这里可以和船长一起看到，你想要定义的页面的样式，就在这层层嵌套的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListView&lt;/code&gt; 实例中，这个写法确实不太优雅。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListView&lt;/code&gt; 的参数里传递了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itemBuilder&lt;/code&gt;，你想定义的关于 item 的内容也就在其中的了。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListTitle&lt;/code&gt; 的参数里，我们可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subtitle&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onTap&lt;/code&gt; 点击后的动作函数，这里定义了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_navigateToDetails&lt;/code&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_navigateToDetails&lt;/code&gt; 函数中，调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigator&lt;/code&gt; 类的函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;，其中传入的参数是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaterialPageRoute&lt;/code&gt; 实例。其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaterialPageRoute&lt;/code&gt; 创建实例的参数里有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builder&lt;/code&gt;，这里出现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewsDetailsPage&lt;/code&gt; 类。&lt;/p&gt;

&lt;h4 id=&quot;127app-的二级页面实现&quot;&gt;12.7、App 的二级页面实现&lt;/h4&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;package:flutter/material.dart&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsDetailsPage&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatelessWidget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;NewsDetailsPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuildContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scaffold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;appBar:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;涌现 AI 资讯详情&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SingleChildScrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;children:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;urlToImage&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;urlToImage&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SizedBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;style:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fontSize:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fontWeight:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SizedBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;description&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;style:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fontSize:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SizedBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&apos;Source: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${article[&apos;source&apos;][&apos;name&apos;]}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;style:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fontSize:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fontStyle:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SizedBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&apos;Published at: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${article[&apos;publishedAt&apos;]}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;style:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fontSize:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fontStyle:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;128对练手-app-的整体回顾&quot;&gt;12.8、对练手 App 的整体回顾&lt;/h4&gt;

&lt;p&gt;一般 Flutter 应用程序是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt; 文件中实现一个继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessWidget&lt;/code&gt; 的类比如叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt;，然后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt; 文件中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 方法里实例化一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 对象，作为 Flutter 应用的根组件。&lt;/p&gt;

&lt;p&gt;Flutter 在构建页面时，会调用继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessWidget&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; 类实例的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 方法。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 方法一般会提供一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaterialApp&lt;/code&gt;（也是一个 Widget）的 Widget 来描述这个 UI 界面。在这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaterialApp&lt;/code&gt; 里用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;theme&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt; 三个组件。其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt; 就是一个继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatefulWidget&lt;/code&gt; 的类，比如船长这里可以叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewsListPage&lt;/code&gt; 类，它是应用的首页 Widget 的，有状态的。&lt;/p&gt;

&lt;p&gt;继承自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatefulWidget&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewsListPage&lt;/code&gt; 组件，通过 createState 创建了状态管理类。&lt;/p&gt;

&lt;h3 id=&quot;第-13-节--widget导航路由网络请求和项目发布&quot;&gt;第 13 节 · Widget、导航路由、网络请求和项目发布&lt;/h3&gt;

&lt;h4 id=&quot;131常用-widget&quot;&gt;13.1、常用 Widget&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatefulWidget&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt;：通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt; 方法告诉框架，某个 UI 发生了变化，Flutter 框架就会重新运行 State 实例的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; 方法来刷新 UI 的显示。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatelessWidget&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;基础 Widget：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextField&lt;/code&gt; 等组件。
    &lt;ul&gt;
      &lt;li&gt;Text：显示文本，有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textAlign&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxLines&lt;/code&gt; 最大行数、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overflow&lt;/code&gt; 文本截断的方式、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt; 文本样式（对应 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextStyle&lt;/code&gt; 有很多属性，比如 color、fontSize、height、fontFamily、backgroundColor、下划线等 decoration 等等）等属性。&lt;/li&gt;
      &lt;li&gt;Button：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FloatingActionButton&lt;/code&gt; 悬浮按钮，其 onPressed 属性一般是一个回调函数。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;布局 Widget：线性布局组件 Row、Column，弹性布局组件 Flex，Stack 组件。
    &lt;ul&gt;
      &lt;li&gt;要了解主轴的概念，它与你是 Row 还是 Column 有关系，两种情况的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mainAxisAlignment&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crossAxisAlignment&lt;/code&gt; 是相反的。&lt;/li&gt;
      &lt;li&gt;其实 Row 和 Column 都是继承自 Flex 弹性布局的。Flex 里面支持 Expanded 孩子（只能在 Flex 里），Expanded 有一个 flex 属性控制怎么分割主轴上的全部空闲空间。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;容器 Widget：Container、Padding、Center、DecoratedBox 组件。&lt;/li&gt;
  &lt;li&gt;交互 Widget：GestureDetector 组件。&lt;/li&gt;
  &lt;li&gt;滚动 Widget：ListView、GridView、CustomScrollView 组件。
    &lt;ul&gt;
      &lt;li&gt;ListView 跟 iOS、Android 类似组件都是滚动到了才创建，性能上更有优势。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;132导航路由&quot;&gt;13.2、导航路由&lt;/h4&gt;

&lt;p&gt;iOS、Android 的页面导航管理都会维护一个路由栈，对应的方法是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigator.push()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigator.pop()&lt;/code&gt;，后者回退同时可以返回数据给主屏界面。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigator.pop()&lt;/code&gt; 可以接受第二个参数（可选），数据通过 future 的方法传递返回值。&lt;/p&gt;

&lt;h4 id=&quot;133网络请求&quot;&gt;13.3、网络请求&lt;/h4&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HttpClientRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HttpClientResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;134项目发布&quot;&gt;13.4、项目发布&lt;/h4&gt;

&lt;p&gt;发布 Release 版本，以 web 端为例。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mikecaptain@CVN % flutter build web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;第四章--调试&quot;&gt;第四章 · 调试&lt;/h2&gt;

&lt;h3 id=&quot;第-14-节--启用-flutter-devtools&quot;&gt;第 14 节 · 启用 Flutter DevTools&lt;/h3&gt;

&lt;p&gt;我们可以在 VSCode 中「Command + P」输入「&amp;gt;Flutter: Open DevTools」，下图是使用 DevTools 中的 Widget Inspector：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以在「Command + P」输入「&amp;gt;Flutter: Open DevTools」选择「Open DevTools in Web Browser」在浏览器中打开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到浏览器地址是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:9100/&lt;/code&gt;，但是如果直接在浏览器打开看到的是下面的页面，需要输入所要连接的 App 的 URL：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 DevTools 我们可以看到各种开发调试工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flutter Inspector：用于调试和分析应用的 UI 布局。开发者可以查看和编辑小部件树、查看布局边界、调整布局参数等，以便更好地理解和调试应用的 UI。&lt;/li&gt;
  &lt;li&gt;Performance：针对 UI 性能过低问题，比如滑动卡顿。&lt;/li&gt;
  &lt;li&gt;CPU Profiler：分析应用的 CPU 使用情况。它提供了一个时间轴视图，显示应用在一段时间内 CPU 的占用情况。&lt;/li&gt;
  &lt;li&gt;Memory：内存问题排查，可以帮助开发者查看应用的内存使用情况，并识别内存泄漏问题。&lt;/li&gt;
  &lt;li&gt;Debugger：调试工具。&lt;/li&gt;
  &lt;li&gt;Network：网络请求分析工具，可以帮助开发者查看应用发送和接收的网络请求，包括请求详情、请求时间线等。&lt;/li&gt;
  &lt;li&gt;Logging：帮助开发者查看应用的日志输出，包括调试信息、错误日志等。开发者可以根据关键字过滤日志，以便更快地定位和解决问题。&lt;/li&gt;
  &lt;li&gt;App Size：分析包大小。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;141性能分析performance&quot;&gt;14.1、性能分析（Performance）&lt;/h4&gt;

&lt;p&gt;只能在真机或 Profile 模式下运行。先看下 Performance Overlay，绿色线是展示当前帧的耗时，UI thread、GPU thread 分开显示。耗时超过 16.6 毫秒（对应低于 60 FPS，即会丢帧）。如果点开「Performance Overlay」即如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当点开「Performance Overlay」，则在运行 App 后能看到如下 UI thread、GPU thread 性能图表（Raster 对应的就是 GPU），上面是 UI Task Runner 线程耗时，下面是 GPU Task Runner 线程耗时，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/src/2023/05/2023-05-01-captain-flutter-22.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UI Task Runer 是 Flutter Engine 执行 Dart isolate code 的耗时，GPU Task Runner 是被执行设备 GPU 的相关的调用。&lt;/p&gt;

&lt;h4 id=&quot;142性能优化常见关注点以及一个常见的性能优化案例&quot;&gt;14.2、性能优化常见关注点以及一个常见的性能优化案例&lt;/h4&gt;

&lt;p&gt;一般我们关注性能优化的点有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;提高 build 效率；&lt;/li&gt;
  &lt;li&gt;提高 paint 效率，经常通过 RepainBoundry 创建单独的 layer 减少重绘区域；&lt;/li&gt;
  &lt;li&gt;减少 build 中的逻辑处理：毕竟页面刷新时 Widget 的 build 会被频繁调用（每一帧都调用），所以 build 里应该只处理 UI 相关的逻辑；&lt;/li&gt;
  &lt;li&gt;减少 ClipPath、saveLayer 使用：saveLayer 会在 GPU 中分配一块新的绘图缓冲区，切换绘图目标，这个操作非常耗时；clipPath 会影响每个绘图指令，做一些相交操作，相交部分之外都会被剔除掉，也很耗时。&lt;/li&gt;
  &lt;li&gt;减少 Opacity Widget 的使用：尤其是在动画中，因为它会导致 Widget 每一帧都会被重建，可以使用 AnimatedOpcity 或 FadeInImage 进行代替。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在一个构建的 Widget 树结构中，看看从上到下的 Widget，如果 setState 的修改是在一个比较上面的 Widget 的 setState 中发生的，而改变的是一个比较下面的节点，这其实是存在性能优化空间的。优化的方法，就是把变化放在树结构里比较下面那个 Widget 的 setState 里。&lt;/p&gt;

&lt;p&gt;总价一下，就是提高 build 的效率，让 setState 刷新数据尽量下发到比较底层（指树的底层）的节点。&lt;/p&gt;

&lt;h2 id=&quot;附录&quot;&gt;附录&lt;/h2&gt;

&lt;h3 id=&quot;flutter-doctor&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN ~ % flutter doctor                   
Doctor summary &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to see all details, run flutter doctor &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Flutter &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Channel stable, 3.7.12, on macOS 13.2.1 22D68 darwin-arm64, locale zh-Hans-CN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Android toolchain - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Android devices &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Android SDK version 33.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Xcode - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iOS and macOS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Xcode 14.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Chrome - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the web
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Android Studio &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;version 2022.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] Connected device &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✓] HTTP Host Availability

• No issues found!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flutter-create-hello_world-创建项目&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter create hello_world&lt;/code&gt; 创建项目&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN codespace % flutter create hello_world
Signing iOS app &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;device deployment using developer identity: &lt;span class=&quot;s2&quot;&gt;&quot;Apple Development: zhongchao.ustc@gmail.com (U4H338U5TW)&quot;&lt;/span&gt;
Creating project captain_flutter...
Running &lt;span class=&quot;s2&quot;&gt;&quot;flutter pub get&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;captain_flutter...
Resolving dependencies &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;captain_flutter... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.3s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ async 2.10.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.11.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ boolean_selector 2.1.1
+ characters 1.2.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.3.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ clock 1.1.1
+ collection 1.17.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.17.1 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ cupertino_icons 1.0.5
+ fake_async 1.3.1
+ flutter 0.0.0 from sdk flutter
+ flutter_lints 2.0.1
+ flutter_test 0.0.0 from sdk flutter
+ js 0.6.5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.6.7 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ lints 2.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.1.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ matcher 0.12.13 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.12.15 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ material_color_utilities 0.2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ meta 1.8.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.9.1 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ path 1.8.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.8.3 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ sky_engine 0.0.99 from sdk flutter
+ source_span 1.9.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.10.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ stack_trace 1.11.0
+ stream_channel 2.1.1
+ string_scanner 1.2.0
+ term_glyph 1.2.1
+ test_api 0.4.16 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.5.2 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+ vector_math 2.1.4
Changed 24 dependencies &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;hello_world!
Wrote 127 files.

All &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
You can find general documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Flutter at: https://docs.flutter.dev/
Detailed API documentation is available at: https://api.flutter.dev/
If you prefer video documentation, consider: https://www.youtube.com/c/flutterdev

In order to run your application, &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;:

  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello_world
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;flutter run

Your application code is &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;hello_world/lib/main.dart.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flutter-run-运行项目&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter run&lt;/code&gt; 运行项目&lt;/h3&gt;

&lt;p&gt;在 Chrome 中运行命令如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN hello_world % flutter run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; chrome
Launching lib/main.dart on Chrome &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;debug mode...
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;connection from debug service on Chrome...                 ⣾
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;默认情况下，浏览器会打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:56049/#/&lt;/code&gt; 链接。&lt;/p&gt;

&lt;h3 id=&quot;flutter-devices&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter devices&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN testspace % flutter devices
3 connected devices:

iPhone 14 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mobile&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; • D89CD348-58C2-4F3B-B07D-54E2A72AB1BA • ios            • com.apple.CoreSimulator.SimRuntime.iOS-16-4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;simulator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
macOS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;desktop&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    • macos                                • darwin-arm64   • macOS 13.2.1 22D68 darwin-arm64
Chrome &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;web&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       • chrome                               • web-javascript • Google Chrome 112.0.5615.137
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;flutter-pub-get&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter pub get&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; mikecaptain@CVN yongxian_news % flutter pub get            
Running &lt;span class=&quot;s2&quot;&gt;&quot;flutter pub get&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;yongxian_news...
Resolving dependencies... 
  async 2.10.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.11.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  characters 1.2.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.3.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  collection 1.17.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.17.1 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  js 0.6.5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.6.7 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  matcher 0.12.13 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.12.15 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  material_color_utilities 0.2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  meta 1.8.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.9.1 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  path 1.8.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.8.3 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  source_span 1.9.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.10.0 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  test_api 0.4.16 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.5.2 available&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Got dependencies!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter build web&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter channel stable&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter upgrade&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://flutter.cn/docs/get-started/install&lt;/li&gt;
  &lt;li&gt;https://flutter.cn/&lt;/li&gt;
  &lt;li&gt;https://flutter.cn/docs/get-started/web&lt;/li&gt;
  &lt;li&gt;https://community.jiguang.cn/article/464286&lt;/li&gt;
  &lt;li&gt;https://www.bilibili.com/video/BV1p14y1T79R/&lt;/li&gt;
  &lt;li&gt;https://api.flutter.dev/flutter/material/BottomNavigationBar-class.html&lt;/li&gt;
  &lt;li&gt;https://blog.logrocket.com/building-news-app-flutter/&lt;/li&gt;
  &lt;li&gt;https://flutterawesome.com/flutter-news-app-using-newsapi/&lt;/li&gt;
  &lt;li&gt;https://flutter.cn/docs/development/ui/widgets-intro&lt;/li&gt;
  &lt;li&gt;https://flutter.cn/docs/get-started/flutter-for/uikit-devs&lt;/li&gt;
&lt;/ul&gt;</content><author><name>麦克船长</name></author><category term="web" /><category term="前端" /><category term="开发" /><category term="web" /><category term="app" /><category term="客户端" /><category term="前端" /><category term="android" /><category term="ios" /><category term="html5" /><category term="小程序" /><category term="应用" /><summary type="html">在一个人就是一支队伍的时代里（在 AI 急速发展的推动下，未来会越来越趋于《未来简史》所描述的「半神」），产品、运营还是工程，最好都要会一些前端，这样方便自己做一点东西便于提高日常的生产力。今天介绍的是 2018 年开始的 Google Flutter 跨多平台终端的技术，支持 iOS、Android、Web、macOS、Linux、Windows ……</summary></entry><entry><title type="html">【摘录】我国城乡二元结构的由来</title><link href="https://www.mikecaptain.com/2023/04/29/china-dual-economic-structure/" rel="alternate" type="text/html" title="【摘录】我国城乡二元结构的由来" /><published>2023-04-29T08:40:13+08:00</published><updated>2023-04-29T08:40:13+08:00</updated><id>https://www.mikecaptain.com/2023/04/29/china-dual-economic-structure</id><content type="html" xml:base="https://www.mikecaptain.com/2023/04/29/china-dual-economic-structure/">&lt;p&gt;编者（麦克船长）按：美国作为互联网乃至科技行业的全球领导者，始终还是中国互联网及科技发展的关键参照物。两者相比，中国有很多独特的宏观因素导致无法使用 Time Machine 来照搬美国，同时目前前沿领域两者的时间差也已经非常小了（这非常不同于 PC 互联网浪潮），所以即便有 Time Machine 有效性也没那么充足了（尽管仍然有一定参考价值）。这其中有一个关键特征，就是中国的城乡二元经济结构，受此影响最显著的科技有公司比如拼多多。&lt;/p&gt;

&lt;p&gt;以下是原文（原文链接在文末）。&lt;/p&gt;

&lt;p&gt;我国在发展中出现的「城乡二元结构」和「三农问题」重大矛盾的由来已久，它们是历史长期发展过程中多种因素形成的。&lt;/p&gt;

&lt;h2 id=&quot;一历史和传统因素&quot;&gt;一、历史和传统因素&lt;/h2&gt;

&lt;h3 id=&quot;12000-多年的封建社会制度下的城乡结构&quot;&gt;1、2000 多年的封建社会制度下的城乡结构&lt;/h3&gt;

&lt;p&gt;18 世纪初，我国清朝后期城市人口比重仅为 6%，解放后 1949 年城市人口也仅为 10.6%，当时全球城市化水平已达到 29%，欧美发达国家城市化水平早已超过 60%。在此之前，我国经历了 2000 多年漫长的封建主义和小农经济社会，农村土地制度极不合理，占农村人口 90% 的贫农、雇农、中农和其他人群仅占 20%-30% 的土地，而占农村人口不到 10% 的地主、富农却占有 70%-80% 的土地。形成「&lt;strong&gt;田主不知耕，耕者多无田&lt;/strong&gt;」的局面。正当此时，英国 18 世纪中叶兴起大规模圈地运动，经过半个世纪，众多的小农户转变为大农场，采用新农艺和新农具，刺激了农业技术和农艺学的发展；法国 18 世纪末农产品为工业品的 2.5 倍，农村占优势，法国商品经济的发展引进了英国式大农场的建立；美国经历了 1775―1781 年独立战争和 1861―1865 年南北战争后，没有经过封建社会直接跨进资本主义经济。&lt;strong&gt;中国 1840 年以前仍停滞在晚清封建社会，在农业中未见资本主义的萌芽&lt;/strong&gt;，加上中外反动势力不允许发展民族资本主义经济，以及资产阶级革命的软弱性和不彻底性，中国农业没有走上资本主义道路。&lt;/p&gt;

&lt;p&gt;麦克船长的笔记：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么中国的资产阶级革命有软弱性和不彻底性的问题，西方世界呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2半殖民地半封建社会制度下的城乡结构&quot;&gt;2、半殖民地半封建社会制度下的城乡结构&lt;/h3&gt;

&lt;p&gt;1840-1949 年一百多年来，由于外强侵略、内政腐朽，长年战乱、灾荒不断和半封建土地制度的严重束缚，致使民不聊生，经济发展缓慢，与世界差距拉大。解放前 1930 年末，整个工业中现代工业仅占 10%，分散的手工业占 90%，产业工人只有 300 万，占全国人口的 0.6%。解放前工业最高年产量，钢为 92.3 万吨，原煤为 6188 万吨，电不到 60 亿度，而且大部分在日本侵占的东北。旧中国当权者还以「农业立国」而自慰，实际上当时中国变成了被帝国主义及其代理人压迫和剥削的落后的半殖民地半封建农业国，城市人口也仅占全国的1/10，与当时全球平均水平比较相差 20 个百分点。&lt;/p&gt;

&lt;h2 id=&quot;二地理和交通因素&quot;&gt;二、地理和交通因素&lt;/h2&gt;

&lt;h3 id=&quot;1地理环境和交通发达与否对经济发展和城市形成影响极大&quot;&gt;1、地理环境和交通发达与否对经济发展和城市形成影响极大。&lt;/h3&gt;

&lt;p&gt;现代工业发展证明，地理环境与交通发达是城市形成的重要因素之一。我国唐朝商业往来多采取陆地交通，以车马驼运为主，如通向西域的丝绸之路；宋朝以后建港口开辟海疆运输，如福建的泉州港和郑和下西洋；1840 年以后航海业、造船业在沿江沿海商埠迅速发展起来；第二次大战后航空业与海运业平分秋色；上世纪八九十年代后我国高速公路迅猛崛起，构筑了我国物流与交通的铁路、公路、航空和水运四大动脉；近年由于科学技术的发达，更出现了地下管道运输与网络交易等便捷高速的信息工具。由于时代不同和经济发展水平不同，作为现代经济的城市化水平和交流工具也有不同。&lt;/p&gt;

&lt;h3 id=&quot;2辛亥革命前&quot;&gt;2、辛亥革命前&lt;/h3&gt;

&lt;p&gt;我国几千年来以农、牧和手工业为主，直到清朝后期城市人口达 2400 多万，占总人口比重仅为 6%，局部沿海地区略高一些，如 1781 年（乾隆《杭州府志》载乾隆四十九年）杭州地区除余杭县以外的九个县共有市民 26917 人，乡民 234656 人，市民占总人口的 10.26%。&lt;/p&gt;

&lt;p&gt;麦克船长笔记：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;很有意思的数字，对比杭州目前是 2000 万量级的人口。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3解放前&quot;&gt;3、解放前&lt;/h3&gt;

&lt;p&gt;1950年以前150年间世界城市人口从 4000 万增加到 7 亿，增长了 16 倍，同期中国人口也存在向城市缓慢集中的趋势，但到全国解放时城市人口从 2400 万仅增为 5700 万，增长了 1.4 倍。由于帝国主义列强的操纵，主要工业建设在沿海少数大中城市，形成东重西轻格局，全国 70% 以上的工业集中在占国土不到 12% 的沿海地区，面积占 68% 的内地工业生产总值占全国仅为 9%。&lt;/p&gt;

&lt;p&gt;麦克船长笔记：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何理解这个「帝国主义列强的操纵」？对比其他国家发展，不是集中在少数大中城市吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4城市化对经济发展的作用&quot;&gt;4、城市化对经济发展的作用&lt;/h3&gt;

&lt;p&gt;我国人口密度（人/平方公里）到上世纪末全国为 168 人，东部为 389 人，中部为 168 人，西部仅为 53 人。2001 年全国 662 个城市中各占比重，东部为 41.3%，中部为 34.3%，西部为 24.3%。而东部在大中城市中比重较大，如：400 万人口以上的 8 个城市中占 63%，200 至 400 万人口的 17 城市中占 65%；100 至 200 万人口 141 个城市中占 52%，50 至 100 万人口 279 个城市中占 47%；相反西部 12 个省区在中小城市中占的比重较大，如 20 至 50 万人口 180 个城市中占 31%，20 万人口以下 37 个城市中占 70%。全国省会及计划单列市是各地的政治经济文化中心，其有关数据占全国的比重也说明城市的重要性，如其人口仅占全国 16.72%，而其 GDP 占 40.2%，其城镇居民储蓄存款余额占 38.8%。再以我国改革开放新发展起业的沿海开放城市为例，2001 年其国土面积占全国仅为 1.46%，其人口占 7.32%，其就业人员高达 16.3%，其 GDP 占 19.74%，其实际利用外资占 34.36%，其年末居民储蓄存款余额占 17%。&lt;/p&gt;

&lt;p&gt;概括的说，一是从地区看，我国人口密集于东南，特别是长江、黄河、珠江、辽河下游和沿海地区，而西部的内蒙、新疆、青海和西藏四省区面积约占全国的一半，其人口占不到 4%。二是从地势看，全国 60% 的人口居住在海拔400米以下的平原、河谷、盆地和浅丘陵，30% 居住在 400 米至 800 米之间的山地，10% 居住在 800 米以上的高山地区。三是从交通条件看，在公路、铁路、沿海、内河航道及其他交通要道经济发达地区两侧人口较密，离交通线越远经济欠发达地区的人口越稀，按 2001 年数据，西部 12 个省区市国土面积占全国的 70%，而其交通运输线路长度占全国的比重，铁路营业里程只有 36%，公路只有 41%，内河仅有 19%。四是从大中城市的规模效益看，大中城市聚集效益好发展速度快，全国解放后 1953 年我国仅有城市 157 个，1982 年有 236 个（其中 100 万人口以上的城市只有 37 个占 16%），到了 2001 年有 662 个城市（其中 100 万以上人口的城市就有 166 个占 25%）。&lt;/p&gt;

&lt;h2 id=&quot;三思维和决策因素&quot;&gt;三、思维和决策因素&lt;/h2&gt;

&lt;p&gt;我国城市化走了一个漫长而弯曲的道路，1949 年城市化水平仅为 10.6%，1960 年上升为 19.8%，每年提升 0.84 个百分点，由于历史原因 1978 年反而下降为 17.92%。改革开放之后，我国城市化重新踏上了正常发展轨道。虽然 2001 年达到 37.66%，18 年平均每年提升 1.1 个百分点，但至今我国城市化滞后工业化水平和同等国家城市化水平约 15 个百分点左右，其深层次思维和决策原因有二。&lt;/p&gt;

&lt;h3 id=&quot;1农村现代化道路问题一直没有得到解决&quot;&gt;1、农村现代化道路问题一直没有得到解决&lt;/h3&gt;

&lt;p&gt;全国解放前后，广大农村实行土地改革，充分满足广大农民群众「耕者有其田」的要求，调动了农民群众劳动生产的积极性，为了使广大农民克服个体经济和小规模生产的局限性，提倡农民群众组织起来，成立互助组、土地入股的初级合作社和完全按劳分配的高级合作社，这在当时是有利于生产力的发展和大得民心的方针。由于当时思维和决策上出现了「左」的倾向，由「大跃进」和「人民公社化」以及后来的「以阶级斗争为纲」的「文化大革命」，对待农民群众的思维和决策上发生了突变，由原来的工人阶级领导的工农联盟的团结教育对象，突变为把农民看成时时刻刻在滋生资本主义的小生产者，视为社会主义的改造对象，有的地方对于农民种好自留地和养口母猪也要割「资本主义的尾巴」，对有一定技术和经验的农民进城作点小生意或者搞点第三产业当成为「盲流」加以歧视与排斥，这些「左」的思维和决策因素一直延续到 1978 年末党的十一届三中全会才有了新的转折。后来兴起的以经济建设为中心和家庭联产承包责任制，冲破了绝对平均主义的「大锅饭」，解放了生产力。&lt;/p&gt;

&lt;h3 id=&quot;2农业发展道路上始终存在着如何解决农业规模经营问题&quot;&gt;2、农业发展道路上始终存在着如何解决农业规模经营问题&lt;/h3&gt;

&lt;p&gt;也就是小农如何转变成大农的历史性课题，土地改革后农民必然走组织起来的道路，前苏联走的是集体农庄道路，我国走的是互助合作道路，这是第一次机遇和摸索，由于当时思维和决策上存在着「一大二公」的错误，把互助组合作社拔高为「人民公社」的统一核算单位，脱离了马克思列宁主义的生产关系一定要适应生产力的规律，也脱离了广大农民群众意愿，加上自然灾害农业减产农民减收，导致发生严重的三年困难，为了纠正上述失误，曾经制定了「60 条」主要是调整缩小核算单位，改为以生产队为核算单位，由于当时「左」的大气候未变。实际上仍然未能解决吃「大锅饭」问题。十一届三中全会以后，虽然实行了家庭联产承包责任制，激励了广大群众的生产积极性，但是，又出现了过度集中到过度分散经营的新矛盾。我国半个世纪以来和国外 200 多年来的经验教训告诉我们，农业必须走产业化、集约化、现代化大农业的道路，现在国家对农民土地的承包权和使用权有了法律规定，既保证农民的承包权不得随意侵犯，又允许农民有偿出租与转让土地使用权。经过多年摸索与发展之后，形成现阶段提倡的公司加农户、订单农业和龙头加合同制农户，或者新的农业股份合作制经济等模式，这是第二次机遇和摸索，将使我国小农最终转变为大农。这样一方面在世界市场上具有一定的竞争力；另一方面可以比较顺利地将农村2亿多剩余劳动力转移到第二、三产业上去，转移到城镇里去，完成中国城市化发展水平；第三可以实现农村现代化，提高农业经济效益，增加农民收入，使广大农民群众全面达到小康水平。&lt;/p&gt;

&lt;h2 id=&quot;四制度和管理因素&quot;&gt;四、制度和管理因素&lt;/h2&gt;

&lt;p&gt;我国在计划经济体制时期，在制度和管理上把城市与农村截然分开，形成社会经济「城乡二元结构」分治格局。改革开放以来，随着市场经济体制的建立与完善，逐渐打破城乡分割局面，但现实生活中仍存在着「城乡二元结构」种种现象，有待我们去冲破和改革。产生城乡「两张皮」制度和管理因素大体上有三:&lt;/p&gt;

&lt;h3 id=&quot;1户籍制度和管理体制&quot;&gt;1、户籍制度和管理体制。&lt;/h3&gt;

&lt;p&gt;（1）历史与现状。新中国成立后，户籍政策采取农业户口与非农业户口两种制度与管理体制。在计划经济体制下，把城市人口与农村人口截然分开，人为地立了一堵墙，使我国城市化走了一个弯路。当时「农转非」是特别困难的事情，一般是通过上大学、参军、招工指标才能实现。&lt;/p&gt;

&lt;p&gt;解放后城市人口时多时少，有 4 次大变动。第一次是 1958-1960 年的「大跃进」时期，组织 1960 万农民进城，使 1960 年城市人口比重上升为 16.84%，由于自然灾害和决策失误经济受到严重损失，1962 年又动员 2000 万城镇人口返乡；第二次是 1968-1975 年全国动员 1000 万知识青年上山下乡，还不包括大批干部下放农村和「五七干校」接受再教育，1972 年后通过招工、招生、参军以及通过病残、「顶替」、「招工」和「落实政策」等途径与方式使知识青年和干部基本上全部返回城市，城市人口比重再次上升；第三次是由于乡镇企业兴起约有 1.5 亿多农民「离土离乡」进入乡镇企业劳动就业，使我国小城镇数量由猛降到猛增，从 1952 年 5402 个下降为 1982 年 2644 个，又在 2001 年猛增为 19555 个；第四次是由于沿海开放城市的崛起，如广东深圳特区等建设工业园区和新技术开发区以及外资企业发展的需要，来自四川、安徽、江西、河南和两湖等省 1.2 亿农民工进入城市作「打工仔」和「打工妹」，虽然他们是暂住城市，但是，客观上是城市长期固定的建设者与维护者，这些人如果计入城市人口，比重就会自然而然的上升为 47% 的水平，达到目前世界平均水平。&lt;/p&gt;

&lt;p&gt;（2）从当前公安部户籍管理制度改革要点也能看出当初「左」的思维和决策的消极因素。&lt;/p&gt;

&lt;p&gt;户籍改革正争取尽快打破农业、非农业户口管理二元结构，废除由此衍生的「农转非」计划指标管理政策以及蓝印户口等户口形式，建立全国城乡统一的户口登记管理制度；逐步放宽户口迁移的限制，已具有合法固定住所、稳定的职业或生活来源为基本落户条件、调整户口迁移政策，根据经济、社会发展的客观需要和社会的综合承受能力、最终实现户口自由迁徙；逐步剥离有关部门附加在户口管理上的诸多行政管理职能，还户口管理的本来面目。争取有关部门的支持、尽快出台《户籍法》。现在广东和江苏已经按照中央精神把全省的“农业户口簿与非农业户口簿”改革为统一的「居民户口籍」，受到人民的拥护。&lt;/p&gt;

&lt;h3 id=&quot;2对于城乡基础设施包括水电路电讯等分别建设与管理&quot;&gt;2、对于城乡基础设施（包括水、电、路、电讯等）分别建设与管理。&lt;/h3&gt;

&lt;p&gt;在计划经济体制下，城市基础建设由国家全包，农村则基本上是由农民自筹解决，农村生产与生活急缺的中小型基础设施投资，实际上主要依靠农民自己集资投劳举办，而国家财政用于农业的支出与农业在国民经济中的地位不相对称，有关数据显示，历年用于农业支出占全国支出的比重还呈现递减的趋势，分别是 1978 年为 13.4%，1990 年下降为 9.98%，1995 年为 8.42%，2000 年为 7.75%。2001 年地方支援农村生产支出和农业综合开发支出 358.56 亿元占全国地方财政支出也仅为 2.73%。在一定程度上致使近年来农村基层干部进行大量集资集劳，修路、造桥、建校、改水等工程。在农村税费改革前向农民征收的主要费用项目简称是「三提留」、「五统筹」。「三提留」是指由村一级组织收取的公积金、公益金和集体管理费；「五统筹」是指由乡一级政府收取的计划生育、优抚、民兵训练、乡村道路建设和民办教育方面的费用。近年开展的费改税具体内容是「三个取消、两个调整、一个逐步取消」，即取消生猪屠宰税，取消乡统筹，取消农村教育集资等专门向农民征收的行政事业性收费和政府性基金、集资；调整农业税政策和调整农业特产税征收办法；在几年内逐步取消统一规定的劳动积累工和义务工。举办集体生产和公共事业所需资金，实行「一事一议」，由村民大会或村民代表大会讨论决定。农村税费改革一般可以减轻农民负担1/3左右，相应地增加了农民收入。2003年中央决定取消每年征收的122亿元农业特产税，将对鼓励经济发展和增加农民收入起到直接作用。&lt;/p&gt;

&lt;h3 id=&quot;3在义务教育和公共服务方面也存在城乡不同的待遇&quot;&gt;3、在义务教育和公共服务方面也存在城乡不同的待遇。&lt;/h3&gt;

&lt;p&gt;全国农村有 1.33 亿应受九年义务教育的学生，按照政府公共职能的要求，中央和省政府应当让农村像对待城市 6000 万在受九年义务教育的学生一样享受义务教育制度的实惠，但是，实际上还有不少差距。有关数据显示：我国教育经费占全国财政支出的比重还呈现逐年缩小趋势，如 1996 年为 28.5%，1997-2000 年分别为 27.42%，27.31%，25.39%，24.22%。2000 年小学在校生每人平均预算内经费，城镇为 658 元，农村仅为 479 元，只相当于城镇的 72%。而且农村初中和小学义务教育经费只有 60%-70% 由财政预算内解决，其余 30%-40% 由社会团体、个人办学、社会捐资、公民集资办学、学费杂费和其他来源解决，结果还是增加了乡镇政府和农民群众的负担。此外，城市居民和职工一般享受公费医疗与养老保障等待遇，而农村居民医疗则基本上属于自理和传统的家庭养老制度。另外，在商品供销方面，过去城市居民吃、穿、用都是计划定量供应，而农村居民是生产者，留下种子与自用的和交够「统购任务」后才可以上市出售，不足时还要吃「返销粮」。现在虽然都是市场经济体制，但我国城乡这种分割的「二元结构」现象，还经常出现在现实生活与生产领域当中。如目前一些大中城市为了保证城市居民就业，限制农民进入城市较好的行业和工种。一些地方变相收取种种费用，如对农民工的子女上中小学收取高额「赞助费」。因此，实现城市化必需清除对农村劳动力进城不合理的限制，加快户籍制度的改革，彻底解决城乡居民的两种身份和两种就业待遇的不平等问题。&lt;/p&gt;

&lt;p&gt;来源：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://politics.people.com.cn/n/2013/1114/c70731-23542867.html&lt;/code&gt;。&lt;/p&gt;</content><author><name>麦克船长</name></author><category term="thinking" /><category term="China" /><category term="中国" /><category term="城市" /><category term="乡镇" /><category term="二元" /><category term="经济" /><category term="结构" /><category term="城乡二元经济结构" /><category term="二元经济结构" /><category term="城乡二元结构" /><category term="dual economic structure" /><category term="dualism" /><category term="urban-rural" /><summary type="html">美国作为互联网乃至科技行业的全球领导者，始终还是中国互联网及科技发展的关键参照物。两者相比，中国有很多独特的宏观因素导致无法使用 Time Machine 来照搬美国，同时目前前沿领域两者的时间差也已经非常小了（这非常不同于 PC 互联网浪潮），所以即便有 Time Machine 有效性也没那么充足了（尽管仍然有一定参考价值）。这其中有一个关键特征，就是中国的城乡二元经济结构，受此影响最显著的科技有公司比如拼多多</summary></entry></feed>